
UART_LED_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006ef0  08006ef0  00016ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800730c  0800730c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007314  08007314  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800731c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001c4  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b934  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002068  00000000  00000000  0002bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000848  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025220  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6a5  00000000  00000000  00053f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8c6  00000000  00000000  000605e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013feab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035b0  00000000  00000000  0013fefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ed4 	.word	0x08006ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08006ed4 	.word	0x08006ed4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_ADC1_Init+0xa0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f2e:	f000 fbfd 	bl	800172c <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f38:	f000 f9a0 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f44:	2306      	movs	r3, #6
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f4e:	f000 fd9b 	bl	8001a88 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f58:	f000 f990 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001f8 	.word	0x200001f8
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	0f000001 	.word	0x0f000001

08000f70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_ADC_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d127      	bne.n	8000fe2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_ADC_MspInit+0x84>)
 8000fde:	f001 f925 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_GPIO_Init+0x9c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_GPIO_Init+0x9c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a11      	ldr	r2, [pc, #68]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_GPIO_Init+0x9c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ONE_Pin|LED_THREE_Pin|LED_TWO_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f244 0181 	movw	r1, #16513	; 0x4081
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <MX_GPIO_Init+0xa0>)
 800106a:	f001 fa8b 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_ONE_Pin|LED_THREE_Pin|LED_TWO_Pin;
 800106e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_GPIO_Init+0xa0>)
 8001088:	f001 f8d0 	bl	800222c <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40020400 	.word	0x40020400

0800109c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myData = 0;
uint8_t _test = 0;

int _write(int fd, char *ptr, int len) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (unsigned char*) ptr, len, HAL_MAX_DELAY);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <_write+0x28>)
 80010b4:	f001 ffb5 	bl	8003022 <HAL_UART_Transmit>
	return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000348 	.word	0x20000348

080010c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	if (huart->Instance == huart3.Instance) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_UART_RxCpltCallback+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d104      	bne.n	80010e6 <HAL_UART_RxCpltCallback+0x1e>

		HAL_UART_Receive_IT(&huart3, &myData, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	4905      	ldr	r1, [pc, #20]	; (80010f4 <HAL_UART_RxCpltCallback+0x2c>)
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <HAL_UART_RxCpltCallback+0x28>)
 80010e2:	f002 f830 	bl	8003146 <HAL_UART_Receive_IT>

	}
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000348 	.word	0x20000348
 80010f4:	20000340 	.word	0x20000340

080010f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010fe:	f000 fa7f 	bl	8001600 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001102:	f000 f84b 	bl	800119c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001106:	f7ff ff77 	bl	8000ff8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800110a:	f000 f9d5 	bl	80014b8 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 800110e:	f7ff fedd 	bl	8000ecc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	char *str = "Hello world!";
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0x88>)
 8001114:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, &myData, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	491a      	ldr	r1, [pc, #104]	; (8001184 <main+0x8c>)
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <main+0x90>)
 800111c:	f002 f813 	bl	8003146 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		HAL_ADC_Start(&hadc1);                 // ADC를 Enable시킨 후 conversion을 시작
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <main+0x94>)
 8001122:	f000 fb47 	bl	80017b4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // conversion이 완료되기를 기다림
 8001126:	f04f 31ff 	mov.w	r1, #4294967295
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <main+0x94>)
 800112c:	f000 fc14 	bl	8001958 <HAL_ADC_PollForConversion>
		uint16_t adc_value = HAL_ADC_GetValue(&hadc1);     // ADC 데이터를 읽어 변수에 저장
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <main+0x94>)
 8001132:	f000 fc9c 	bl	8001a6e <HAL_ADC_GetValue>
 8001136:	4603      	mov	r3, r0
 8001138:	817b      	strh	r3, [r7, #10]
		sprintf((char*) buffer, "ADC1-0: %d\n", adc_value); // 이하 UART를 통해 ADC 데이터 출력
 800113a:	897b      	ldrh	r3, [r7, #10]
 800113c:	461a      	mov	r2, r3
 800113e:	4914      	ldr	r1, [pc, #80]	; (8001190 <main+0x98>)
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <main+0x9c>)
 8001142:	f003 fc4d 	bl	80049e0 <siprintf>
		//HAL_UART_Transmit(&huart3, buffer, strlen((char*) buffer), 100);
		double dNum = adc_value*0.001;
 8001146:	897b      	ldrh	r3, [r7, #10]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9fb 	bl	8000544 <__aeabi_i2d>
 800114e:	a30a      	add	r3, pc, #40	; (adr r3, 8001178 <main+0x80>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa60 	bl	8000618 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2300 	strd	r2, r3, [r7]
		printf("%.3fv\r\n ", dNum);
 8001160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <main+0xa0>)
 8001166:	f003 fc23 	bl	80049b0 <iprintf>


		HAL_Delay(1000);
 800116a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800116e:	f000 fab9 	bl	80016e4 <HAL_Delay>
	while (1) {
 8001172:	e7d5      	b.n	8001120 <main+0x28>
 8001174:	f3af 8000 	nop.w
 8001178:	d2f1a9fc 	.word	0xd2f1a9fc
 800117c:	3f50624d 	.word	0x3f50624d
 8001180:	08006ef0 	.word	0x08006ef0
 8001184:	20000340 	.word	0x20000340
 8001188:	20000348 	.word	0x20000348
 800118c:	200001f8 	.word	0x200001f8
 8001190:	08006f00 	.word	0x08006f00
 8001194:	20000240 	.word	0x20000240
 8001198:	08006f0c 	.word	0x08006f0c

0800119c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	; 0x50
 80011a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	; 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 ff8e 	bl	80040cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <SystemClock_Config+0xd8>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <SystemClock_Config+0xd8>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <SystemClock_Config+0xd8>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <SystemClock_Config+0xdc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a24      	ldr	r2, [pc, #144]	; (8001278 <SystemClock_Config+0xdc>)
 80011e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <SystemClock_Config+0xdc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001200:	2310      	movs	r3, #16
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001204:	2302      	movs	r3, #2
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800120c:	2308      	movs	r3, #8
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001210:	23b4      	movs	r3, #180	; 0xb4
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fa19 	bl	8002658 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x94>
		Error_Handler();
 800122c:	f000 f826 	bl	800127c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001230:	f001 f9c2 	bl	80025b8 <HAL_PWREx_EnableOverDrive>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xa2>
		Error_Handler();
 800123a:	f000 f81f 	bl	800127c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800123e:	230f      	movs	r3, #15
 8001240:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2302      	movs	r3, #2
 8001244:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800124a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2105      	movs	r1, #5
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fc73 	bl	8002b48 <HAL_RCC_ClockConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xd0>
		Error_Handler();
 8001268:	f000 f808 	bl	800127c <Error_Handler>
	}
}
 800126c:	bf00      	nop
 800126e:	3750      	adds	r7, #80	; 0x50
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001324:	f000 f9be 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <USART3_IRQHandler+0x10>)
 8001332:	f001 ff39 	bl	80031a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000348 	.word	0x20000348

08001340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_kill>:

int _kill(int pid, int sig)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135a:	f002 fe8d 	bl	8004078 <__errno>
 800135e:	4603      	mov	r3, r0
 8001360:	2216      	movs	r2, #22
 8001362:	601a      	str	r2, [r3, #0]
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_exit>:

void _exit (int status)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffe7 	bl	8001350 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001382:	e7fe      	b.n	8001382 <_exit+0x12>

08001384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	e00a      	b.n	80013ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001396:	f3af 8000 	nop.w
 800139a:	4601      	mov	r1, r0
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	b2ca      	uxtb	r2, r1
 80013a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dbf0      	blt.n	8001396 <_read+0x12>
  }

  return len;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_close>:
  }
  return len;
}

int _close(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e6:	605a      	str	r2, [r3, #4]
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <_isatty>:

int _isatty(int file)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f002 fe0e 	bl	8004078 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20030000 	.word	0x20030000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000344 	.word	0x20000344
 8001490:	200003a0 	.word	0x200003a0

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_USART3_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART3_UART_Init+0x4c>)
 80014f0:	f001 fd4a 	bl	8002f88 <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f7ff febf 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000348 	.word	0x20000348
 8001508:	40004800 	.word	0x40004800

0800150c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_UART_MspInit+0x94>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d134      	bne.n	8001598 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x98>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x98>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0x98>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x98>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_UART_MspInit+0x98>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_UART_MspInit+0x98>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001566:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001578:	2307      	movs	r3, #7
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <HAL_UART_MspInit+0x9c>)
 8001584:	f000 fe52 	bl	800222c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2027      	movs	r0, #39	; 0x27
 800158e:	f000 fd84 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001592:	2027      	movs	r0, #39	; 0x27
 8001594:	f000 fd9d 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004800 	.word	0x40004800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c8:	4c0b      	ldr	r4, [pc, #44]	; (80015f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d6:	f7ff ff5d 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f002 fd53 	bl	8004084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fd8b 	bl	80010f8 <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015f0:	0800731c 	.word	0x0800731c
  ldr r2, =_sbss
 80015f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015f8:	200003a0 	.word	0x200003a0

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 fd2b 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	200f      	movs	r0, #15
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fe28 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fd43 	bl	80020ee <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 fd0b 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	2000038c 	.word	0x2000038c

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2000038c 	.word	0x2000038c

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008

0800172c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e033      	b.n	80017aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fc10 	bl	8000f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001772:	f023 0302 	bic.w	r3, r3, #2
 8001776:	f043 0202 	orr.w	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fab4 	bl	8001cec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
 800179a:	e001      	b.n	80017a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_Start+0x1a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0b2      	b.n	8001934 <HAL_ADC_Start+0x180>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d018      	beq.n	8001816 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_ADC_Start+0x18c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_ADC_Start+0x190>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9a      	lsrs	r2, r3, #18
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d17a      	bne.n	800191a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800184e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001862:	d106      	bne.n	8001872 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f023 0206 	bic.w	r2, r3, #6
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	645a      	str	r2, [r3, #68]	; 0x44
 8001870:	e002      	b.n	8001878 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001880:	4b31      	ldr	r3, [pc, #196]	; (8001948 <HAL_ADC_Start+0x194>)
 8001882:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800188c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2b00      	cmp	r3, #0
 8001898:	d12a      	bne.n	80018f0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2b      	ldr	r2, [pc, #172]	; (800194c <HAL_ADC_Start+0x198>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d015      	beq.n	80018d0 <HAL_ADC_Start+0x11c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a29      	ldr	r2, [pc, #164]	; (8001950 <HAL_ADC_Start+0x19c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d105      	bne.n	80018ba <HAL_ADC_Start+0x106>
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_ADC_Start+0x194>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_ADC_Start+0x1a0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d136      	bne.n	8001932 <HAL_ADC_Start+0x17e>
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_ADC_Start+0x194>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d130      	bne.n	8001932 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d129      	bne.n	8001932 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e020      	b.n	8001932 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a15      	ldr	r2, [pc, #84]	; (800194c <HAL_ADC_Start+0x198>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d11b      	bne.n	8001932 <HAL_ADC_Start+0x17e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d114      	bne.n	8001932 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	e00b      	b.n	8001932 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	20000000 	.word	0x20000000
 8001944:	431bde83 	.word	0x431bde83
 8001948:	40012300 	.word	0x40012300
 800194c:	40012000 	.word	0x40012000
 8001950:	40012100 	.word	0x40012100
 8001954:	40012200 	.word	0x40012200

08001958 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001974:	d113      	bne.n	800199e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001984:	d10b      	bne.n	800199e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f043 0220 	orr.w	r2, r3, #32
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e063      	b.n	8001a66 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800199e:	f7ff fe95 	bl	80016cc <HAL_GetTick>
 80019a2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019a4:	e021      	b.n	80019ea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d01d      	beq.n	80019ea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_ADC_PollForConversion+0x6c>
 80019b4:	f7ff fe8a 	bl	80016cc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d212      	bcs.n	80019ea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d00b      	beq.n	80019ea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f043 0204 	orr.w	r2, r3, #4
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e03d      	b.n	8001a66 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d1d6      	bne.n	80019a6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0212 	mvn.w	r2, #18
 8001a00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d123      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11f      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x1c>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e113      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x244>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d925      	bls.n	8001b00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68d9      	ldr	r1, [r3, #12]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3b1e      	subs	r3, #30
 8001aca:	2207      	movs	r2, #7
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	400a      	ands	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	4603      	mov	r3, r0
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4403      	add	r3, r0
 8001af2:	3b1e      	subs	r3, #30
 8001af4:	409a      	lsls	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	e022      	b.n	8001b46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	2207      	movs	r2, #7
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4403      	add	r3, r0
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d824      	bhi.n	8001b98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b05      	subs	r3, #5
 8001b60:	221f      	movs	r2, #31
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b05      	subs	r3, #5
 8001b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	635a      	str	r2, [r3, #52]	; 0x34
 8001b96:	e04c      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d824      	bhi.n	8001bea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b23      	subs	r3, #35	; 0x23
 8001bb2:	221f      	movs	r2, #31
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b23      	subs	r3, #35	; 0x23
 8001bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
 8001be8:	e023      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b41      	subs	r3, #65	; 0x41
 8001bfc:	221f      	movs	r2, #31
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b41      	subs	r3, #65	; 0x41
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_ADC_ConfigChannel+0x250>)
 8001c34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_ADC_ConfigChannel+0x254>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d10f      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d8>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d10b      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <HAL_ADC_ConfigChannel+0x254>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d12b      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x23a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_ADC_ConfigChannel+0x258>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0x1f4>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b11      	cmp	r3, #17
 8001c7a:	d122      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_ADC_ConfigChannel+0x258>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d111      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_ConfigChannel+0x25c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <HAL_ADC_ConfigChannel+0x260>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9a      	lsrs	r2, r3, #18
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb4:	e002      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f9      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	40012000 	.word	0x40012000
 8001ce0:	10000012 	.word	0x10000012
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <ADC_Init+0x1f0>)
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	021a      	lsls	r2, r3, #8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <ADC_Init+0x1f4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e00f      	b.n	8001dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0202 	bic.w	r2, r2, #2
 8001df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
 8001e04:	005a      	lsls	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	3b01      	subs	r3, #1
 8001e44:	035a      	lsls	r2, r3, #13
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e007      	b.n	8001e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	051a      	lsls	r2, r3, #20
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea2:	025a      	lsls	r2, r3, #9
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	029a      	lsls	r2, r3, #10
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40012300 	.word	0x40012300
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff3e 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff31 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fada 	bl	80016cc <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d008      	beq.n	8002138 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e052      	b.n	80021de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0216 	bic.w	r2, r2, #22
 8002146:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002156:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d103      	bne.n	8002168 <HAL_DMA_Abort+0x62>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0208 	bic.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002188:	e013      	b.n	80021b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218a:	f7ff fa9f 	bl	80016cc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b05      	cmp	r3, #5
 8002196:	d90c      	bls.n	80021b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e015      	b.n	80021de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e4      	bne.n	800218a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	223f      	movs	r2, #63	; 0x3f
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e00c      	b.n	800221e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2205      	movs	r2, #5
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e177      	b.n	8002538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8166 	bne.w	8002532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80c0 	beq.w	8002532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b66      	ldr	r3, [pc, #408]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a65      	ldr	r2, [pc, #404]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_GPIO_Init+0x324>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a61      	ldr	r2, [pc, #388]	; (8002554 <HAL_GPIO_Init+0x328>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_GPIO_Init+0x32c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d037      	beq.n	800246a <HAL_GPIO_Init+0x23e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a57      	ldr	r2, [pc, #348]	; (800255c <HAL_GPIO_Init+0x330>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d031      	beq.n	8002466 <HAL_GPIO_Init+0x23a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a56      	ldr	r2, [pc, #344]	; (8002560 <HAL_GPIO_Init+0x334>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <HAL_GPIO_Init+0x236>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a55      	ldr	r2, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x338>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x232>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a54      	ldr	r2, [pc, #336]	; (8002568 <HAL_GPIO_Init+0x33c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x22e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_GPIO_Init+0x340>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x22a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_GPIO_Init+0x344>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x226>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a51      	ldr	r2, [pc, #324]	; (8002574 <HAL_GPIO_Init+0x348>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x222>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a50      	ldr	r2, [pc, #320]	; (8002578 <HAL_GPIO_Init+0x34c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x21e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_GPIO_Init+0x350>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x21a>
 8002442:	2309      	movs	r3, #9
 8002444:	e012      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002446:	230a      	movs	r3, #10
 8002448:	e010      	b.n	800246c <HAL_GPIO_Init+0x240>
 800244a:	2308      	movs	r3, #8
 800244c:	e00e      	b.n	800246c <HAL_GPIO_Init+0x240>
 800244e:	2307      	movs	r3, #7
 8002450:	e00c      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002452:	2306      	movs	r3, #6
 8002454:	e00a      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002456:	2305      	movs	r3, #5
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x240>
 800245a:	2304      	movs	r3, #4
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x240>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x240>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x240>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x328>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_GPIO_Init+0x354>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a29      	ldr	r2, [pc, #164]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x354>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_GPIO_Init+0x354>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_GPIO_Init+0x354>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a14      	ldr	r2, [pc, #80]	; (8002580 <HAL_GPIO_Init+0x354>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f ae84 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	40021c00 	.word	0x40021c00
 8002578:	40022000 	.word	0x40022000
 800257c:	40022400 	.word	0x40022400
 8002580:	40013c00 	.word	0x40013c00

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_PWREx_EnableOverDrive+0x90>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_PWREx_EnableOverDrive+0x90>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_PWREx_EnableOverDrive+0x90>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_PWREx_EnableOverDrive+0x94>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e4:	f7ff f872 	bl	80016cc <HAL_GetTick>
 80025e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025ea:	e009      	b.n	8002600 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ec:	f7ff f86e 	bl	80016cc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fa:	d901      	bls.n	8002600 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e01f      	b.n	8002640 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_PWREx_EnableOverDrive+0x98>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260c:	d1ee      	bne.n	80025ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002614:	f7ff f85a 	bl	80016cc <HAL_GetTick>
 8002618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261a:	e009      	b.n	8002630 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800261c:	f7ff f856 	bl	80016cc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800262a:	d901      	bls.n	8002630 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e007      	b.n	8002640 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <HAL_PWREx_EnableOverDrive+0x98>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800263c:	d1ee      	bne.n	800261c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	420e0040 	.word	0x420e0040
 8002650:	40007000 	.word	0x40007000
 8002654:	420e0044 	.word	0x420e0044

08002658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e267      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d075      	beq.n	8002762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d00c      	beq.n	800269c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268a:	2b08      	cmp	r3, #8
 800268c:	d112      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268e:	4b82      	ldr	r3, [pc, #520]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269a:	d10b      	bne.n	80026b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269c:	4b7e      	ldr	r3, [pc, #504]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d05b      	beq.n	8002760 <HAL_RCC_OscConfig+0x108>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d157      	bne.n	8002760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e242      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x74>
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a75      	ldr	r2, [pc, #468]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e01d      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x98>
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6c      	ldr	r2, [pc, #432]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0xb0>
 80026f0:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe ffdc 	bl	80016cc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe ffd8 	bl	80016cc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e207      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0xc0>
 8002736:	e014      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe ffc8 	bl	80016cc <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe ffc4 	bl	80016cc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1f3      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	4b51      	ldr	r3, [pc, #324]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0xe8>
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d063      	beq.n	8002836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002782:	2b08      	cmp	r3, #8
 8002784:	d11c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e1c7      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027aa:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4937      	ldr	r1, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	e03a      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d020      	beq.n	800280a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_RCC_OscConfig+0x244>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe ff7d 	bl	80016cc <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe ff79 	bl	80016cc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1a8      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4925      	ldr	r1, [pc, #148]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]
 8002808:	e015      	b.n	8002836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x244>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7fe ff5c 	bl	80016cc <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe ff58 	bl	80016cc <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e187      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d036      	beq.n	80028b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_RCC_OscConfig+0x248>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe ff3c 	bl	80016cc <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002858:	f7fe ff38 	bl	80016cc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e167      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x240>)
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x200>
 8002876:	e01b      	b.n	80028b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x248>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe ff25 	bl	80016cc <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	e00e      	b.n	80028a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002886:	f7fe ff21 	bl	80016cc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d907      	bls.n	80028a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e150      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	42470000 	.word	0x42470000
 80028a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ea      	bne.n	8002886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8097 	beq.w	80029ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b7d      	ldr	r3, [pc, #500]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a7c      	ldr	r2, [pc, #496]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b7a      	ldr	r3, [pc, #488]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b77      	ldr	r3, [pc, #476]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d118      	bne.n	800292c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b74      	ldr	r3, [pc, #464]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a73      	ldr	r2, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe fee1 	bl	80016cc <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe fedd 	bl	80016cc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e10c      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_OscConfig+0x474>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x2ea>
 8002934:	4b64      	ldr	r3, [pc, #400]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a63      	ldr	r2, [pc, #396]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x324>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x30c>
 800294a:	4b5f      	ldr	r3, [pc, #380]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	4b5c      	ldr	r3, [pc, #368]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x324>
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b55      	ldr	r3, [pc, #340]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a54      	ldr	r2, [pc, #336]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fea2 	bl	80016cc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fe9e 	bl	80016cc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0cb      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RCC_OscConfig+0x334>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fe8c 	bl	80016cc <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe fe88 	bl	80016cc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0b5      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ee      	bne.n	80029b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029da:	7dfb      	ldrb	r3, [r7, #23]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80a1 	beq.w	8002b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d05c      	beq.n	8002abc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d141      	bne.n	8002a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b31      	ldr	r3, [pc, #196]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fe5c 	bl	80016cc <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fe58 	bl	80016cc <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e087      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	019b      	lsls	r3, r3, #6
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fe31 	bl	80016cc <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fe2d 	bl	80016cc <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e05c      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x416>
 8002a8c:	e054      	b.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x478>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fe1a 	bl	80016cc <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe fe16 	bl	80016cc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e045      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x444>
 8002aba:	e03d      	b.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e038      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x4ec>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d11a      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0cc      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d90c      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b65      	ldr	r3, [pc, #404]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b8      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	494d      	ldr	r1, [pc, #308]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d044      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d119      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e07f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b3f      	ldr	r3, [pc, #252]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e06f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e067      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4934      	ldr	r1, [pc, #208]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fd48 	bl	80016cc <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fd44 	bl	80016cc <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04f      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d20c      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e032      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d008      	beq.n	8002cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4916      	ldr	r1, [pc, #88]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cce:	f000 f821 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	5ccb      	ldrb	r3, [r1, r3]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fca8 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08006f18 	.word	0x08006f18
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	20000004 	.word	0x20000004

08002d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d18:	b094      	sub	sp, #80	; 0x50
 8002d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d20:	2300      	movs	r3, #0
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d24:	2300      	movs	r3, #0
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d2c:	4b79      	ldr	r3, [pc, #484]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d00d      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x40>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	f200 80e1 	bhi.w	8002f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x34>
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d46:	e0db      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d4c:	e0db      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d4e:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002d50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d52:	e0d8      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d54:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d063      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	099b      	lsrs	r3, r3, #6
 8002d70:	2200      	movs	r2, #0
 8002d72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
 8002d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d86:	4622      	mov	r2, r4
 8002d88:	462b      	mov	r3, r5
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	0159      	lsls	r1, r3, #5
 8002d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d98:	0150      	lsls	r0, r2, #5
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4621      	mov	r1, r4
 8002da0:	1a51      	subs	r1, r2, r1
 8002da2:	6139      	str	r1, [r7, #16]
 8002da4:	4629      	mov	r1, r5
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db8:	4659      	mov	r1, fp
 8002dba:	018b      	lsls	r3, r1, #6
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	018a      	lsls	r2, r1, #6
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002dcc:	4659      	mov	r1, fp
 8002dce:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	4690      	mov	r8, r2
 8002de8:	4699      	mov	r9, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	eb18 0303 	adds.w	r3, r8, r3
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	462b      	mov	r3, r5
 8002df4:	eb49 0303 	adc.w	r3, r9, r3
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e06:	4629      	mov	r1, r5
 8002e08:	024b      	lsls	r3, r1, #9
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e10:	4621      	mov	r1, r4
 8002e12:	024a      	lsls	r2, r1, #9
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e24:	f7fd fed0 	bl	8000bc8 <__aeabi_uldivmod>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e30:	e058      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	099b      	lsrs	r3, r3, #6
 8002e38:	2200      	movs	r2, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
 8002e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	f04f 0000 	mov.w	r0, #0
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	0159      	lsls	r1, r3, #5
 8002e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5e:	0150      	lsls	r0, r2, #5
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4641      	mov	r1, r8
 8002e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e84:	ebb2 040a 	subs.w	r4, r2, sl
 8002e88:	eb63 050b 	sbc.w	r5, r3, fp
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	00eb      	lsls	r3, r5, #3
 8002e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4643      	mov	r3, r8
 8002ea2:	18e3      	adds	r3, r4, r3
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	eb45 0303 	adc.w	r3, r5, r3
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	028b      	lsls	r3, r1, #10
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	028a      	lsls	r2, r1, #10
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	61fa      	str	r2, [r7, #28]
 8002ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ed8:	f7fd fe76 	bl	8000bc8 <__aeabi_uldivmod>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ef4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002efe:	e002      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3750      	adds	r7, #80	; 0x50
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	00f42400 	.word	0x00f42400
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08006f28 	.word	0x08006f28

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffdc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08006f28 	.word	0x08006f28

08002f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e03f      	b.n	800301a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe faac 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fddf 	bl	8003b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b08a      	sub	sp, #40	; 0x28
 8003026:	af02      	add	r7, sp, #8
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b20      	cmp	r3, #32
 8003040:	d17c      	bne.n	800313c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_UART_Transmit+0x2c>
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e075      	b.n	800313e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_UART_Transmit+0x3e>
 800305c:	2302      	movs	r3, #2
 800305e:	e06e      	b.n	800313e <HAL_UART_Transmit+0x11c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003076:	f7fe fb29 	bl	80016cc <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003090:	d108      	bne.n	80030a4 <HAL_UART_Transmit+0x82>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e003      	b.n	80030ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030b4:	e02a      	b.n	800310c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2180      	movs	r1, #128	; 0x80
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fb1f 	bl	8003704 <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e036      	b.n	800313e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3302      	adds	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e007      	b.n	80030fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1cf      	bne.n	80030b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	; 0x40
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 faef 	bl	8003704 <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e006      	b.n	800313e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	4613      	mov	r3, r2
 8003152:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	d11d      	bne.n	800319c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Receive_IT+0x26>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e016      	b.n	800319e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_UART_Receive_IT+0x38>
 800317a:	2302      	movs	r3, #2
 800317c:	e00f      	b.n	800319e <HAL_UART_Receive_IT+0x58>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	461a      	mov	r2, r3
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb24 	bl	80037e0 <UART_Start_Receive_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	e000      	b.n	800319e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0ba      	sub	sp, #232	; 0xe8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d009      	beq.n	800320e <HAL_UART_IRQHandler+0x66>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fc07 	bl	8003a1a <UART_Receive_IT>
      return;
 800320c:	e256      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800320e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80de 	beq.w	80033d4 <HAL_UART_IRQHandler+0x22c>
 8003218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80d1 	beq.w	80033d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_UART_IRQHandler+0xf6>
 8003286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800329e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d011      	beq.n	80032ce <HAL_UART_IRQHandler+0x126>
 80032aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f043 0208 	orr.w	r2, r3, #8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 81ed 	beq.w	80036b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_UART_IRQHandler+0x14e>
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fb92 	bl	8003a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <HAL_UART_IRQHandler+0x17a>
 800331a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa9a 	bl	800385c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d141      	bne.n	80033ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3314      	adds	r3, #20
 800333c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800334c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3314      	adds	r3, #20
 800335e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003362:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800336e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800337a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1d9      	bne.n	8003336 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <HAL_UART_IRQHandler+0x3dc>)
 8003390:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff25 	bl	80021e6 <HAL_DMA_Abort_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00e      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f990 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00a      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f98c 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e006      	b.n	80033d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f988 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033ce:	e170      	b.n	80036b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	bf00      	nop
    return;
 80033d2:	e16e      	b.n	80036b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 814a 	bne.w	8003672 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8143 	beq.w	8003672 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 813c 	beq.w	8003672 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	f040 80b4 	bne.w	8003588 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800342c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8140 	beq.w	80036b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343e:	429a      	cmp	r2, r3
 8003440:	f080 8139 	bcs.w	80036b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800344a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	f000 8088 	beq.w	800356a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003470:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003478:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	330c      	adds	r3, #12
 8003482:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800348a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800349e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1d9      	bne.n	800345a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3314      	adds	r3, #20
 80034ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b8:	f023 0301 	bic.w	r3, r3, #1
 80034bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3314      	adds	r3, #20
 80034c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e1      	bne.n	80034a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3314      	adds	r3, #20
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3314      	adds	r3, #20
 8003502:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003508:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800350c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e3      	bne.n	80034e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f023 0310 	bic.w	r3, r3, #16
 800353e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	330c      	adds	r3, #12
 8003548:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800354c:	65ba      	str	r2, [r7, #88]	; 0x58
 800354e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e3      	bne.n	8003528 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fdce 	bl	8002106 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003572:	b29b      	uxth	r3, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8b6 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003580:	e099      	b.n	80036b6 <HAL_UART_IRQHandler+0x50e>
 8003582:	bf00      	nop
 8003584:	08003923 	.word	0x08003923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 808b 	beq.w	80036ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8086 	beq.w	80036ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035d2:	647a      	str	r2, [r7, #68]	; 0x44
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e3      	bne.n	80035ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3314      	adds	r3, #20
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	623b      	str	r3, [r7, #32]
   return(result);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800360a:	633a      	str	r2, [r7, #48]	; 0x30
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e3      	bne.n	80035e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	330c      	adds	r3, #12
 8003632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	60fb      	str	r3, [r7, #12]
   return(result);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003650:	61fa      	str	r2, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	69fa      	ldr	r2, [r7, #28]
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	617b      	str	r3, [r7, #20]
   return(result);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e3      	bne.n	800362c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f83e 	bl	80036ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003670:	e023      	b.n	80036ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x4ea>
 800367e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f95d 	bl	800394a <UART_Transmit_IT>
    return;
 8003690:	e014      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <HAL_UART_IRQHandler+0x514>
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f99d 	bl	80039ea <UART_EndTransmit_IT>
    return;
 80036b0:	e004      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
    return;
 80036b2:	bf00      	nop
 80036b4:	e002      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
      return;
 80036b6:	bf00      	nop
 80036b8:	e000      	b.n	80036bc <HAL_UART_IRQHandler+0x514>
      return;
 80036ba:	bf00      	nop
  }
}
 80036bc:	37e8      	adds	r7, #232	; 0xe8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop

080036c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b090      	sub	sp, #64	; 0x40
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003714:	e050      	b.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d04c      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <UART_WaitOnFlagUntilTimeout+0x30>
 8003724:	f7fd ffd2 	bl	80016cc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003730:	429a      	cmp	r2, r3
 8003732:	d241      	bcs.n	80037b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003754:	637a      	str	r2, [r7, #52]	; 0x34
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800375a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3314      	adds	r3, #20
 800376e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	613b      	str	r3, [r7, #16]
   return(result);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003788:	623a      	str	r2, [r7, #32]
 800378a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	6a3a      	ldr	r2, [r7, #32]
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	61bb      	str	r3, [r7, #24]
   return(result);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e5      	bne.n	8003768 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e00f      	b.n	80037d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d09f      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3740      	adds	r7, #64	; 0x40
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	88fa      	ldrh	r2, [r7, #6]
 80037fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2222      	movs	r2, #34	; 0x22
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0220 	orr.w	r2, r2, #32
 800384c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b095      	sub	sp, #84	; 0x54
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003884:	643a      	str	r2, [r7, #64]	; 0x40
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3314      	adds	r3, #20
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3314      	adds	r3, #20
 80038b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d119      	bne.n	8003908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	647b      	str	r3, [r7, #68]	; 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f4:	61ba      	str	r2, [r7, #24]
 80038f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6979      	ldr	r1, [r7, #20]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	613b      	str	r3, [r7, #16]
   return(result);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e5      	bne.n	80038d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003916:	bf00      	nop
 8003918:	3754      	adds	r7, #84	; 0x54
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff fecb 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b21      	cmp	r3, #33	; 0x21
 800395c:	d13e      	bne.n	80039dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d114      	bne.n	8003992 <UART_Transmit_IT+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d110      	bne.n	8003992 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	621a      	str	r2, [r3, #32]
 8003990:	e008      	b.n	80039a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6211      	str	r1, [r2, #32]
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	4619      	mov	r1, r3
 80039b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10f      	bne.n	80039d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe5a 	bl	80036c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08c      	sub	sp, #48	; 0x30
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b22      	cmp	r3, #34	; 0x22
 8003a2c:	f040 80ab 	bne.w	8003b86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d117      	bne.n	8003a6a <UART_Receive_IT+0x50>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	1c9a      	adds	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
 8003a68:	e026      	b.n	8003ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d007      	beq.n	8003a8e <UART_Receive_IT+0x74>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <UART_Receive_IT+0x82>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e008      	b.n	8003aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d15a      	bne.n	8003b82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0220 	bic.w	r2, r2, #32
 8003ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d135      	bne.n	8003b78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	330c      	adds	r3, #12
 8003b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b32:	623a      	str	r2, [r7, #32]
 8003b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	69f9      	ldr	r1, [r7, #28]
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e5      	bne.n	8003b12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d10a      	bne.n	8003b6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fdbb 	bl	80036ec <HAL_UARTEx_RxEventCallback>
 8003b76:	e002      	b.n	8003b7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd faa5 	bl	80010c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e002      	b.n	8003b88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e000      	b.n	8003b88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b86:	2302      	movs	r3, #2
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3730      	adds	r7, #48	; 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b94:	b0c0      	sub	sp, #256	; 0x100
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	ea40 0301 	orr.w	r3, r0, r1
 8003bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003be8:	f021 010c 	bic.w	r1, r1, #12
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	6999      	ldr	r1, [r3, #24]
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	ea40 0301 	orr.w	r3, r0, r1
 8003c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b8f      	ldr	r3, [pc, #572]	; (8003e5c <UART_SetConfig+0x2cc>)
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d005      	beq.n	8003c30 <UART_SetConfig+0xa0>
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b8d      	ldr	r3, [pc, #564]	; (8003e60 <UART_SetConfig+0x2d0>)
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d104      	bne.n	8003c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c30:	f7ff f996 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8003c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c38:	e003      	b.n	8003c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c3a:	f7ff f97d 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8003c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	f040 810c 	bne.w	8003e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	1891      	adds	r1, r2, r2
 8003c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c6a:	415b      	adcs	r3, r3
 8003c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c72:	4621      	mov	r1, r4
 8003c74:	eb12 0801 	adds.w	r8, r2, r1
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb43 0901 	adc.w	r9, r3, r1
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c92:	4690      	mov	r8, r2
 8003c94:	4699      	mov	r9, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	eb18 0303 	adds.w	r3, r8, r3
 8003c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	eb49 0303 	adc.w	r3, r9, r3
 8003ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	18db      	adds	r3, r3, r3
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	eb42 0303 	adc.w	r3, r2, r3
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
 8003ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cd4:	f7fc ff78 	bl	8000bc8 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <UART_SetConfig+0x2d4>)
 8003cde:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	011c      	lsls	r4, r3, #4
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d00:	415b      	adcs	r3, r3
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d08:	4641      	mov	r1, r8
 8003d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d0e:	4649      	mov	r1, r9
 8003d10:	eb43 0b01 	adc.w	fp, r3, r1
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d28:	4692      	mov	sl, r2
 8003d2a:	469b      	mov	fp, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d36:	464b      	mov	r3, r9
 8003d38:	eb4b 0303 	adc.w	r3, fp, r3
 8003d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d54:	460b      	mov	r3, r1
 8003d56:	18db      	adds	r3, r3, r3
 8003d58:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	647b      	str	r3, [r7, #68]	; 0x44
 8003d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d6a:	f7fc ff2d 	bl	8000bc8 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	4b3b      	ldr	r3, [pc, #236]	; (8003e64 <UART_SetConfig+0x2d4>)
 8003d76:	fba3 2301 	umull	r2, r3, r3, r1
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	2264      	movs	r2, #100	; 0x64
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	1acb      	subs	r3, r1, r3
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d8a:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <UART_SetConfig+0x2d4>)
 8003d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d98:	441c      	add	r4, r3
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003db4:	415b      	adcs	r3, r3
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	1851      	adds	r1, r2, r1
 8003dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	00cb      	lsls	r3, r1, #3
 8003dd8:	4651      	mov	r1, sl
 8003dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dde:	4651      	mov	r1, sl
 8003de0:	00ca      	lsls	r2, r1, #3
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	4642      	mov	r2, r8
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df0:	464b      	mov	r3, r9
 8003df2:	460a      	mov	r2, r1
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e10:	460b      	mov	r3, r1
 8003e12:	18db      	adds	r3, r3, r3
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e16:	4613      	mov	r3, r2
 8003e18:	eb42 0303 	adc.w	r3, r2, r3
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e26:	f7fc fecf 	bl	8000bc8 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <UART_SetConfig+0x2d4>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <UART_SetConfig+0x2d4>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4422      	add	r2, r4
 8003e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e58:	e105      	b.n	8004066 <UART_SetConfig+0x4d6>
 8003e5a:	bf00      	nop
 8003e5c:	40011000 	.word	0x40011000
 8003e60:	40011400 	.word	0x40011400
 8003e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	6239      	str	r1, [r7, #32]
 8003e82:	415b      	adcs	r3, r3
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	1854      	adds	r4, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb43 0501 	adc.w	r5, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	00eb      	lsls	r3, r5, #3
 8003e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea2:	00e2      	lsls	r2, r4, #3
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	461d      	mov	r5, r3
 8003ea8:	4643      	mov	r3, r8
 8003eaa:	18e3      	adds	r3, r4, r3
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	eb45 0303 	adc.w	r3, r5, r3
 8003eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	008b      	lsls	r3, r1, #2
 8003eda:	4621      	mov	r1, r4
 8003edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	008a      	lsls	r2, r1, #2
 8003ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ee8:	f7fc fe6e 	bl	8000bc8 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4b60      	ldr	r3, [pc, #384]	; (8004074 <UART_SetConfig+0x4e4>)
 8003ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	011c      	lsls	r4, r3, #4
 8003efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f0c:	4642      	mov	r2, r8
 8003f0e:	464b      	mov	r3, r9
 8003f10:	1891      	adds	r1, r2, r2
 8003f12:	61b9      	str	r1, [r7, #24]
 8003f14:	415b      	adcs	r3, r3
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f1c:	4641      	mov	r1, r8
 8003f1e:	1851      	adds	r1, r2, r1
 8003f20:	6139      	str	r1, [r7, #16]
 8003f22:	4649      	mov	r1, r9
 8003f24:	414b      	adcs	r3, r1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f34:	4659      	mov	r1, fp
 8003f36:	00cb      	lsls	r3, r1, #3
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f3e:	4651      	mov	r1, sl
 8003f40:	00ca      	lsls	r2, r1, #3
 8003f42:	4610      	mov	r0, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	4603      	mov	r3, r0
 8003f48:	4642      	mov	r2, r8
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f50:	464b      	mov	r3, r9
 8003f52:	460a      	mov	r2, r1
 8003f54:	eb42 0303 	adc.w	r3, r2, r3
 8003f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f74:	4649      	mov	r1, r9
 8003f76:	008b      	lsls	r3, r1, #2
 8003f78:	4641      	mov	r1, r8
 8003f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7e:	4641      	mov	r1, r8
 8003f80:	008a      	lsls	r2, r1, #2
 8003f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f86:	f7fc fe1f 	bl	8000bc8 <__aeabi_uldivmod>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4b39      	ldr	r3, [pc, #228]	; (8004074 <UART_SetConfig+0x4e4>)
 8003f90:	fba3 1302 	umull	r1, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2164      	movs	r1, #100	; 0x64
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a34      	ldr	r2, [pc, #208]	; (8004074 <UART_SetConfig+0x4e4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fae:	441c      	add	r4, r3
 8003fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8003fb8:	677a      	str	r2, [r7, #116]	; 0x74
 8003fba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fbe:	4642      	mov	r2, r8
 8003fc0:	464b      	mov	r3, r9
 8003fc2:	1891      	adds	r1, r2, r2
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fce:	4641      	mov	r1, r8
 8003fd0:	1851      	adds	r1, r2, r1
 8003fd2:	6039      	str	r1, [r7, #0]
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	414b      	adcs	r3, r1
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	00cb      	lsls	r3, r1, #3
 8003fea:	4651      	mov	r1, sl
 8003fec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	00ca      	lsls	r2, r1, #3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	189b      	adds	r3, r3, r2
 8003ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004000:	464b      	mov	r3, r9
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800400a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	663b      	str	r3, [r7, #96]	; 0x60
 8004014:	667a      	str	r2, [r7, #100]	; 0x64
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004022:	4649      	mov	r1, r9
 8004024:	008b      	lsls	r3, r1, #2
 8004026:	4641      	mov	r1, r8
 8004028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800402c:	4641      	mov	r1, r8
 800402e:	008a      	lsls	r2, r1, #2
 8004030:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004034:	f7fc fdc8 	bl	8000bc8 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <UART_SetConfig+0x4e4>)
 800403e:	fba3 1302 	umull	r1, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2164      	movs	r1, #100	; 0x64
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	3332      	adds	r3, #50	; 0x32
 8004050:	4a08      	ldr	r2, [pc, #32]	; (8004074 <UART_SetConfig+0x4e4>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	f003 020f 	and.w	r2, r3, #15
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4422      	add	r2, r4
 8004064:	609a      	str	r2, [r3, #8]
}
 8004066:	bf00      	nop
 8004068:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004072:	bf00      	nop
 8004074:	51eb851f 	.word	0x51eb851f

08004078 <__errno>:
 8004078:	4b01      	ldr	r3, [pc, #4]	; (8004080 <__errno+0x8>)
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000000c 	.word	0x2000000c

08004084 <__libc_init_array>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	4d0d      	ldr	r5, [pc, #52]	; (80040bc <__libc_init_array+0x38>)
 8004088:	4c0d      	ldr	r4, [pc, #52]	; (80040c0 <__libc_init_array+0x3c>)
 800408a:	1b64      	subs	r4, r4, r5
 800408c:	10a4      	asrs	r4, r4, #2
 800408e:	2600      	movs	r6, #0
 8004090:	42a6      	cmp	r6, r4
 8004092:	d109      	bne.n	80040a8 <__libc_init_array+0x24>
 8004094:	4d0b      	ldr	r5, [pc, #44]	; (80040c4 <__libc_init_array+0x40>)
 8004096:	4c0c      	ldr	r4, [pc, #48]	; (80040c8 <__libc_init_array+0x44>)
 8004098:	f002 ff1c 	bl	8006ed4 <_init>
 800409c:	1b64      	subs	r4, r4, r5
 800409e:	10a4      	asrs	r4, r4, #2
 80040a0:	2600      	movs	r6, #0
 80040a2:	42a6      	cmp	r6, r4
 80040a4:	d105      	bne.n	80040b2 <__libc_init_array+0x2e>
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ac:	4798      	blx	r3
 80040ae:	3601      	adds	r6, #1
 80040b0:	e7ee      	b.n	8004090 <__libc_init_array+0xc>
 80040b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b6:	4798      	blx	r3
 80040b8:	3601      	adds	r6, #1
 80040ba:	e7f2      	b.n	80040a2 <__libc_init_array+0x1e>
 80040bc:	08007314 	.word	0x08007314
 80040c0:	08007314 	.word	0x08007314
 80040c4:	08007314 	.word	0x08007314
 80040c8:	08007318 	.word	0x08007318

080040cc <memset>:
 80040cc:	4402      	add	r2, r0
 80040ce:	4603      	mov	r3, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <__cvt>:
 80040dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	ec55 4b10 	vmov	r4, r5, d0
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	460e      	mov	r6, r1
 80040e8:	4619      	mov	r1, r3
 80040ea:	462b      	mov	r3, r5
 80040ec:	bfbb      	ittet	lt
 80040ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040f2:	461d      	movlt	r5, r3
 80040f4:	2300      	movge	r3, #0
 80040f6:	232d      	movlt	r3, #45	; 0x2d
 80040f8:	700b      	strb	r3, [r1, #0]
 80040fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004100:	4691      	mov	r9, r2
 8004102:	f023 0820 	bic.w	r8, r3, #32
 8004106:	bfbc      	itt	lt
 8004108:	4622      	movlt	r2, r4
 800410a:	4614      	movlt	r4, r2
 800410c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004110:	d005      	beq.n	800411e <__cvt+0x42>
 8004112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004116:	d100      	bne.n	800411a <__cvt+0x3e>
 8004118:	3601      	adds	r6, #1
 800411a:	2102      	movs	r1, #2
 800411c:	e000      	b.n	8004120 <__cvt+0x44>
 800411e:	2103      	movs	r1, #3
 8004120:	ab03      	add	r3, sp, #12
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	ab02      	add	r3, sp, #8
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	ec45 4b10 	vmov	d0, r4, r5
 800412c:	4653      	mov	r3, sl
 800412e:	4632      	mov	r2, r6
 8004130:	f000 fd02 	bl	8004b38 <_dtoa_r>
 8004134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004138:	4607      	mov	r7, r0
 800413a:	d102      	bne.n	8004142 <__cvt+0x66>
 800413c:	f019 0f01 	tst.w	r9, #1
 8004140:	d022      	beq.n	8004188 <__cvt+0xac>
 8004142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004146:	eb07 0906 	add.w	r9, r7, r6
 800414a:	d110      	bne.n	800416e <__cvt+0x92>
 800414c:	783b      	ldrb	r3, [r7, #0]
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d10a      	bne.n	8004168 <__cvt+0x8c>
 8004152:	2200      	movs	r2, #0
 8004154:	2300      	movs	r3, #0
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f7fc fcc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800415e:	b918      	cbnz	r0, 8004168 <__cvt+0x8c>
 8004160:	f1c6 0601 	rsb	r6, r6, #1
 8004164:	f8ca 6000 	str.w	r6, [sl]
 8004168:	f8da 3000 	ldr.w	r3, [sl]
 800416c:	4499      	add	r9, r3
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800417a:	b108      	cbz	r0, 8004180 <__cvt+0xa4>
 800417c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004180:	2230      	movs	r2, #48	; 0x30
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	454b      	cmp	r3, r9
 8004186:	d307      	bcc.n	8004198 <__cvt+0xbc>
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800418c:	1bdb      	subs	r3, r3, r7
 800418e:	4638      	mov	r0, r7
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	b004      	add	sp, #16
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	1c59      	adds	r1, r3, #1
 800419a:	9103      	str	r1, [sp, #12]
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e7f0      	b.n	8004182 <__cvt+0xa6>

080041a0 <__exponent>:
 80041a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041a2:	4603      	mov	r3, r0
 80041a4:	2900      	cmp	r1, #0
 80041a6:	bfb8      	it	lt
 80041a8:	4249      	neglt	r1, r1
 80041aa:	f803 2b02 	strb.w	r2, [r3], #2
 80041ae:	bfb4      	ite	lt
 80041b0:	222d      	movlt	r2, #45	; 0x2d
 80041b2:	222b      	movge	r2, #43	; 0x2b
 80041b4:	2909      	cmp	r1, #9
 80041b6:	7042      	strb	r2, [r0, #1]
 80041b8:	dd2a      	ble.n	8004210 <__exponent+0x70>
 80041ba:	f10d 0407 	add.w	r4, sp, #7
 80041be:	46a4      	mov	ip, r4
 80041c0:	270a      	movs	r7, #10
 80041c2:	46a6      	mov	lr, r4
 80041c4:	460a      	mov	r2, r1
 80041c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80041ca:	fb07 1516 	mls	r5, r7, r6, r1
 80041ce:	3530      	adds	r5, #48	; 0x30
 80041d0:	2a63      	cmp	r2, #99	; 0x63
 80041d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80041d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041da:	4631      	mov	r1, r6
 80041dc:	dcf1      	bgt.n	80041c2 <__exponent+0x22>
 80041de:	3130      	adds	r1, #48	; 0x30
 80041e0:	f1ae 0502 	sub.w	r5, lr, #2
 80041e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041e8:	1c44      	adds	r4, r0, #1
 80041ea:	4629      	mov	r1, r5
 80041ec:	4561      	cmp	r1, ip
 80041ee:	d30a      	bcc.n	8004206 <__exponent+0x66>
 80041f0:	f10d 0209 	add.w	r2, sp, #9
 80041f4:	eba2 020e 	sub.w	r2, r2, lr
 80041f8:	4565      	cmp	r5, ip
 80041fa:	bf88      	it	hi
 80041fc:	2200      	movhi	r2, #0
 80041fe:	4413      	add	r3, r2
 8004200:	1a18      	subs	r0, r3, r0
 8004202:	b003      	add	sp, #12
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800420a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800420e:	e7ed      	b.n	80041ec <__exponent+0x4c>
 8004210:	2330      	movs	r3, #48	; 0x30
 8004212:	3130      	adds	r1, #48	; 0x30
 8004214:	7083      	strb	r3, [r0, #2]
 8004216:	70c1      	strb	r1, [r0, #3]
 8004218:	1d03      	adds	r3, r0, #4
 800421a:	e7f1      	b.n	8004200 <__exponent+0x60>

0800421c <_printf_float>:
 800421c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004220:	ed2d 8b02 	vpush	{d8}
 8004224:	b08d      	sub	sp, #52	; 0x34
 8004226:	460c      	mov	r4, r1
 8004228:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800422c:	4616      	mov	r6, r2
 800422e:	461f      	mov	r7, r3
 8004230:	4605      	mov	r5, r0
 8004232:	f001 fb65 	bl	8005900 <_localeconv_r>
 8004236:	f8d0 a000 	ldr.w	sl, [r0]
 800423a:	4650      	mov	r0, sl
 800423c:	f7fb ffd8 	bl	80001f0 <strlen>
 8004240:	2300      	movs	r3, #0
 8004242:	930a      	str	r3, [sp, #40]	; 0x28
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	f8d8 3000 	ldr.w	r3, [r8]
 800424c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004250:	3307      	adds	r3, #7
 8004252:	f023 0307 	bic.w	r3, r3, #7
 8004256:	f103 0208 	add.w	r2, r3, #8
 800425a:	f8c8 2000 	str.w	r2, [r8]
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004266:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800426a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800426e:	9307      	str	r3, [sp, #28]
 8004270:	f8cd 8018 	str.w	r8, [sp, #24]
 8004274:	ee08 0a10 	vmov	s16, r0
 8004278:	4b9f      	ldr	r3, [pc, #636]	; (80044f8 <_printf_float+0x2dc>)
 800427a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800427e:	f04f 32ff 	mov.w	r2, #4294967295
 8004282:	f7fc fc63 	bl	8000b4c <__aeabi_dcmpun>
 8004286:	bb88      	cbnz	r0, 80042ec <_printf_float+0xd0>
 8004288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800428c:	4b9a      	ldr	r3, [pc, #616]	; (80044f8 <_printf_float+0x2dc>)
 800428e:	f04f 32ff 	mov.w	r2, #4294967295
 8004292:	f7fc fc3d 	bl	8000b10 <__aeabi_dcmple>
 8004296:	bb48      	cbnz	r0, 80042ec <_printf_float+0xd0>
 8004298:	2200      	movs	r2, #0
 800429a:	2300      	movs	r3, #0
 800429c:	4640      	mov	r0, r8
 800429e:	4649      	mov	r1, r9
 80042a0:	f7fc fc2c 	bl	8000afc <__aeabi_dcmplt>
 80042a4:	b110      	cbz	r0, 80042ac <_printf_float+0x90>
 80042a6:	232d      	movs	r3, #45	; 0x2d
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	4b93      	ldr	r3, [pc, #588]	; (80044fc <_printf_float+0x2e0>)
 80042ae:	4894      	ldr	r0, [pc, #592]	; (8004500 <_printf_float+0x2e4>)
 80042b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80042b4:	bf94      	ite	ls
 80042b6:	4698      	movls	r8, r3
 80042b8:	4680      	movhi	r8, r0
 80042ba:	2303      	movs	r3, #3
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	9b05      	ldr	r3, [sp, #20]
 80042c0:	f023 0204 	bic.w	r2, r3, #4
 80042c4:	6022      	str	r2, [r4, #0]
 80042c6:	f04f 0900 	mov.w	r9, #0
 80042ca:	9700      	str	r7, [sp, #0]
 80042cc:	4633      	mov	r3, r6
 80042ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 f9d8 	bl	8004688 <_printf_common>
 80042d8:	3001      	adds	r0, #1
 80042da:	f040 8090 	bne.w	80043fe <_printf_float+0x1e2>
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	b00d      	add	sp, #52	; 0x34
 80042e4:	ecbd 8b02 	vpop	{d8}
 80042e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	4640      	mov	r0, r8
 80042f2:	4649      	mov	r1, r9
 80042f4:	f7fc fc2a 	bl	8000b4c <__aeabi_dcmpun>
 80042f8:	b140      	cbz	r0, 800430c <_printf_float+0xf0>
 80042fa:	464b      	mov	r3, r9
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bfbc      	itt	lt
 8004300:	232d      	movlt	r3, #45	; 0x2d
 8004302:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004306:	487f      	ldr	r0, [pc, #508]	; (8004504 <_printf_float+0x2e8>)
 8004308:	4b7f      	ldr	r3, [pc, #508]	; (8004508 <_printf_float+0x2ec>)
 800430a:	e7d1      	b.n	80042b0 <_printf_float+0x94>
 800430c:	6863      	ldr	r3, [r4, #4]
 800430e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004312:	9206      	str	r2, [sp, #24]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	d13f      	bne.n	8004398 <_printf_float+0x17c>
 8004318:	2306      	movs	r3, #6
 800431a:	6063      	str	r3, [r4, #4]
 800431c:	9b05      	ldr	r3, [sp, #20]
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004324:	2300      	movs	r3, #0
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	ab0a      	add	r3, sp, #40	; 0x28
 800432a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800432e:	ab09      	add	r3, sp, #36	; 0x24
 8004330:	ec49 8b10 	vmov	d0, r8, r9
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6022      	str	r2, [r4, #0]
 8004338:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800433c:	4628      	mov	r0, r5
 800433e:	f7ff fecd 	bl	80040dc <__cvt>
 8004342:	9b06      	ldr	r3, [sp, #24]
 8004344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004346:	2b47      	cmp	r3, #71	; 0x47
 8004348:	4680      	mov	r8, r0
 800434a:	d108      	bne.n	800435e <_printf_float+0x142>
 800434c:	1cc8      	adds	r0, r1, #3
 800434e:	db02      	blt.n	8004356 <_printf_float+0x13a>
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	4299      	cmp	r1, r3
 8004354:	dd41      	ble.n	80043da <_printf_float+0x1be>
 8004356:	f1ab 0b02 	sub.w	fp, fp, #2
 800435a:	fa5f fb8b 	uxtb.w	fp, fp
 800435e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004362:	d820      	bhi.n	80043a6 <_printf_float+0x18a>
 8004364:	3901      	subs	r1, #1
 8004366:	465a      	mov	r2, fp
 8004368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800436c:	9109      	str	r1, [sp, #36]	; 0x24
 800436e:	f7ff ff17 	bl	80041a0 <__exponent>
 8004372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004374:	1813      	adds	r3, r2, r0
 8004376:	2a01      	cmp	r2, #1
 8004378:	4681      	mov	r9, r0
 800437a:	6123      	str	r3, [r4, #16]
 800437c:	dc02      	bgt.n	8004384 <_printf_float+0x168>
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	07d2      	lsls	r2, r2, #31
 8004382:	d501      	bpl.n	8004388 <_printf_float+0x16c>
 8004384:	3301      	adds	r3, #1
 8004386:	6123      	str	r3, [r4, #16]
 8004388:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800438c:	2b00      	cmp	r3, #0
 800438e:	d09c      	beq.n	80042ca <_printf_float+0xae>
 8004390:	232d      	movs	r3, #45	; 0x2d
 8004392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004396:	e798      	b.n	80042ca <_printf_float+0xae>
 8004398:	9a06      	ldr	r2, [sp, #24]
 800439a:	2a47      	cmp	r2, #71	; 0x47
 800439c:	d1be      	bne.n	800431c <_printf_float+0x100>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1bc      	bne.n	800431c <_printf_float+0x100>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e7b9      	b.n	800431a <_printf_float+0xfe>
 80043a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80043aa:	d118      	bne.n	80043de <_printf_float+0x1c2>
 80043ac:	2900      	cmp	r1, #0
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	dd0b      	ble.n	80043ca <_printf_float+0x1ae>
 80043b2:	6121      	str	r1, [r4, #16]
 80043b4:	b913      	cbnz	r3, 80043bc <_printf_float+0x1a0>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	07d0      	lsls	r0, r2, #31
 80043ba:	d502      	bpl.n	80043c2 <_printf_float+0x1a6>
 80043bc:	3301      	adds	r3, #1
 80043be:	440b      	add	r3, r1
 80043c0:	6123      	str	r3, [r4, #16]
 80043c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043c4:	f04f 0900 	mov.w	r9, #0
 80043c8:	e7de      	b.n	8004388 <_printf_float+0x16c>
 80043ca:	b913      	cbnz	r3, 80043d2 <_printf_float+0x1b6>
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	07d2      	lsls	r2, r2, #31
 80043d0:	d501      	bpl.n	80043d6 <_printf_float+0x1ba>
 80043d2:	3302      	adds	r3, #2
 80043d4:	e7f4      	b.n	80043c0 <_printf_float+0x1a4>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e7f2      	b.n	80043c0 <_printf_float+0x1a4>
 80043da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e0:	4299      	cmp	r1, r3
 80043e2:	db05      	blt.n	80043f0 <_printf_float+0x1d4>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	6121      	str	r1, [r4, #16]
 80043e8:	07d8      	lsls	r0, r3, #31
 80043ea:	d5ea      	bpl.n	80043c2 <_printf_float+0x1a6>
 80043ec:	1c4b      	adds	r3, r1, #1
 80043ee:	e7e7      	b.n	80043c0 <_printf_float+0x1a4>
 80043f0:	2900      	cmp	r1, #0
 80043f2:	bfd4      	ite	le
 80043f4:	f1c1 0202 	rsble	r2, r1, #2
 80043f8:	2201      	movgt	r2, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	e7e0      	b.n	80043c0 <_printf_float+0x1a4>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	055a      	lsls	r2, r3, #21
 8004402:	d407      	bmi.n	8004414 <_printf_float+0x1f8>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	4642      	mov	r2, r8
 8004408:	4631      	mov	r1, r6
 800440a:	4628      	mov	r0, r5
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	d12c      	bne.n	800446c <_printf_float+0x250>
 8004412:	e764      	b.n	80042de <_printf_float+0xc2>
 8004414:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004418:	f240 80e0 	bls.w	80045dc <_printf_float+0x3c0>
 800441c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	f7fc fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 8004428:	2800      	cmp	r0, #0
 800442a:	d034      	beq.n	8004496 <_printf_float+0x27a>
 800442c:	4a37      	ldr	r2, [pc, #220]	; (800450c <_printf_float+0x2f0>)
 800442e:	2301      	movs	r3, #1
 8004430:	4631      	mov	r1, r6
 8004432:	4628      	mov	r0, r5
 8004434:	47b8      	blx	r7
 8004436:	3001      	adds	r0, #1
 8004438:	f43f af51 	beq.w	80042de <_printf_float+0xc2>
 800443c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004440:	429a      	cmp	r2, r3
 8004442:	db02      	blt.n	800444a <_printf_float+0x22e>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	07d8      	lsls	r0, r3, #31
 8004448:	d510      	bpl.n	800446c <_printf_float+0x250>
 800444a:	ee18 3a10 	vmov	r3, s16
 800444e:	4652      	mov	r2, sl
 8004450:	4631      	mov	r1, r6
 8004452:	4628      	mov	r0, r5
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	f43f af41 	beq.w	80042de <_printf_float+0xc2>
 800445c:	f04f 0800 	mov.w	r8, #0
 8004460:	f104 091a 	add.w	r9, r4, #26
 8004464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004466:	3b01      	subs	r3, #1
 8004468:	4543      	cmp	r3, r8
 800446a:	dc09      	bgt.n	8004480 <_printf_float+0x264>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	079b      	lsls	r3, r3, #30
 8004470:	f100 8105 	bmi.w	800467e <_printf_float+0x462>
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004478:	4298      	cmp	r0, r3
 800447a:	bfb8      	it	lt
 800447c:	4618      	movlt	r0, r3
 800447e:	e730      	b.n	80042e2 <_printf_float+0xc6>
 8004480:	2301      	movs	r3, #1
 8004482:	464a      	mov	r2, r9
 8004484:	4631      	mov	r1, r6
 8004486:	4628      	mov	r0, r5
 8004488:	47b8      	blx	r7
 800448a:	3001      	adds	r0, #1
 800448c:	f43f af27 	beq.w	80042de <_printf_float+0xc2>
 8004490:	f108 0801 	add.w	r8, r8, #1
 8004494:	e7e6      	b.n	8004464 <_printf_float+0x248>
 8004496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	dc39      	bgt.n	8004510 <_printf_float+0x2f4>
 800449c:	4a1b      	ldr	r2, [pc, #108]	; (800450c <_printf_float+0x2f0>)
 800449e:	2301      	movs	r3, #1
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	47b8      	blx	r7
 80044a6:	3001      	adds	r0, #1
 80044a8:	f43f af19 	beq.w	80042de <_printf_float+0xc2>
 80044ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d102      	bne.n	80044ba <_printf_float+0x29e>
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	07d9      	lsls	r1, r3, #31
 80044b8:	d5d8      	bpl.n	800446c <_printf_float+0x250>
 80044ba:	ee18 3a10 	vmov	r3, s16
 80044be:	4652      	mov	r2, sl
 80044c0:	4631      	mov	r1, r6
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	f43f af09 	beq.w	80042de <_printf_float+0xc2>
 80044cc:	f04f 0900 	mov.w	r9, #0
 80044d0:	f104 0a1a 	add.w	sl, r4, #26
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	425b      	negs	r3, r3
 80044d8:	454b      	cmp	r3, r9
 80044da:	dc01      	bgt.n	80044e0 <_printf_float+0x2c4>
 80044dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044de:	e792      	b.n	8004406 <_printf_float+0x1ea>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4652      	mov	r2, sl
 80044e4:	4631      	mov	r1, r6
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b8      	blx	r7
 80044ea:	3001      	adds	r0, #1
 80044ec:	f43f aef7 	beq.w	80042de <_printf_float+0xc2>
 80044f0:	f109 0901 	add.w	r9, r9, #1
 80044f4:	e7ee      	b.n	80044d4 <_printf_float+0x2b8>
 80044f6:	bf00      	nop
 80044f8:	7fefffff 	.word	0x7fefffff
 80044fc:	08006f34 	.word	0x08006f34
 8004500:	08006f38 	.word	0x08006f38
 8004504:	08006f40 	.word	0x08006f40
 8004508:	08006f3c 	.word	0x08006f3c
 800450c:	08006f44 	.word	0x08006f44
 8004510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004514:	429a      	cmp	r2, r3
 8004516:	bfa8      	it	ge
 8004518:	461a      	movge	r2, r3
 800451a:	2a00      	cmp	r2, #0
 800451c:	4691      	mov	r9, r2
 800451e:	dc37      	bgt.n	8004590 <_printf_float+0x374>
 8004520:	f04f 0b00 	mov.w	fp, #0
 8004524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004528:	f104 021a 	add.w	r2, r4, #26
 800452c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800452e:	9305      	str	r3, [sp, #20]
 8004530:	eba3 0309 	sub.w	r3, r3, r9
 8004534:	455b      	cmp	r3, fp
 8004536:	dc33      	bgt.n	80045a0 <_printf_float+0x384>
 8004538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800453c:	429a      	cmp	r2, r3
 800453e:	db3b      	blt.n	80045b8 <_printf_float+0x39c>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	07da      	lsls	r2, r3, #31
 8004544:	d438      	bmi.n	80045b8 <_printf_float+0x39c>
 8004546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004548:	9a05      	ldr	r2, [sp, #20]
 800454a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800454c:	1a9a      	subs	r2, r3, r2
 800454e:	eba3 0901 	sub.w	r9, r3, r1
 8004552:	4591      	cmp	r9, r2
 8004554:	bfa8      	it	ge
 8004556:	4691      	movge	r9, r2
 8004558:	f1b9 0f00 	cmp.w	r9, #0
 800455c:	dc35      	bgt.n	80045ca <_printf_float+0x3ae>
 800455e:	f04f 0800 	mov.w	r8, #0
 8004562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004566:	f104 0a1a 	add.w	sl, r4, #26
 800456a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	eba3 0309 	sub.w	r3, r3, r9
 8004574:	4543      	cmp	r3, r8
 8004576:	f77f af79 	ble.w	800446c <_printf_float+0x250>
 800457a:	2301      	movs	r3, #1
 800457c:	4652      	mov	r2, sl
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	47b8      	blx	r7
 8004584:	3001      	adds	r0, #1
 8004586:	f43f aeaa 	beq.w	80042de <_printf_float+0xc2>
 800458a:	f108 0801 	add.w	r8, r8, #1
 800458e:	e7ec      	b.n	800456a <_printf_float+0x34e>
 8004590:	4613      	mov	r3, r2
 8004592:	4631      	mov	r1, r6
 8004594:	4642      	mov	r2, r8
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	d1c0      	bne.n	8004520 <_printf_float+0x304>
 800459e:	e69e      	b.n	80042de <_printf_float+0xc2>
 80045a0:	2301      	movs	r3, #1
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	9205      	str	r2, [sp, #20]
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f ae97 	beq.w	80042de <_printf_float+0xc2>
 80045b0:	9a05      	ldr	r2, [sp, #20]
 80045b2:	f10b 0b01 	add.w	fp, fp, #1
 80045b6:	e7b9      	b.n	800452c <_printf_float+0x310>
 80045b8:	ee18 3a10 	vmov	r3, s16
 80045bc:	4652      	mov	r2, sl
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d1be      	bne.n	8004546 <_printf_float+0x32a>
 80045c8:	e689      	b.n	80042de <_printf_float+0xc2>
 80045ca:	9a05      	ldr	r2, [sp, #20]
 80045cc:	464b      	mov	r3, r9
 80045ce:	4442      	add	r2, r8
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	d1c1      	bne.n	800455e <_printf_float+0x342>
 80045da:	e680      	b.n	80042de <_printf_float+0xc2>
 80045dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045de:	2a01      	cmp	r2, #1
 80045e0:	dc01      	bgt.n	80045e6 <_printf_float+0x3ca>
 80045e2:	07db      	lsls	r3, r3, #31
 80045e4:	d538      	bpl.n	8004658 <_printf_float+0x43c>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4642      	mov	r2, r8
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	f43f ae74 	beq.w	80042de <_printf_float+0xc2>
 80045f6:	ee18 3a10 	vmov	r3, s16
 80045fa:	4652      	mov	r2, sl
 80045fc:	4631      	mov	r1, r6
 80045fe:	4628      	mov	r0, r5
 8004600:	47b8      	blx	r7
 8004602:	3001      	adds	r0, #1
 8004604:	f43f ae6b 	beq.w	80042de <_printf_float+0xc2>
 8004608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800460c:	2200      	movs	r2, #0
 800460e:	2300      	movs	r3, #0
 8004610:	f7fc fa6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004614:	b9d8      	cbnz	r0, 800464e <_printf_float+0x432>
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	f108 0201 	add.w	r2, r8, #1
 800461c:	3b01      	subs	r3, #1
 800461e:	4631      	mov	r1, r6
 8004620:	4628      	mov	r0, r5
 8004622:	47b8      	blx	r7
 8004624:	3001      	adds	r0, #1
 8004626:	d10e      	bne.n	8004646 <_printf_float+0x42a>
 8004628:	e659      	b.n	80042de <_printf_float+0xc2>
 800462a:	2301      	movs	r3, #1
 800462c:	4652      	mov	r2, sl
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f ae52 	beq.w	80042de <_printf_float+0xc2>
 800463a:	f108 0801 	add.w	r8, r8, #1
 800463e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	4543      	cmp	r3, r8
 8004644:	dcf1      	bgt.n	800462a <_printf_float+0x40e>
 8004646:	464b      	mov	r3, r9
 8004648:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800464c:	e6dc      	b.n	8004408 <_printf_float+0x1ec>
 800464e:	f04f 0800 	mov.w	r8, #0
 8004652:	f104 0a1a 	add.w	sl, r4, #26
 8004656:	e7f2      	b.n	800463e <_printf_float+0x422>
 8004658:	2301      	movs	r3, #1
 800465a:	4642      	mov	r2, r8
 800465c:	e7df      	b.n	800461e <_printf_float+0x402>
 800465e:	2301      	movs	r3, #1
 8004660:	464a      	mov	r2, r9
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	f43f ae38 	beq.w	80042de <_printf_float+0xc2>
 800466e:	f108 0801 	add.w	r8, r8, #1
 8004672:	68e3      	ldr	r3, [r4, #12]
 8004674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	4543      	cmp	r3, r8
 800467a:	dcf0      	bgt.n	800465e <_printf_float+0x442>
 800467c:	e6fa      	b.n	8004474 <_printf_float+0x258>
 800467e:	f04f 0800 	mov.w	r8, #0
 8004682:	f104 0919 	add.w	r9, r4, #25
 8004686:	e7f4      	b.n	8004672 <_printf_float+0x456>

08004688 <_printf_common>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	4616      	mov	r6, r2
 800468e:	4699      	mov	r9, r3
 8004690:	688a      	ldr	r2, [r1, #8]
 8004692:	690b      	ldr	r3, [r1, #16]
 8004694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004698:	4293      	cmp	r3, r2
 800469a:	bfb8      	it	lt
 800469c:	4613      	movlt	r3, r2
 800469e:	6033      	str	r3, [r6, #0]
 80046a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046a4:	4607      	mov	r7, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	b10a      	cbz	r2, 80046ae <_printf_common+0x26>
 80046aa:	3301      	adds	r3, #1
 80046ac:	6033      	str	r3, [r6, #0]
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	0699      	lsls	r1, r3, #26
 80046b2:	bf42      	ittt	mi
 80046b4:	6833      	ldrmi	r3, [r6, #0]
 80046b6:	3302      	addmi	r3, #2
 80046b8:	6033      	strmi	r3, [r6, #0]
 80046ba:	6825      	ldr	r5, [r4, #0]
 80046bc:	f015 0506 	ands.w	r5, r5, #6
 80046c0:	d106      	bne.n	80046d0 <_printf_common+0x48>
 80046c2:	f104 0a19 	add.w	sl, r4, #25
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	6832      	ldr	r2, [r6, #0]
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	42ab      	cmp	r3, r5
 80046ce:	dc26      	bgt.n	800471e <_printf_common+0x96>
 80046d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046d4:	1e13      	subs	r3, r2, #0
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	bf18      	it	ne
 80046da:	2301      	movne	r3, #1
 80046dc:	0692      	lsls	r2, r2, #26
 80046de:	d42b      	bmi.n	8004738 <_printf_common+0xb0>
 80046e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e4:	4649      	mov	r1, r9
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c0      	blx	r8
 80046ea:	3001      	adds	r0, #1
 80046ec:	d01e      	beq.n	800472c <_printf_common+0xa4>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	68e5      	ldr	r5, [r4, #12]
 80046f2:	6832      	ldr	r2, [r6, #0]
 80046f4:	f003 0306 	and.w	r3, r3, #6
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	bf08      	it	eq
 80046fc:	1aad      	subeq	r5, r5, r2
 80046fe:	68a3      	ldr	r3, [r4, #8]
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	bf0c      	ite	eq
 8004704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004708:	2500      	movne	r5, #0
 800470a:	4293      	cmp	r3, r2
 800470c:	bfc4      	itt	gt
 800470e:	1a9b      	subgt	r3, r3, r2
 8004710:	18ed      	addgt	r5, r5, r3
 8004712:	2600      	movs	r6, #0
 8004714:	341a      	adds	r4, #26
 8004716:	42b5      	cmp	r5, r6
 8004718:	d11a      	bne.n	8004750 <_printf_common+0xc8>
 800471a:	2000      	movs	r0, #0
 800471c:	e008      	b.n	8004730 <_printf_common+0xa8>
 800471e:	2301      	movs	r3, #1
 8004720:	4652      	mov	r2, sl
 8004722:	4649      	mov	r1, r9
 8004724:	4638      	mov	r0, r7
 8004726:	47c0      	blx	r8
 8004728:	3001      	adds	r0, #1
 800472a:	d103      	bne.n	8004734 <_printf_common+0xac>
 800472c:	f04f 30ff 	mov.w	r0, #4294967295
 8004730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004734:	3501      	adds	r5, #1
 8004736:	e7c6      	b.n	80046c6 <_printf_common+0x3e>
 8004738:	18e1      	adds	r1, r4, r3
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	2030      	movs	r0, #48	; 0x30
 800473e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004742:	4422      	add	r2, r4
 8004744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800474c:	3302      	adds	r3, #2
 800474e:	e7c7      	b.n	80046e0 <_printf_common+0x58>
 8004750:	2301      	movs	r3, #1
 8004752:	4622      	mov	r2, r4
 8004754:	4649      	mov	r1, r9
 8004756:	4638      	mov	r0, r7
 8004758:	47c0      	blx	r8
 800475a:	3001      	adds	r0, #1
 800475c:	d0e6      	beq.n	800472c <_printf_common+0xa4>
 800475e:	3601      	adds	r6, #1
 8004760:	e7d9      	b.n	8004716 <_printf_common+0x8e>
	...

08004764 <_printf_i>:
 8004764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	7e0f      	ldrb	r7, [r1, #24]
 800476a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800476c:	2f78      	cmp	r7, #120	; 0x78
 800476e:	4691      	mov	r9, r2
 8004770:	4680      	mov	r8, r0
 8004772:	460c      	mov	r4, r1
 8004774:	469a      	mov	sl, r3
 8004776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800477a:	d807      	bhi.n	800478c <_printf_i+0x28>
 800477c:	2f62      	cmp	r7, #98	; 0x62
 800477e:	d80a      	bhi.n	8004796 <_printf_i+0x32>
 8004780:	2f00      	cmp	r7, #0
 8004782:	f000 80d8 	beq.w	8004936 <_printf_i+0x1d2>
 8004786:	2f58      	cmp	r7, #88	; 0x58
 8004788:	f000 80a3 	beq.w	80048d2 <_printf_i+0x16e>
 800478c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004794:	e03a      	b.n	800480c <_printf_i+0xa8>
 8004796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800479a:	2b15      	cmp	r3, #21
 800479c:	d8f6      	bhi.n	800478c <_printf_i+0x28>
 800479e:	a101      	add	r1, pc, #4	; (adr r1, 80047a4 <_printf_i+0x40>)
 80047a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	08004811 	.word	0x08004811
 80047ac:	0800478d 	.word	0x0800478d
 80047b0:	0800478d 	.word	0x0800478d
 80047b4:	0800478d 	.word	0x0800478d
 80047b8:	0800478d 	.word	0x0800478d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800478d 	.word	0x0800478d
 80047c4:	0800478d 	.word	0x0800478d
 80047c8:	0800478d 	.word	0x0800478d
 80047cc:	0800478d 	.word	0x0800478d
 80047d0:	0800491d 	.word	0x0800491d
 80047d4:	08004841 	.word	0x08004841
 80047d8:	080048ff 	.word	0x080048ff
 80047dc:	0800478d 	.word	0x0800478d
 80047e0:	0800478d 	.word	0x0800478d
 80047e4:	0800493f 	.word	0x0800493f
 80047e8:	0800478d 	.word	0x0800478d
 80047ec:	08004841 	.word	0x08004841
 80047f0:	0800478d 	.word	0x0800478d
 80047f4:	0800478d 	.word	0x0800478d
 80047f8:	08004907 	.word	0x08004907
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800480c:	2301      	movs	r3, #1
 800480e:	e0a3      	b.n	8004958 <_printf_i+0x1f4>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	6829      	ldr	r1, [r5, #0]
 8004814:	0606      	lsls	r6, r0, #24
 8004816:	f101 0304 	add.w	r3, r1, #4
 800481a:	d50a      	bpl.n	8004832 <_printf_i+0xce>
 800481c:	680e      	ldr	r6, [r1, #0]
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	2e00      	cmp	r6, #0
 8004822:	da03      	bge.n	800482c <_printf_i+0xc8>
 8004824:	232d      	movs	r3, #45	; 0x2d
 8004826:	4276      	negs	r6, r6
 8004828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800482c:	485e      	ldr	r0, [pc, #376]	; (80049a8 <_printf_i+0x244>)
 800482e:	230a      	movs	r3, #10
 8004830:	e019      	b.n	8004866 <_printf_i+0x102>
 8004832:	680e      	ldr	r6, [r1, #0]
 8004834:	602b      	str	r3, [r5, #0]
 8004836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800483a:	bf18      	it	ne
 800483c:	b236      	sxthne	r6, r6
 800483e:	e7ef      	b.n	8004820 <_printf_i+0xbc>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1d19      	adds	r1, r3, #4
 8004846:	6029      	str	r1, [r5, #0]
 8004848:	0601      	lsls	r1, r0, #24
 800484a:	d501      	bpl.n	8004850 <_printf_i+0xec>
 800484c:	681e      	ldr	r6, [r3, #0]
 800484e:	e002      	b.n	8004856 <_printf_i+0xf2>
 8004850:	0646      	lsls	r6, r0, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0xe8>
 8004854:	881e      	ldrh	r6, [r3, #0]
 8004856:	4854      	ldr	r0, [pc, #336]	; (80049a8 <_printf_i+0x244>)
 8004858:	2f6f      	cmp	r7, #111	; 0x6f
 800485a:	bf0c      	ite	eq
 800485c:	2308      	moveq	r3, #8
 800485e:	230a      	movne	r3, #10
 8004860:	2100      	movs	r1, #0
 8004862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004866:	6865      	ldr	r5, [r4, #4]
 8004868:	60a5      	str	r5, [r4, #8]
 800486a:	2d00      	cmp	r5, #0
 800486c:	bfa2      	ittt	ge
 800486e:	6821      	ldrge	r1, [r4, #0]
 8004870:	f021 0104 	bicge.w	r1, r1, #4
 8004874:	6021      	strge	r1, [r4, #0]
 8004876:	b90e      	cbnz	r6, 800487c <_printf_i+0x118>
 8004878:	2d00      	cmp	r5, #0
 800487a:	d04d      	beq.n	8004918 <_printf_i+0x1b4>
 800487c:	4615      	mov	r5, r2
 800487e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004882:	fb03 6711 	mls	r7, r3, r1, r6
 8004886:	5dc7      	ldrb	r7, [r0, r7]
 8004888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800488c:	4637      	mov	r7, r6
 800488e:	42bb      	cmp	r3, r7
 8004890:	460e      	mov	r6, r1
 8004892:	d9f4      	bls.n	800487e <_printf_i+0x11a>
 8004894:	2b08      	cmp	r3, #8
 8004896:	d10b      	bne.n	80048b0 <_printf_i+0x14c>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	07de      	lsls	r6, r3, #31
 800489c:	d508      	bpl.n	80048b0 <_printf_i+0x14c>
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	6861      	ldr	r1, [r4, #4]
 80048a2:	4299      	cmp	r1, r3
 80048a4:	bfde      	ittt	le
 80048a6:	2330      	movle	r3, #48	; 0x30
 80048a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048b0:	1b52      	subs	r2, r2, r5
 80048b2:	6122      	str	r2, [r4, #16]
 80048b4:	f8cd a000 	str.w	sl, [sp]
 80048b8:	464b      	mov	r3, r9
 80048ba:	aa03      	add	r2, sp, #12
 80048bc:	4621      	mov	r1, r4
 80048be:	4640      	mov	r0, r8
 80048c0:	f7ff fee2 	bl	8004688 <_printf_common>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d14c      	bne.n	8004962 <_printf_i+0x1fe>
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	b004      	add	sp, #16
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	4835      	ldr	r0, [pc, #212]	; (80049a8 <_printf_i+0x244>)
 80048d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048d8:	6829      	ldr	r1, [r5, #0]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80048e0:	6029      	str	r1, [r5, #0]
 80048e2:	061d      	lsls	r5, r3, #24
 80048e4:	d514      	bpl.n	8004910 <_printf_i+0x1ac>
 80048e6:	07df      	lsls	r7, r3, #31
 80048e8:	bf44      	itt	mi
 80048ea:	f043 0320 	orrmi.w	r3, r3, #32
 80048ee:	6023      	strmi	r3, [r4, #0]
 80048f0:	b91e      	cbnz	r6, 80048fa <_printf_i+0x196>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	f023 0320 	bic.w	r3, r3, #32
 80048f8:	6023      	str	r3, [r4, #0]
 80048fa:	2310      	movs	r3, #16
 80048fc:	e7b0      	b.n	8004860 <_printf_i+0xfc>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	2378      	movs	r3, #120	; 0x78
 8004908:	4828      	ldr	r0, [pc, #160]	; (80049ac <_printf_i+0x248>)
 800490a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800490e:	e7e3      	b.n	80048d8 <_printf_i+0x174>
 8004910:	0659      	lsls	r1, r3, #25
 8004912:	bf48      	it	mi
 8004914:	b2b6      	uxthmi	r6, r6
 8004916:	e7e6      	b.n	80048e6 <_printf_i+0x182>
 8004918:	4615      	mov	r5, r2
 800491a:	e7bb      	b.n	8004894 <_printf_i+0x130>
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	6826      	ldr	r6, [r4, #0]
 8004920:	6961      	ldr	r1, [r4, #20]
 8004922:	1d18      	adds	r0, r3, #4
 8004924:	6028      	str	r0, [r5, #0]
 8004926:	0635      	lsls	r5, r6, #24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	d501      	bpl.n	8004930 <_printf_i+0x1cc>
 800492c:	6019      	str	r1, [r3, #0]
 800492e:	e002      	b.n	8004936 <_printf_i+0x1d2>
 8004930:	0670      	lsls	r0, r6, #25
 8004932:	d5fb      	bpl.n	800492c <_printf_i+0x1c8>
 8004934:	8019      	strh	r1, [r3, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	4615      	mov	r5, r2
 800493c:	e7ba      	b.n	80048b4 <_printf_i+0x150>
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	602a      	str	r2, [r5, #0]
 8004944:	681d      	ldr	r5, [r3, #0]
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	2100      	movs	r1, #0
 800494a:	4628      	mov	r0, r5
 800494c:	f7fb fc58 	bl	8000200 <memchr>
 8004950:	b108      	cbz	r0, 8004956 <_printf_i+0x1f2>
 8004952:	1b40      	subs	r0, r0, r5
 8004954:	6060      	str	r0, [r4, #4]
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	2300      	movs	r3, #0
 800495c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004960:	e7a8      	b.n	80048b4 <_printf_i+0x150>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	462a      	mov	r2, r5
 8004966:	4649      	mov	r1, r9
 8004968:	4640      	mov	r0, r8
 800496a:	47d0      	blx	sl
 800496c:	3001      	adds	r0, #1
 800496e:	d0ab      	beq.n	80048c8 <_printf_i+0x164>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	079b      	lsls	r3, r3, #30
 8004974:	d413      	bmi.n	800499e <_printf_i+0x23a>
 8004976:	68e0      	ldr	r0, [r4, #12]
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	4298      	cmp	r0, r3
 800497c:	bfb8      	it	lt
 800497e:	4618      	movlt	r0, r3
 8004980:	e7a4      	b.n	80048cc <_printf_i+0x168>
 8004982:	2301      	movs	r3, #1
 8004984:	4632      	mov	r2, r6
 8004986:	4649      	mov	r1, r9
 8004988:	4640      	mov	r0, r8
 800498a:	47d0      	blx	sl
 800498c:	3001      	adds	r0, #1
 800498e:	d09b      	beq.n	80048c8 <_printf_i+0x164>
 8004990:	3501      	adds	r5, #1
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	9903      	ldr	r1, [sp, #12]
 8004996:	1a5b      	subs	r3, r3, r1
 8004998:	42ab      	cmp	r3, r5
 800499a:	dcf2      	bgt.n	8004982 <_printf_i+0x21e>
 800499c:	e7eb      	b.n	8004976 <_printf_i+0x212>
 800499e:	2500      	movs	r5, #0
 80049a0:	f104 0619 	add.w	r6, r4, #25
 80049a4:	e7f5      	b.n	8004992 <_printf_i+0x22e>
 80049a6:	bf00      	nop
 80049a8:	08006f46 	.word	0x08006f46
 80049ac:	08006f57 	.word	0x08006f57

080049b0 <iprintf>:
 80049b0:	b40f      	push	{r0, r1, r2, r3}
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <iprintf+0x2c>)
 80049b4:	b513      	push	{r0, r1, r4, lr}
 80049b6:	681c      	ldr	r4, [r3, #0]
 80049b8:	b124      	cbz	r4, 80049c4 <iprintf+0x14>
 80049ba:	69a3      	ldr	r3, [r4, #24]
 80049bc:	b913      	cbnz	r3, 80049c4 <iprintf+0x14>
 80049be:	4620      	mov	r0, r4
 80049c0:	f000 ff00 	bl	80057c4 <__sinit>
 80049c4:	ab05      	add	r3, sp, #20
 80049c6:	9a04      	ldr	r2, [sp, #16]
 80049c8:	68a1      	ldr	r1, [r4, #8]
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	4620      	mov	r0, r4
 80049ce:	f001 fdb5 	bl	800653c <_vfiprintf_r>
 80049d2:	b002      	add	sp, #8
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	b004      	add	sp, #16
 80049da:	4770      	bx	lr
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <siprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b500      	push	{lr}
 80049e4:	b09c      	sub	sp, #112	; 0x70
 80049e6:	ab1d      	add	r3, sp, #116	; 0x74
 80049e8:	9002      	str	r0, [sp, #8]
 80049ea:	9006      	str	r0, [sp, #24]
 80049ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049f0:	4809      	ldr	r0, [pc, #36]	; (8004a18 <siprintf+0x38>)
 80049f2:	9107      	str	r1, [sp, #28]
 80049f4:	9104      	str	r1, [sp, #16]
 80049f6:	4909      	ldr	r1, [pc, #36]	; (8004a1c <siprintf+0x3c>)
 80049f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049fc:	9105      	str	r1, [sp, #20]
 80049fe:	6800      	ldr	r0, [r0, #0]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	a902      	add	r1, sp, #8
 8004a04:	f001 fc70 	bl	80062e8 <_svfiprintf_r>
 8004a08:	9b02      	ldr	r3, [sp, #8]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	b01c      	add	sp, #112	; 0x70
 8004a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a14:	b003      	add	sp, #12
 8004a16:	4770      	bx	lr
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	ffff0208 	.word	0xffff0208

08004a20 <quorem>:
 8004a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	6903      	ldr	r3, [r0, #16]
 8004a26:	690c      	ldr	r4, [r1, #16]
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	f2c0 8081 	blt.w	8004b32 <quorem+0x112>
 8004a30:	3c01      	subs	r4, #1
 8004a32:	f101 0814 	add.w	r8, r1, #20
 8004a36:	f100 0514 	add.w	r5, r0, #20
 8004a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a58:	d331      	bcc.n	8004abe <quorem+0x9e>
 8004a5a:	f04f 0e00 	mov.w	lr, #0
 8004a5e:	4640      	mov	r0, r8
 8004a60:	46ac      	mov	ip, r5
 8004a62:	46f2      	mov	sl, lr
 8004a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a68:	b293      	uxth	r3, r2
 8004a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8004a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	ebaa 0303 	sub.w	r3, sl, r3
 8004a78:	f8dc a000 	ldr.w	sl, [ip]
 8004a7c:	0c12      	lsrs	r2, r2, #16
 8004a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8004a82:	fb06 e202 	mla	r2, r6, r2, lr
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	9b00      	ldr	r3, [sp, #0]
 8004a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a8e:	b292      	uxth	r2, r2
 8004a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a9c:	4581      	cmp	r9, r0
 8004a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8004aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004aaa:	d2db      	bcs.n	8004a64 <quorem+0x44>
 8004aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ab0:	b92b      	cbnz	r3, 8004abe <quorem+0x9e>
 8004ab2:	9b01      	ldr	r3, [sp, #4]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	429d      	cmp	r5, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	d32e      	bcc.n	8004b1a <quorem+0xfa>
 8004abc:	613c      	str	r4, [r7, #16]
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f001 f9be 	bl	8005e40 <__mcmp>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	db24      	blt.n	8004b12 <quorem+0xf2>
 8004ac8:	3601      	adds	r6, #1
 8004aca:	4628      	mov	r0, r5
 8004acc:	f04f 0c00 	mov.w	ip, #0
 8004ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8004ad8:	b293      	uxth	r3, r2
 8004ada:	ebac 0303 	sub.w	r3, ip, r3
 8004ade:	0c12      	lsrs	r2, r2, #16
 8004ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8004ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af2:	45c1      	cmp	r9, r8
 8004af4:	f840 3b04 	str.w	r3, [r0], #4
 8004af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004afc:	d2e8      	bcs.n	8004ad0 <quorem+0xb0>
 8004afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b06:	b922      	cbnz	r2, 8004b12 <quorem+0xf2>
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	d30a      	bcc.n	8004b26 <quorem+0x106>
 8004b10:	613c      	str	r4, [r7, #16]
 8004b12:	4630      	mov	r0, r6
 8004b14:	b003      	add	sp, #12
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	3b04      	subs	r3, #4
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	d1cc      	bne.n	8004abc <quorem+0x9c>
 8004b22:	3c01      	subs	r4, #1
 8004b24:	e7c7      	b.n	8004ab6 <quorem+0x96>
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	3b04      	subs	r3, #4
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	d1f0      	bne.n	8004b10 <quorem+0xf0>
 8004b2e:	3c01      	subs	r4, #1
 8004b30:	e7eb      	b.n	8004b0a <quorem+0xea>
 8004b32:	2000      	movs	r0, #0
 8004b34:	e7ee      	b.n	8004b14 <quorem+0xf4>
	...

08004b38 <_dtoa_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	ed2d 8b04 	vpush	{d8-d9}
 8004b40:	ec57 6b10 	vmov	r6, r7, d0
 8004b44:	b093      	sub	sp, #76	; 0x4c
 8004b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b4c:	9106      	str	r1, [sp, #24]
 8004b4e:	ee10 aa10 	vmov	sl, s0
 8004b52:	4604      	mov	r4, r0
 8004b54:	9209      	str	r2, [sp, #36]	; 0x24
 8004b56:	930c      	str	r3, [sp, #48]	; 0x30
 8004b58:	46bb      	mov	fp, r7
 8004b5a:	b975      	cbnz	r5, 8004b7a <_dtoa_r+0x42>
 8004b5c:	2010      	movs	r0, #16
 8004b5e:	f000 fed7 	bl	8005910 <malloc>
 8004b62:	4602      	mov	r2, r0
 8004b64:	6260      	str	r0, [r4, #36]	; 0x24
 8004b66:	b920      	cbnz	r0, 8004b72 <_dtoa_r+0x3a>
 8004b68:	4ba7      	ldr	r3, [pc, #668]	; (8004e08 <_dtoa_r+0x2d0>)
 8004b6a:	21ea      	movs	r1, #234	; 0xea
 8004b6c:	48a7      	ldr	r0, [pc, #668]	; (8004e0c <_dtoa_r+0x2d4>)
 8004b6e:	f001 ff3b 	bl	80069e8 <__assert_func>
 8004b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b76:	6005      	str	r5, [r0, #0]
 8004b78:	60c5      	str	r5, [r0, #12]
 8004b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	b151      	cbz	r1, 8004b96 <_dtoa_r+0x5e>
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	604a      	str	r2, [r1, #4]
 8004b84:	2301      	movs	r3, #1
 8004b86:	4093      	lsls	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 ff16 	bl	80059bc <_Bfree>
 8004b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	1e3b      	subs	r3, r7, #0
 8004b98:	bfaa      	itet	ge
 8004b9a:	2300      	movge	r3, #0
 8004b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ba0:	f8c8 3000 	strge.w	r3, [r8]
 8004ba4:	4b9a      	ldr	r3, [pc, #616]	; (8004e10 <_dtoa_r+0x2d8>)
 8004ba6:	bfbc      	itt	lt
 8004ba8:	2201      	movlt	r2, #1
 8004baa:	f8c8 2000 	strlt.w	r2, [r8]
 8004bae:	ea33 030b 	bics.w	r3, r3, fp
 8004bb2:	d11b      	bne.n	8004bec <_dtoa_r+0xb4>
 8004bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bc0:	4333      	orrs	r3, r6
 8004bc2:	f000 8592 	beq.w	80056ea <_dtoa_r+0xbb2>
 8004bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bc8:	b963      	cbnz	r3, 8004be4 <_dtoa_r+0xac>
 8004bca:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <_dtoa_r+0x2dc>)
 8004bcc:	e022      	b.n	8004c14 <_dtoa_r+0xdc>
 8004bce:	4b92      	ldr	r3, [pc, #584]	; (8004e18 <_dtoa_r+0x2e0>)
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	9801      	ldr	r0, [sp, #4]
 8004bda:	b013      	add	sp, #76	; 0x4c
 8004bdc:	ecbd 8b04 	vpop	{d8-d9}
 8004be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	4b8b      	ldr	r3, [pc, #556]	; (8004e14 <_dtoa_r+0x2dc>)
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	3303      	adds	r3, #3
 8004bea:	e7f3      	b.n	8004bd4 <_dtoa_r+0x9c>
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	4659      	mov	r1, fp
 8004bf4:	f7fb ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bf8:	ec4b ab19 	vmov	d9, sl, fp
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	b158      	cbz	r0, 8004c18 <_dtoa_r+0xe0>
 8004c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c02:	2301      	movs	r3, #1
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 856b 	beq.w	80056e4 <_dtoa_r+0xbac>
 8004c0e:	4883      	ldr	r0, [pc, #524]	; (8004e1c <_dtoa_r+0x2e4>)
 8004c10:	6018      	str	r0, [r3, #0]
 8004c12:	1e43      	subs	r3, r0, #1
 8004c14:	9301      	str	r3, [sp, #4]
 8004c16:	e7df      	b.n	8004bd8 <_dtoa_r+0xa0>
 8004c18:	ec4b ab10 	vmov	d0, sl, fp
 8004c1c:	aa10      	add	r2, sp, #64	; 0x40
 8004c1e:	a911      	add	r1, sp, #68	; 0x44
 8004c20:	4620      	mov	r0, r4
 8004c22:	f001 f9b3 	bl	8005f8c <__d2b>
 8004c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004c2a:	ee08 0a10 	vmov	s16, r0
 8004c2e:	2d00      	cmp	r5, #0
 8004c30:	f000 8084 	beq.w	8004d3c <_dtoa_r+0x204>
 8004c34:	ee19 3a90 	vmov	r3, s19
 8004c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c40:	4656      	mov	r6, sl
 8004c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004c4e:	4b74      	ldr	r3, [pc, #464]	; (8004e20 <_dtoa_r+0x2e8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	4630      	mov	r0, r6
 8004c54:	4639      	mov	r1, r7
 8004c56:	f7fb fb27 	bl	80002a8 <__aeabi_dsub>
 8004c5a:	a365      	add	r3, pc, #404	; (adr r3, 8004df0 <_dtoa_r+0x2b8>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb fcda 	bl	8000618 <__aeabi_dmul>
 8004c64:	a364      	add	r3, pc, #400	; (adr r3, 8004df8 <_dtoa_r+0x2c0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fb1f 	bl	80002ac <__adddf3>
 8004c6e:	4606      	mov	r6, r0
 8004c70:	4628      	mov	r0, r5
 8004c72:	460f      	mov	r7, r1
 8004c74:	f7fb fc66 	bl	8000544 <__aeabi_i2d>
 8004c78:	a361      	add	r3, pc, #388	; (adr r3, 8004e00 <_dtoa_r+0x2c8>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fccb 	bl	8000618 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb fb0f 	bl	80002ac <__adddf3>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460f      	mov	r7, r1
 8004c92:	f7fb ff71 	bl	8000b78 <__aeabi_d2iz>
 8004c96:	2200      	movs	r2, #0
 8004c98:	9000      	str	r0, [sp, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f7fb ff2c 	bl	8000afc <__aeabi_dcmplt>
 8004ca4:	b150      	cbz	r0, 8004cbc <_dtoa_r+0x184>
 8004ca6:	9800      	ldr	r0, [sp, #0]
 8004ca8:	f7fb fc4c 	bl	8000544 <__aeabi_i2d>
 8004cac:	4632      	mov	r2, r6
 8004cae:	463b      	mov	r3, r7
 8004cb0:	f7fb ff1a 	bl	8000ae8 <__aeabi_dcmpeq>
 8004cb4:	b910      	cbnz	r0, 8004cbc <_dtoa_r+0x184>
 8004cb6:	9b00      	ldr	r3, [sp, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	2b16      	cmp	r3, #22
 8004cc0:	d85a      	bhi.n	8004d78 <_dtoa_r+0x240>
 8004cc2:	9a00      	ldr	r2, [sp, #0]
 8004cc4:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <_dtoa_r+0x2ec>)
 8004cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	ec51 0b19 	vmov	r0, r1, d9
 8004cd2:	f7fb ff13 	bl	8000afc <__aeabi_dcmplt>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d050      	beq.n	8004d7c <_dtoa_r+0x244>
 8004cda:	9b00      	ldr	r3, [sp, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ce6:	1b5d      	subs	r5, r3, r5
 8004ce8:	1e6b      	subs	r3, r5, #1
 8004cea:	9305      	str	r3, [sp, #20]
 8004cec:	bf45      	ittet	mi
 8004cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cf2:	9304      	strmi	r3, [sp, #16]
 8004cf4:	2300      	movpl	r3, #0
 8004cf6:	2300      	movmi	r3, #0
 8004cf8:	bf4c      	ite	mi
 8004cfa:	9305      	strmi	r3, [sp, #20]
 8004cfc:	9304      	strpl	r3, [sp, #16]
 8004cfe:	9b00      	ldr	r3, [sp, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db3d      	blt.n	8004d80 <_dtoa_r+0x248>
 8004d04:	9b05      	ldr	r3, [sp, #20]
 8004d06:	9a00      	ldr	r2, [sp, #0]
 8004d08:	920a      	str	r2, [sp, #40]	; 0x28
 8004d0a:	4413      	add	r3, r2
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9307      	str	r3, [sp, #28]
 8004d12:	9b06      	ldr	r3, [sp, #24]
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	f200 8089 	bhi.w	8004e2c <_dtoa_r+0x2f4>
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	bfc4      	itt	gt
 8004d1e:	3b04      	subgt	r3, #4
 8004d20:	9306      	strgt	r3, [sp, #24]
 8004d22:	9b06      	ldr	r3, [sp, #24]
 8004d24:	f1a3 0302 	sub.w	r3, r3, #2
 8004d28:	bfcc      	ite	gt
 8004d2a:	2500      	movgt	r5, #0
 8004d2c:	2501      	movle	r5, #1
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	f200 8087 	bhi.w	8004e42 <_dtoa_r+0x30a>
 8004d34:	e8df f003 	tbb	[pc, r3]
 8004d38:	59383a2d 	.word	0x59383a2d
 8004d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d40:	441d      	add	r5, r3
 8004d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	bfc1      	itttt	gt
 8004d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8004d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d5a:	bfda      	itte	le
 8004d5c:	f1c3 0320 	rsble	r3, r3, #32
 8004d60:	fa06 f003 	lslle.w	r0, r6, r3
 8004d64:	4318      	orrgt	r0, r3
 8004d66:	f7fb fbdd 	bl	8000524 <__aeabi_ui2d>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d72:	3d01      	subs	r5, #1
 8004d74:	930e      	str	r3, [sp, #56]	; 0x38
 8004d76:	e76a      	b.n	8004c4e <_dtoa_r+0x116>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e7b2      	b.n	8004ce2 <_dtoa_r+0x1aa>
 8004d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004d7e:	e7b1      	b.n	8004ce4 <_dtoa_r+0x1ac>
 8004d80:	9b04      	ldr	r3, [sp, #16]
 8004d82:	9a00      	ldr	r2, [sp, #0]
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	9304      	str	r3, [sp, #16]
 8004d88:	4253      	negs	r3, r2
 8004d8a:	9307      	str	r3, [sp, #28]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d90:	e7bf      	b.n	8004d12 <_dtoa_r+0x1da>
 8004d92:	2300      	movs	r3, #0
 8004d94:	9308      	str	r3, [sp, #32]
 8004d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	dc55      	bgt.n	8004e48 <_dtoa_r+0x310>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004da2:	461a      	mov	r2, r3
 8004da4:	9209      	str	r2, [sp, #36]	; 0x24
 8004da6:	e00c      	b.n	8004dc2 <_dtoa_r+0x28a>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e7f3      	b.n	8004d94 <_dtoa_r+0x25c>
 8004dac:	2300      	movs	r3, #0
 8004dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db0:	9308      	str	r3, [sp, #32]
 8004db2:	9b00      	ldr	r3, [sp, #0]
 8004db4:	4413      	add	r3, r2
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	3301      	adds	r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	9303      	str	r3, [sp, #12]
 8004dbe:	bfb8      	it	lt
 8004dc0:	2301      	movlt	r3, #1
 8004dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	6042      	str	r2, [r0, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	f102 0614 	add.w	r6, r2, #20
 8004dce:	429e      	cmp	r6, r3
 8004dd0:	6841      	ldr	r1, [r0, #4]
 8004dd2:	d93d      	bls.n	8004e50 <_dtoa_r+0x318>
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 fdb1 	bl	800593c <_Balloc>
 8004dda:	9001      	str	r0, [sp, #4]
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d13b      	bne.n	8004e58 <_dtoa_r+0x320>
 8004de0:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <_dtoa_r+0x2f0>)
 8004de2:	4602      	mov	r2, r0
 8004de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004de8:	e6c0      	b.n	8004b6c <_dtoa_r+0x34>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e7df      	b.n	8004dae <_dtoa_r+0x276>
 8004dee:	bf00      	nop
 8004df0:	636f4361 	.word	0x636f4361
 8004df4:	3fd287a7 	.word	0x3fd287a7
 8004df8:	8b60c8b3 	.word	0x8b60c8b3
 8004dfc:	3fc68a28 	.word	0x3fc68a28
 8004e00:	509f79fb 	.word	0x509f79fb
 8004e04:	3fd34413 	.word	0x3fd34413
 8004e08:	08006f75 	.word	0x08006f75
 8004e0c:	08006f8c 	.word	0x08006f8c
 8004e10:	7ff00000 	.word	0x7ff00000
 8004e14:	08006f71 	.word	0x08006f71
 8004e18:	08006f68 	.word	0x08006f68
 8004e1c:	08006f45 	.word	0x08006f45
 8004e20:	3ff80000 	.word	0x3ff80000
 8004e24:	080070e0 	.word	0x080070e0
 8004e28:	08006fe7 	.word	0x08006fe7
 8004e2c:	2501      	movs	r5, #1
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9306      	str	r3, [sp, #24]
 8004e32:	9508      	str	r5, [sp, #32]
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2312      	movs	r3, #18
 8004e40:	e7b0      	b.n	8004da4 <_dtoa_r+0x26c>
 8004e42:	2301      	movs	r3, #1
 8004e44:	9308      	str	r3, [sp, #32]
 8004e46:	e7f5      	b.n	8004e34 <_dtoa_r+0x2fc>
 8004e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e4e:	e7b8      	b.n	8004dc2 <_dtoa_r+0x28a>
 8004e50:	3101      	adds	r1, #1
 8004e52:	6041      	str	r1, [r0, #4]
 8004e54:	0052      	lsls	r2, r2, #1
 8004e56:	e7b8      	b.n	8004dca <_dtoa_r+0x292>
 8004e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e5a:	9a01      	ldr	r2, [sp, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	2b0e      	cmp	r3, #14
 8004e62:	f200 809d 	bhi.w	8004fa0 <_dtoa_r+0x468>
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	f000 809a 	beq.w	8004fa0 <_dtoa_r+0x468>
 8004e6c:	9b00      	ldr	r3, [sp, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dd32      	ble.n	8004ed8 <_dtoa_r+0x3a0>
 8004e72:	4ab7      	ldr	r2, [pc, #732]	; (8005150 <_dtoa_r+0x618>)
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e80:	9b00      	ldr	r3, [sp, #0]
 8004e82:	05d8      	lsls	r0, r3, #23
 8004e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004e88:	d516      	bpl.n	8004eb8 <_dtoa_r+0x380>
 8004e8a:	4bb2      	ldr	r3, [pc, #712]	; (8005154 <_dtoa_r+0x61c>)
 8004e8c:	ec51 0b19 	vmov	r0, r1, d9
 8004e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e94:	f7fb fcea 	bl	800086c <__aeabi_ddiv>
 8004e98:	f007 070f 	and.w	r7, r7, #15
 8004e9c:	4682      	mov	sl, r0
 8004e9e:	468b      	mov	fp, r1
 8004ea0:	2503      	movs	r5, #3
 8004ea2:	4eac      	ldr	r6, [pc, #688]	; (8005154 <_dtoa_r+0x61c>)
 8004ea4:	b957      	cbnz	r7, 8004ebc <_dtoa_r+0x384>
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	4650      	mov	r0, sl
 8004eac:	4659      	mov	r1, fp
 8004eae:	f7fb fcdd 	bl	800086c <__aeabi_ddiv>
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	468b      	mov	fp, r1
 8004eb6:	e028      	b.n	8004f0a <_dtoa_r+0x3d2>
 8004eb8:	2502      	movs	r5, #2
 8004eba:	e7f2      	b.n	8004ea2 <_dtoa_r+0x36a>
 8004ebc:	07f9      	lsls	r1, r7, #31
 8004ebe:	d508      	bpl.n	8004ed2 <_dtoa_r+0x39a>
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ec8:	f7fb fba6 	bl	8000618 <__aeabi_dmul>
 8004ecc:	3501      	adds	r5, #1
 8004ece:	4680      	mov	r8, r0
 8004ed0:	4689      	mov	r9, r1
 8004ed2:	107f      	asrs	r7, r7, #1
 8004ed4:	3608      	adds	r6, #8
 8004ed6:	e7e5      	b.n	8004ea4 <_dtoa_r+0x36c>
 8004ed8:	f000 809b 	beq.w	8005012 <_dtoa_r+0x4da>
 8004edc:	9b00      	ldr	r3, [sp, #0]
 8004ede:	4f9d      	ldr	r7, [pc, #628]	; (8005154 <_dtoa_r+0x61c>)
 8004ee0:	425e      	negs	r6, r3
 8004ee2:	4b9b      	ldr	r3, [pc, #620]	; (8005150 <_dtoa_r+0x618>)
 8004ee4:	f006 020f 	and.w	r2, r6, #15
 8004ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	ec51 0b19 	vmov	r0, r1, d9
 8004ef4:	f7fb fb90 	bl	8000618 <__aeabi_dmul>
 8004ef8:	1136      	asrs	r6, r6, #4
 8004efa:	4682      	mov	sl, r0
 8004efc:	468b      	mov	fp, r1
 8004efe:	2300      	movs	r3, #0
 8004f00:	2502      	movs	r5, #2
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	d17a      	bne.n	8004ffc <_dtoa_r+0x4c4>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1d3      	bne.n	8004eb2 <_dtoa_r+0x37a>
 8004f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8082 	beq.w	8005016 <_dtoa_r+0x4de>
 8004f12:	4b91      	ldr	r3, [pc, #580]	; (8005158 <_dtoa_r+0x620>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	4650      	mov	r0, sl
 8004f18:	4659      	mov	r1, fp
 8004f1a:	f7fb fdef 	bl	8000afc <__aeabi_dcmplt>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d079      	beq.n	8005016 <_dtoa_r+0x4de>
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d076      	beq.n	8005016 <_dtoa_r+0x4de>
 8004f28:	9b02      	ldr	r3, [sp, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dd36      	ble.n	8004f9c <_dtoa_r+0x464>
 8004f2e:	9b00      	ldr	r3, [sp, #0]
 8004f30:	4650      	mov	r0, sl
 8004f32:	4659      	mov	r1, fp
 8004f34:	1e5f      	subs	r7, r3, #1
 8004f36:	2200      	movs	r2, #0
 8004f38:	4b88      	ldr	r3, [pc, #544]	; (800515c <_dtoa_r+0x624>)
 8004f3a:	f7fb fb6d 	bl	8000618 <__aeabi_dmul>
 8004f3e:	9e02      	ldr	r6, [sp, #8]
 8004f40:	4682      	mov	sl, r0
 8004f42:	468b      	mov	fp, r1
 8004f44:	3501      	adds	r5, #1
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7fb fafc 	bl	8000544 <__aeabi_i2d>
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	465b      	mov	r3, fp
 8004f50:	f7fb fb62 	bl	8000618 <__aeabi_dmul>
 8004f54:	4b82      	ldr	r3, [pc, #520]	; (8005160 <_dtoa_r+0x628>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	f7fb f9a8 	bl	80002ac <__adddf3>
 8004f5c:	46d0      	mov	r8, sl
 8004f5e:	46d9      	mov	r9, fp
 8004f60:	4682      	mov	sl, r0
 8004f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d158      	bne.n	800501c <_dtoa_r+0x4e4>
 8004f6a:	4b7e      	ldr	r3, [pc, #504]	; (8005164 <_dtoa_r+0x62c>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb f999 	bl	80002a8 <__aeabi_dsub>
 8004f76:	4652      	mov	r2, sl
 8004f78:	465b      	mov	r3, fp
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	4689      	mov	r9, r1
 8004f7e:	f7fb fddb 	bl	8000b38 <__aeabi_dcmpgt>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f040 8295 	bne.w	80054b2 <_dtoa_r+0x97a>
 8004f88:	4652      	mov	r2, sl
 8004f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004f8e:	4640      	mov	r0, r8
 8004f90:	4649      	mov	r1, r9
 8004f92:	f7fb fdb3 	bl	8000afc <__aeabi_dcmplt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f040 8289 	bne.w	80054ae <_dtoa_r+0x976>
 8004f9c:	ec5b ab19 	vmov	sl, fp, d9
 8004fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f2c0 8148 	blt.w	8005238 <_dtoa_r+0x700>
 8004fa8:	9a00      	ldr	r2, [sp, #0]
 8004faa:	2a0e      	cmp	r2, #14
 8004fac:	f300 8144 	bgt.w	8005238 <_dtoa_r+0x700>
 8004fb0:	4b67      	ldr	r3, [pc, #412]	; (8005150 <_dtoa_r+0x618>)
 8004fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f280 80d5 	bge.w	800516c <_dtoa_r+0x634>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f300 80d1 	bgt.w	800516c <_dtoa_r+0x634>
 8004fca:	f040 826f 	bne.w	80054ac <_dtoa_r+0x974>
 8004fce:	4b65      	ldr	r3, [pc, #404]	; (8005164 <_dtoa_r+0x62c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	f7fb fb1f 	bl	8000618 <__aeabi_dmul>
 8004fda:	4652      	mov	r2, sl
 8004fdc:	465b      	mov	r3, fp
 8004fde:	f7fb fda1 	bl	8000b24 <__aeabi_dcmpge>
 8004fe2:	9e03      	ldr	r6, [sp, #12]
 8004fe4:	4637      	mov	r7, r6
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	f040 8245 	bne.w	8005476 <_dtoa_r+0x93e>
 8004fec:	9d01      	ldr	r5, [sp, #4]
 8004fee:	2331      	movs	r3, #49	; 0x31
 8004ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8004ff4:	9b00      	ldr	r3, [sp, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	e240      	b.n	800547e <_dtoa_r+0x946>
 8004ffc:	07f2      	lsls	r2, r6, #31
 8004ffe:	d505      	bpl.n	800500c <_dtoa_r+0x4d4>
 8005000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005004:	f7fb fb08 	bl	8000618 <__aeabi_dmul>
 8005008:	3501      	adds	r5, #1
 800500a:	2301      	movs	r3, #1
 800500c:	1076      	asrs	r6, r6, #1
 800500e:	3708      	adds	r7, #8
 8005010:	e777      	b.n	8004f02 <_dtoa_r+0x3ca>
 8005012:	2502      	movs	r5, #2
 8005014:	e779      	b.n	8004f0a <_dtoa_r+0x3d2>
 8005016:	9f00      	ldr	r7, [sp, #0]
 8005018:	9e03      	ldr	r6, [sp, #12]
 800501a:	e794      	b.n	8004f46 <_dtoa_r+0x40e>
 800501c:	9901      	ldr	r1, [sp, #4]
 800501e:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <_dtoa_r+0x618>)
 8005020:	4431      	add	r1, r6
 8005022:	910d      	str	r1, [sp, #52]	; 0x34
 8005024:	9908      	ldr	r1, [sp, #32]
 8005026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800502a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800502e:	2900      	cmp	r1, #0
 8005030:	d043      	beq.n	80050ba <_dtoa_r+0x582>
 8005032:	494d      	ldr	r1, [pc, #308]	; (8005168 <_dtoa_r+0x630>)
 8005034:	2000      	movs	r0, #0
 8005036:	f7fb fc19 	bl	800086c <__aeabi_ddiv>
 800503a:	4652      	mov	r2, sl
 800503c:	465b      	mov	r3, fp
 800503e:	f7fb f933 	bl	80002a8 <__aeabi_dsub>
 8005042:	9d01      	ldr	r5, [sp, #4]
 8005044:	4682      	mov	sl, r0
 8005046:	468b      	mov	fp, r1
 8005048:	4649      	mov	r1, r9
 800504a:	4640      	mov	r0, r8
 800504c:	f7fb fd94 	bl	8000b78 <__aeabi_d2iz>
 8005050:	4606      	mov	r6, r0
 8005052:	f7fb fa77 	bl	8000544 <__aeabi_i2d>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4640      	mov	r0, r8
 800505c:	4649      	mov	r1, r9
 800505e:	f7fb f923 	bl	80002a8 <__aeabi_dsub>
 8005062:	3630      	adds	r6, #48	; 0x30
 8005064:	f805 6b01 	strb.w	r6, [r5], #1
 8005068:	4652      	mov	r2, sl
 800506a:	465b      	mov	r3, fp
 800506c:	4680      	mov	r8, r0
 800506e:	4689      	mov	r9, r1
 8005070:	f7fb fd44 	bl	8000afc <__aeabi_dcmplt>
 8005074:	2800      	cmp	r0, #0
 8005076:	d163      	bne.n	8005140 <_dtoa_r+0x608>
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	4936      	ldr	r1, [pc, #216]	; (8005158 <_dtoa_r+0x620>)
 800507e:	2000      	movs	r0, #0
 8005080:	f7fb f912 	bl	80002a8 <__aeabi_dsub>
 8005084:	4652      	mov	r2, sl
 8005086:	465b      	mov	r3, fp
 8005088:	f7fb fd38 	bl	8000afc <__aeabi_dcmplt>
 800508c:	2800      	cmp	r0, #0
 800508e:	f040 80b5 	bne.w	80051fc <_dtoa_r+0x6c4>
 8005092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005094:	429d      	cmp	r5, r3
 8005096:	d081      	beq.n	8004f9c <_dtoa_r+0x464>
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <_dtoa_r+0x624>)
 800509a:	2200      	movs	r2, #0
 800509c:	4650      	mov	r0, sl
 800509e:	4659      	mov	r1, fp
 80050a0:	f7fb faba 	bl	8000618 <__aeabi_dmul>
 80050a4:	4b2d      	ldr	r3, [pc, #180]	; (800515c <_dtoa_r+0x624>)
 80050a6:	4682      	mov	sl, r0
 80050a8:	468b      	mov	fp, r1
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	2200      	movs	r2, #0
 80050b0:	f7fb fab2 	bl	8000618 <__aeabi_dmul>
 80050b4:	4680      	mov	r8, r0
 80050b6:	4689      	mov	r9, r1
 80050b8:	e7c6      	b.n	8005048 <_dtoa_r+0x510>
 80050ba:	4650      	mov	r0, sl
 80050bc:	4659      	mov	r1, fp
 80050be:	f7fb faab 	bl	8000618 <__aeabi_dmul>
 80050c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050c4:	9d01      	ldr	r5, [sp, #4]
 80050c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80050c8:	4682      	mov	sl, r0
 80050ca:	468b      	mov	fp, r1
 80050cc:	4649      	mov	r1, r9
 80050ce:	4640      	mov	r0, r8
 80050d0:	f7fb fd52 	bl	8000b78 <__aeabi_d2iz>
 80050d4:	4606      	mov	r6, r0
 80050d6:	f7fb fa35 	bl	8000544 <__aeabi_i2d>
 80050da:	3630      	adds	r6, #48	; 0x30
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4640      	mov	r0, r8
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb f8e0 	bl	80002a8 <__aeabi_dsub>
 80050e8:	f805 6b01 	strb.w	r6, [r5], #1
 80050ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ee:	429d      	cmp	r5, r3
 80050f0:	4680      	mov	r8, r0
 80050f2:	4689      	mov	r9, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	d124      	bne.n	8005144 <_dtoa_r+0x60c>
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <_dtoa_r+0x630>)
 80050fc:	4650      	mov	r0, sl
 80050fe:	4659      	mov	r1, fp
 8005100:	f7fb f8d4 	bl	80002ac <__adddf3>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4640      	mov	r0, r8
 800510a:	4649      	mov	r1, r9
 800510c:	f7fb fd14 	bl	8000b38 <__aeabi_dcmpgt>
 8005110:	2800      	cmp	r0, #0
 8005112:	d173      	bne.n	80051fc <_dtoa_r+0x6c4>
 8005114:	4652      	mov	r2, sl
 8005116:	465b      	mov	r3, fp
 8005118:	4913      	ldr	r1, [pc, #76]	; (8005168 <_dtoa_r+0x630>)
 800511a:	2000      	movs	r0, #0
 800511c:	f7fb f8c4 	bl	80002a8 <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4640      	mov	r0, r8
 8005126:	4649      	mov	r1, r9
 8005128:	f7fb fce8 	bl	8000afc <__aeabi_dcmplt>
 800512c:	2800      	cmp	r0, #0
 800512e:	f43f af35 	beq.w	8004f9c <_dtoa_r+0x464>
 8005132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005134:	1e6b      	subs	r3, r5, #1
 8005136:	930f      	str	r3, [sp, #60]	; 0x3c
 8005138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d0f8      	beq.n	8005132 <_dtoa_r+0x5fa>
 8005140:	9700      	str	r7, [sp, #0]
 8005142:	e049      	b.n	80051d8 <_dtoa_r+0x6a0>
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <_dtoa_r+0x624>)
 8005146:	f7fb fa67 	bl	8000618 <__aeabi_dmul>
 800514a:	4680      	mov	r8, r0
 800514c:	4689      	mov	r9, r1
 800514e:	e7bd      	b.n	80050cc <_dtoa_r+0x594>
 8005150:	080070e0 	.word	0x080070e0
 8005154:	080070b8 	.word	0x080070b8
 8005158:	3ff00000 	.word	0x3ff00000
 800515c:	40240000 	.word	0x40240000
 8005160:	401c0000 	.word	0x401c0000
 8005164:	40140000 	.word	0x40140000
 8005168:	3fe00000 	.word	0x3fe00000
 800516c:	9d01      	ldr	r5, [sp, #4]
 800516e:	4656      	mov	r6, sl
 8005170:	465f      	mov	r7, fp
 8005172:	4642      	mov	r2, r8
 8005174:	464b      	mov	r3, r9
 8005176:	4630      	mov	r0, r6
 8005178:	4639      	mov	r1, r7
 800517a:	f7fb fb77 	bl	800086c <__aeabi_ddiv>
 800517e:	f7fb fcfb 	bl	8000b78 <__aeabi_d2iz>
 8005182:	4682      	mov	sl, r0
 8005184:	f7fb f9de 	bl	8000544 <__aeabi_i2d>
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f7fb fa44 	bl	8000618 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4630      	mov	r0, r6
 8005196:	4639      	mov	r1, r7
 8005198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800519c:	f7fb f884 	bl	80002a8 <__aeabi_dsub>
 80051a0:	f805 6b01 	strb.w	r6, [r5], #1
 80051a4:	9e01      	ldr	r6, [sp, #4]
 80051a6:	9f03      	ldr	r7, [sp, #12]
 80051a8:	1bae      	subs	r6, r5, r6
 80051aa:	42b7      	cmp	r7, r6
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	d135      	bne.n	800521e <_dtoa_r+0x6e6>
 80051b2:	f7fb f87b 	bl	80002ac <__adddf3>
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	f7fb fcbb 	bl	8000b38 <__aeabi_dcmpgt>
 80051c2:	b9d0      	cbnz	r0, 80051fa <_dtoa_r+0x6c2>
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	4630      	mov	r0, r6
 80051ca:	4639      	mov	r1, r7
 80051cc:	f7fb fc8c 	bl	8000ae8 <__aeabi_dcmpeq>
 80051d0:	b110      	cbz	r0, 80051d8 <_dtoa_r+0x6a0>
 80051d2:	f01a 0f01 	tst.w	sl, #1
 80051d6:	d110      	bne.n	80051fa <_dtoa_r+0x6c2>
 80051d8:	4620      	mov	r0, r4
 80051da:	ee18 1a10 	vmov	r1, s16
 80051de:	f000 fbed 	bl	80059bc <_Bfree>
 80051e2:	2300      	movs	r3, #0
 80051e4:	9800      	ldr	r0, [sp, #0]
 80051e6:	702b      	strb	r3, [r5, #0]
 80051e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ea:	3001      	adds	r0, #1
 80051ec:	6018      	str	r0, [r3, #0]
 80051ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f43f acf1 	beq.w	8004bd8 <_dtoa_r+0xa0>
 80051f6:	601d      	str	r5, [r3, #0]
 80051f8:	e4ee      	b.n	8004bd8 <_dtoa_r+0xa0>
 80051fa:	9f00      	ldr	r7, [sp, #0]
 80051fc:	462b      	mov	r3, r5
 80051fe:	461d      	mov	r5, r3
 8005200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005204:	2a39      	cmp	r2, #57	; 0x39
 8005206:	d106      	bne.n	8005216 <_dtoa_r+0x6de>
 8005208:	9a01      	ldr	r2, [sp, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d1f7      	bne.n	80051fe <_dtoa_r+0x6c6>
 800520e:	9901      	ldr	r1, [sp, #4]
 8005210:	2230      	movs	r2, #48	; 0x30
 8005212:	3701      	adds	r7, #1
 8005214:	700a      	strb	r2, [r1, #0]
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	3201      	adds	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e790      	b.n	8005140 <_dtoa_r+0x608>
 800521e:	4ba6      	ldr	r3, [pc, #664]	; (80054b8 <_dtoa_r+0x980>)
 8005220:	2200      	movs	r2, #0
 8005222:	f7fb f9f9 	bl	8000618 <__aeabi_dmul>
 8005226:	2200      	movs	r2, #0
 8005228:	2300      	movs	r3, #0
 800522a:	4606      	mov	r6, r0
 800522c:	460f      	mov	r7, r1
 800522e:	f7fb fc5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005232:	2800      	cmp	r0, #0
 8005234:	d09d      	beq.n	8005172 <_dtoa_r+0x63a>
 8005236:	e7cf      	b.n	80051d8 <_dtoa_r+0x6a0>
 8005238:	9a08      	ldr	r2, [sp, #32]
 800523a:	2a00      	cmp	r2, #0
 800523c:	f000 80d7 	beq.w	80053ee <_dtoa_r+0x8b6>
 8005240:	9a06      	ldr	r2, [sp, #24]
 8005242:	2a01      	cmp	r2, #1
 8005244:	f300 80ba 	bgt.w	80053bc <_dtoa_r+0x884>
 8005248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800524a:	2a00      	cmp	r2, #0
 800524c:	f000 80b2 	beq.w	80053b4 <_dtoa_r+0x87c>
 8005250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005254:	9e07      	ldr	r6, [sp, #28]
 8005256:	9d04      	ldr	r5, [sp, #16]
 8005258:	9a04      	ldr	r2, [sp, #16]
 800525a:	441a      	add	r2, r3
 800525c:	9204      	str	r2, [sp, #16]
 800525e:	9a05      	ldr	r2, [sp, #20]
 8005260:	2101      	movs	r1, #1
 8005262:	441a      	add	r2, r3
 8005264:	4620      	mov	r0, r4
 8005266:	9205      	str	r2, [sp, #20]
 8005268:	f000 fc60 	bl	8005b2c <__i2b>
 800526c:	4607      	mov	r7, r0
 800526e:	2d00      	cmp	r5, #0
 8005270:	dd0c      	ble.n	800528c <_dtoa_r+0x754>
 8005272:	9b05      	ldr	r3, [sp, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	dd09      	ble.n	800528c <_dtoa_r+0x754>
 8005278:	42ab      	cmp	r3, r5
 800527a:	9a04      	ldr	r2, [sp, #16]
 800527c:	bfa8      	it	ge
 800527e:	462b      	movge	r3, r5
 8005280:	1ad2      	subs	r2, r2, r3
 8005282:	9204      	str	r2, [sp, #16]
 8005284:	9a05      	ldr	r2, [sp, #20]
 8005286:	1aed      	subs	r5, r5, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	9305      	str	r3, [sp, #20]
 800528c:	9b07      	ldr	r3, [sp, #28]
 800528e:	b31b      	cbz	r3, 80052d8 <_dtoa_r+0x7a0>
 8005290:	9b08      	ldr	r3, [sp, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 80af 	beq.w	80053f6 <_dtoa_r+0x8be>
 8005298:	2e00      	cmp	r6, #0
 800529a:	dd13      	ble.n	80052c4 <_dtoa_r+0x78c>
 800529c:	4639      	mov	r1, r7
 800529e:	4632      	mov	r2, r6
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 fd03 	bl	8005cac <__pow5mult>
 80052a6:	ee18 2a10 	vmov	r2, s16
 80052aa:	4601      	mov	r1, r0
 80052ac:	4607      	mov	r7, r0
 80052ae:	4620      	mov	r0, r4
 80052b0:	f000 fc52 	bl	8005b58 <__multiply>
 80052b4:	ee18 1a10 	vmov	r1, s16
 80052b8:	4680      	mov	r8, r0
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fb7e 	bl	80059bc <_Bfree>
 80052c0:	ee08 8a10 	vmov	s16, r8
 80052c4:	9b07      	ldr	r3, [sp, #28]
 80052c6:	1b9a      	subs	r2, r3, r6
 80052c8:	d006      	beq.n	80052d8 <_dtoa_r+0x7a0>
 80052ca:	ee18 1a10 	vmov	r1, s16
 80052ce:	4620      	mov	r0, r4
 80052d0:	f000 fcec 	bl	8005cac <__pow5mult>
 80052d4:	ee08 0a10 	vmov	s16, r0
 80052d8:	2101      	movs	r1, #1
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 fc26 	bl	8005b2c <__i2b>
 80052e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	4606      	mov	r6, r0
 80052e6:	f340 8088 	ble.w	80053fa <_dtoa_r+0x8c2>
 80052ea:	461a      	mov	r2, r3
 80052ec:	4601      	mov	r1, r0
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 fcdc 	bl	8005cac <__pow5mult>
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	4606      	mov	r6, r0
 80052fa:	f340 8081 	ble.w	8005400 <_dtoa_r+0x8c8>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	6933      	ldr	r3, [r6, #16]
 8005304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005308:	6918      	ldr	r0, [r3, #16]
 800530a:	f000 fbbf 	bl	8005a8c <__hi0bits>
 800530e:	f1c0 0020 	rsb	r0, r0, #32
 8005312:	9b05      	ldr	r3, [sp, #20]
 8005314:	4418      	add	r0, r3
 8005316:	f010 001f 	ands.w	r0, r0, #31
 800531a:	f000 8092 	beq.w	8005442 <_dtoa_r+0x90a>
 800531e:	f1c0 0320 	rsb	r3, r0, #32
 8005322:	2b04      	cmp	r3, #4
 8005324:	f340 808a 	ble.w	800543c <_dtoa_r+0x904>
 8005328:	f1c0 001c 	rsb	r0, r0, #28
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	4403      	add	r3, r0
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	9b05      	ldr	r3, [sp, #20]
 8005334:	4403      	add	r3, r0
 8005336:	4405      	add	r5, r0
 8005338:	9305      	str	r3, [sp, #20]
 800533a:	9b04      	ldr	r3, [sp, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	dd07      	ble.n	8005350 <_dtoa_r+0x818>
 8005340:	ee18 1a10 	vmov	r1, s16
 8005344:	461a      	mov	r2, r3
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fd0a 	bl	8005d60 <__lshift>
 800534c:	ee08 0a10 	vmov	s16, r0
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	dd05      	ble.n	8005362 <_dtoa_r+0x82a>
 8005356:	4631      	mov	r1, r6
 8005358:	461a      	mov	r2, r3
 800535a:	4620      	mov	r0, r4
 800535c:	f000 fd00 	bl	8005d60 <__lshift>
 8005360:	4606      	mov	r6, r0
 8005362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d06e      	beq.n	8005446 <_dtoa_r+0x90e>
 8005368:	ee18 0a10 	vmov	r0, s16
 800536c:	4631      	mov	r1, r6
 800536e:	f000 fd67 	bl	8005e40 <__mcmp>
 8005372:	2800      	cmp	r0, #0
 8005374:	da67      	bge.n	8005446 <_dtoa_r+0x90e>
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	ee18 1a10 	vmov	r1, s16
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	220a      	movs	r2, #10
 8005382:	2300      	movs	r3, #0
 8005384:	4620      	mov	r0, r4
 8005386:	f000 fb3b 	bl	8005a00 <__multadd>
 800538a:	9b08      	ldr	r3, [sp, #32]
 800538c:	ee08 0a10 	vmov	s16, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 81b1 	beq.w	80056f8 <_dtoa_r+0xbc0>
 8005396:	2300      	movs	r3, #0
 8005398:	4639      	mov	r1, r7
 800539a:	220a      	movs	r2, #10
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fb2f 	bl	8005a00 <__multadd>
 80053a2:	9b02      	ldr	r3, [sp, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	4607      	mov	r7, r0
 80053a8:	f300 808e 	bgt.w	80054c8 <_dtoa_r+0x990>
 80053ac:	9b06      	ldr	r3, [sp, #24]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	dc51      	bgt.n	8005456 <_dtoa_r+0x91e>
 80053b2:	e089      	b.n	80054c8 <_dtoa_r+0x990>
 80053b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053ba:	e74b      	b.n	8005254 <_dtoa_r+0x71c>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	1e5e      	subs	r6, r3, #1
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	42b3      	cmp	r3, r6
 80053c4:	bfbf      	itttt	lt
 80053c6:	9b07      	ldrlt	r3, [sp, #28]
 80053c8:	9607      	strlt	r6, [sp, #28]
 80053ca:	1af2      	sublt	r2, r6, r3
 80053cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80053ce:	bfb6      	itet	lt
 80053d0:	189b      	addlt	r3, r3, r2
 80053d2:	1b9e      	subge	r6, r3, r6
 80053d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	bfb8      	it	lt
 80053da:	2600      	movlt	r6, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bfb7      	itett	lt
 80053e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80053e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80053e8:	1a9d      	sublt	r5, r3, r2
 80053ea:	2300      	movlt	r3, #0
 80053ec:	e734      	b.n	8005258 <_dtoa_r+0x720>
 80053ee:	9e07      	ldr	r6, [sp, #28]
 80053f0:	9d04      	ldr	r5, [sp, #16]
 80053f2:	9f08      	ldr	r7, [sp, #32]
 80053f4:	e73b      	b.n	800526e <_dtoa_r+0x736>
 80053f6:	9a07      	ldr	r2, [sp, #28]
 80053f8:	e767      	b.n	80052ca <_dtoa_r+0x792>
 80053fa:	9b06      	ldr	r3, [sp, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	dc18      	bgt.n	8005432 <_dtoa_r+0x8fa>
 8005400:	f1ba 0f00 	cmp.w	sl, #0
 8005404:	d115      	bne.n	8005432 <_dtoa_r+0x8fa>
 8005406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800540a:	b993      	cbnz	r3, 8005432 <_dtoa_r+0x8fa>
 800540c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005410:	0d1b      	lsrs	r3, r3, #20
 8005412:	051b      	lsls	r3, r3, #20
 8005414:	b183      	cbz	r3, 8005438 <_dtoa_r+0x900>
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	3301      	adds	r3, #1
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	9b05      	ldr	r3, [sp, #20]
 800541e:	3301      	adds	r3, #1
 8005420:	9305      	str	r3, [sp, #20]
 8005422:	f04f 0801 	mov.w	r8, #1
 8005426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f af6a 	bne.w	8005302 <_dtoa_r+0x7ca>
 800542e:	2001      	movs	r0, #1
 8005430:	e76f      	b.n	8005312 <_dtoa_r+0x7da>
 8005432:	f04f 0800 	mov.w	r8, #0
 8005436:	e7f6      	b.n	8005426 <_dtoa_r+0x8ee>
 8005438:	4698      	mov	r8, r3
 800543a:	e7f4      	b.n	8005426 <_dtoa_r+0x8ee>
 800543c:	f43f af7d 	beq.w	800533a <_dtoa_r+0x802>
 8005440:	4618      	mov	r0, r3
 8005442:	301c      	adds	r0, #28
 8005444:	e772      	b.n	800532c <_dtoa_r+0x7f4>
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	dc37      	bgt.n	80054bc <_dtoa_r+0x984>
 800544c:	9b06      	ldr	r3, [sp, #24]
 800544e:	2b02      	cmp	r3, #2
 8005450:	dd34      	ble.n	80054bc <_dtoa_r+0x984>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	9302      	str	r3, [sp, #8]
 8005456:	9b02      	ldr	r3, [sp, #8]
 8005458:	b96b      	cbnz	r3, 8005476 <_dtoa_r+0x93e>
 800545a:	4631      	mov	r1, r6
 800545c:	2205      	movs	r2, #5
 800545e:	4620      	mov	r0, r4
 8005460:	f000 face 	bl	8005a00 <__multadd>
 8005464:	4601      	mov	r1, r0
 8005466:	4606      	mov	r6, r0
 8005468:	ee18 0a10 	vmov	r0, s16
 800546c:	f000 fce8 	bl	8005e40 <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	f73f adbb 	bgt.w	8004fec <_dtoa_r+0x4b4>
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	9d01      	ldr	r5, [sp, #4]
 800547a:	43db      	mvns	r3, r3
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	4631      	mov	r1, r6
 8005484:	4620      	mov	r0, r4
 8005486:	f000 fa99 	bl	80059bc <_Bfree>
 800548a:	2f00      	cmp	r7, #0
 800548c:	f43f aea4 	beq.w	80051d8 <_dtoa_r+0x6a0>
 8005490:	f1b8 0f00 	cmp.w	r8, #0
 8005494:	d005      	beq.n	80054a2 <_dtoa_r+0x96a>
 8005496:	45b8      	cmp	r8, r7
 8005498:	d003      	beq.n	80054a2 <_dtoa_r+0x96a>
 800549a:	4641      	mov	r1, r8
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fa8d 	bl	80059bc <_Bfree>
 80054a2:	4639      	mov	r1, r7
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa89 	bl	80059bc <_Bfree>
 80054aa:	e695      	b.n	80051d8 <_dtoa_r+0x6a0>
 80054ac:	2600      	movs	r6, #0
 80054ae:	4637      	mov	r7, r6
 80054b0:	e7e1      	b.n	8005476 <_dtoa_r+0x93e>
 80054b2:	9700      	str	r7, [sp, #0]
 80054b4:	4637      	mov	r7, r6
 80054b6:	e599      	b.n	8004fec <_dtoa_r+0x4b4>
 80054b8:	40240000 	.word	0x40240000
 80054bc:	9b08      	ldr	r3, [sp, #32]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80ca 	beq.w	8005658 <_dtoa_r+0xb20>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	dd05      	ble.n	80054d8 <_dtoa_r+0x9a0>
 80054cc:	4639      	mov	r1, r7
 80054ce:	462a      	mov	r2, r5
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fc45 	bl	8005d60 <__lshift>
 80054d6:	4607      	mov	r7, r0
 80054d8:	f1b8 0f00 	cmp.w	r8, #0
 80054dc:	d05b      	beq.n	8005596 <_dtoa_r+0xa5e>
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fa2b 	bl	800593c <_Balloc>
 80054e6:	4605      	mov	r5, r0
 80054e8:	b928      	cbnz	r0, 80054f6 <_dtoa_r+0x9be>
 80054ea:	4b87      	ldr	r3, [pc, #540]	; (8005708 <_dtoa_r+0xbd0>)
 80054ec:	4602      	mov	r2, r0
 80054ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054f2:	f7ff bb3b 	b.w	8004b6c <_dtoa_r+0x34>
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	3202      	adds	r2, #2
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	f107 010c 	add.w	r1, r7, #12
 8005500:	300c      	adds	r0, #12
 8005502:	f000 fa0d 	bl	8005920 <memcpy>
 8005506:	2201      	movs	r2, #1
 8005508:	4629      	mov	r1, r5
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fc28 	bl	8005d60 <__lshift>
 8005510:	9b01      	ldr	r3, [sp, #4]
 8005512:	f103 0901 	add.w	r9, r3, #1
 8005516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800551a:	4413      	add	r3, r2
 800551c:	9305      	str	r3, [sp, #20]
 800551e:	f00a 0301 	and.w	r3, sl, #1
 8005522:	46b8      	mov	r8, r7
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	4607      	mov	r7, r0
 8005528:	4631      	mov	r1, r6
 800552a:	ee18 0a10 	vmov	r0, s16
 800552e:	f7ff fa77 	bl	8004a20 <quorem>
 8005532:	4641      	mov	r1, r8
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800553a:	ee18 0a10 	vmov	r0, s16
 800553e:	f000 fc7f 	bl	8005e40 <__mcmp>
 8005542:	463a      	mov	r2, r7
 8005544:	9003      	str	r0, [sp, #12]
 8005546:	4631      	mov	r1, r6
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fc95 	bl	8005e78 <__mdiff>
 800554e:	68c2      	ldr	r2, [r0, #12]
 8005550:	f109 3bff 	add.w	fp, r9, #4294967295
 8005554:	4605      	mov	r5, r0
 8005556:	bb02      	cbnz	r2, 800559a <_dtoa_r+0xa62>
 8005558:	4601      	mov	r1, r0
 800555a:	ee18 0a10 	vmov	r0, s16
 800555e:	f000 fc6f 	bl	8005e40 <__mcmp>
 8005562:	4602      	mov	r2, r0
 8005564:	4629      	mov	r1, r5
 8005566:	4620      	mov	r0, r4
 8005568:	9207      	str	r2, [sp, #28]
 800556a:	f000 fa27 	bl	80059bc <_Bfree>
 800556e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005572:	ea43 0102 	orr.w	r1, r3, r2
 8005576:	9b04      	ldr	r3, [sp, #16]
 8005578:	430b      	orrs	r3, r1
 800557a:	464d      	mov	r5, r9
 800557c:	d10f      	bne.n	800559e <_dtoa_r+0xa66>
 800557e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005582:	d02a      	beq.n	80055da <_dtoa_r+0xaa2>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	dd02      	ble.n	8005590 <_dtoa_r+0xa58>
 800558a:	9b02      	ldr	r3, [sp, #8]
 800558c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005590:	f88b a000 	strb.w	sl, [fp]
 8005594:	e775      	b.n	8005482 <_dtoa_r+0x94a>
 8005596:	4638      	mov	r0, r7
 8005598:	e7ba      	b.n	8005510 <_dtoa_r+0x9d8>
 800559a:	2201      	movs	r2, #1
 800559c:	e7e2      	b.n	8005564 <_dtoa_r+0xa2c>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	db04      	blt.n	80055ae <_dtoa_r+0xa76>
 80055a4:	9906      	ldr	r1, [sp, #24]
 80055a6:	430b      	orrs	r3, r1
 80055a8:	9904      	ldr	r1, [sp, #16]
 80055aa:	430b      	orrs	r3, r1
 80055ac:	d122      	bne.n	80055f4 <_dtoa_r+0xabc>
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	ddee      	ble.n	8005590 <_dtoa_r+0xa58>
 80055b2:	ee18 1a10 	vmov	r1, s16
 80055b6:	2201      	movs	r2, #1
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fbd1 	bl	8005d60 <__lshift>
 80055be:	4631      	mov	r1, r6
 80055c0:	ee08 0a10 	vmov	s16, r0
 80055c4:	f000 fc3c 	bl	8005e40 <__mcmp>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	dc03      	bgt.n	80055d4 <_dtoa_r+0xa9c>
 80055cc:	d1e0      	bne.n	8005590 <_dtoa_r+0xa58>
 80055ce:	f01a 0f01 	tst.w	sl, #1
 80055d2:	d0dd      	beq.n	8005590 <_dtoa_r+0xa58>
 80055d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055d8:	d1d7      	bne.n	800558a <_dtoa_r+0xa52>
 80055da:	2339      	movs	r3, #57	; 0x39
 80055dc:	f88b 3000 	strb.w	r3, [fp]
 80055e0:	462b      	mov	r3, r5
 80055e2:	461d      	mov	r5, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055ea:	2a39      	cmp	r2, #57	; 0x39
 80055ec:	d071      	beq.n	80056d2 <_dtoa_r+0xb9a>
 80055ee:	3201      	adds	r2, #1
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e746      	b.n	8005482 <_dtoa_r+0x94a>
 80055f4:	2a00      	cmp	r2, #0
 80055f6:	dd07      	ble.n	8005608 <_dtoa_r+0xad0>
 80055f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055fc:	d0ed      	beq.n	80055da <_dtoa_r+0xaa2>
 80055fe:	f10a 0301 	add.w	r3, sl, #1
 8005602:	f88b 3000 	strb.w	r3, [fp]
 8005606:	e73c      	b.n	8005482 <_dtoa_r+0x94a>
 8005608:	9b05      	ldr	r3, [sp, #20]
 800560a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800560e:	4599      	cmp	r9, r3
 8005610:	d047      	beq.n	80056a2 <_dtoa_r+0xb6a>
 8005612:	ee18 1a10 	vmov	r1, s16
 8005616:	2300      	movs	r3, #0
 8005618:	220a      	movs	r2, #10
 800561a:	4620      	mov	r0, r4
 800561c:	f000 f9f0 	bl	8005a00 <__multadd>
 8005620:	45b8      	cmp	r8, r7
 8005622:	ee08 0a10 	vmov	s16, r0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	f04f 020a 	mov.w	r2, #10
 800562e:	4641      	mov	r1, r8
 8005630:	4620      	mov	r0, r4
 8005632:	d106      	bne.n	8005642 <_dtoa_r+0xb0a>
 8005634:	f000 f9e4 	bl	8005a00 <__multadd>
 8005638:	4680      	mov	r8, r0
 800563a:	4607      	mov	r7, r0
 800563c:	f109 0901 	add.w	r9, r9, #1
 8005640:	e772      	b.n	8005528 <_dtoa_r+0x9f0>
 8005642:	f000 f9dd 	bl	8005a00 <__multadd>
 8005646:	4639      	mov	r1, r7
 8005648:	4680      	mov	r8, r0
 800564a:	2300      	movs	r3, #0
 800564c:	220a      	movs	r2, #10
 800564e:	4620      	mov	r0, r4
 8005650:	f000 f9d6 	bl	8005a00 <__multadd>
 8005654:	4607      	mov	r7, r0
 8005656:	e7f1      	b.n	800563c <_dtoa_r+0xb04>
 8005658:	9b03      	ldr	r3, [sp, #12]
 800565a:	9302      	str	r3, [sp, #8]
 800565c:	9d01      	ldr	r5, [sp, #4]
 800565e:	ee18 0a10 	vmov	r0, s16
 8005662:	4631      	mov	r1, r6
 8005664:	f7ff f9dc 	bl	8004a20 <quorem>
 8005668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800566c:	9b01      	ldr	r3, [sp, #4]
 800566e:	f805 ab01 	strb.w	sl, [r5], #1
 8005672:	1aea      	subs	r2, r5, r3
 8005674:	9b02      	ldr	r3, [sp, #8]
 8005676:	4293      	cmp	r3, r2
 8005678:	dd09      	ble.n	800568e <_dtoa_r+0xb56>
 800567a:	ee18 1a10 	vmov	r1, s16
 800567e:	2300      	movs	r3, #0
 8005680:	220a      	movs	r2, #10
 8005682:	4620      	mov	r0, r4
 8005684:	f000 f9bc 	bl	8005a00 <__multadd>
 8005688:	ee08 0a10 	vmov	s16, r0
 800568c:	e7e7      	b.n	800565e <_dtoa_r+0xb26>
 800568e:	9b02      	ldr	r3, [sp, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfc8      	it	gt
 8005694:	461d      	movgt	r5, r3
 8005696:	9b01      	ldr	r3, [sp, #4]
 8005698:	bfd8      	it	le
 800569a:	2501      	movle	r5, #1
 800569c:	441d      	add	r5, r3
 800569e:	f04f 0800 	mov.w	r8, #0
 80056a2:	ee18 1a10 	vmov	r1, s16
 80056a6:	2201      	movs	r2, #1
 80056a8:	4620      	mov	r0, r4
 80056aa:	f000 fb59 	bl	8005d60 <__lshift>
 80056ae:	4631      	mov	r1, r6
 80056b0:	ee08 0a10 	vmov	s16, r0
 80056b4:	f000 fbc4 	bl	8005e40 <__mcmp>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dc91      	bgt.n	80055e0 <_dtoa_r+0xaa8>
 80056bc:	d102      	bne.n	80056c4 <_dtoa_r+0xb8c>
 80056be:	f01a 0f01 	tst.w	sl, #1
 80056c2:	d18d      	bne.n	80055e0 <_dtoa_r+0xaa8>
 80056c4:	462b      	mov	r3, r5
 80056c6:	461d      	mov	r5, r3
 80056c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056cc:	2a30      	cmp	r2, #48	; 0x30
 80056ce:	d0fa      	beq.n	80056c6 <_dtoa_r+0xb8e>
 80056d0:	e6d7      	b.n	8005482 <_dtoa_r+0x94a>
 80056d2:	9a01      	ldr	r2, [sp, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d184      	bne.n	80055e2 <_dtoa_r+0xaaa>
 80056d8:	9b00      	ldr	r3, [sp, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	2331      	movs	r3, #49	; 0x31
 80056e0:	7013      	strb	r3, [r2, #0]
 80056e2:	e6ce      	b.n	8005482 <_dtoa_r+0x94a>
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <_dtoa_r+0xbd4>)
 80056e6:	f7ff ba95 	b.w	8004c14 <_dtoa_r+0xdc>
 80056ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f47f aa6e 	bne.w	8004bce <_dtoa_r+0x96>
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <_dtoa_r+0xbd8>)
 80056f4:	f7ff ba8e 	b.w	8004c14 <_dtoa_r+0xdc>
 80056f8:	9b02      	ldr	r3, [sp, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	dcae      	bgt.n	800565c <_dtoa_r+0xb24>
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	2b02      	cmp	r3, #2
 8005702:	f73f aea8 	bgt.w	8005456 <_dtoa_r+0x91e>
 8005706:	e7a9      	b.n	800565c <_dtoa_r+0xb24>
 8005708:	08006fe7 	.word	0x08006fe7
 800570c:	08006f44 	.word	0x08006f44
 8005710:	08006f68 	.word	0x08006f68

08005714 <std>:
 8005714:	2300      	movs	r3, #0
 8005716:	b510      	push	{r4, lr}
 8005718:	4604      	mov	r4, r0
 800571a:	e9c0 3300 	strd	r3, r3, [r0]
 800571e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005722:	6083      	str	r3, [r0, #8]
 8005724:	8181      	strh	r1, [r0, #12]
 8005726:	6643      	str	r3, [r0, #100]	; 0x64
 8005728:	81c2      	strh	r2, [r0, #14]
 800572a:	6183      	str	r3, [r0, #24]
 800572c:	4619      	mov	r1, r3
 800572e:	2208      	movs	r2, #8
 8005730:	305c      	adds	r0, #92	; 0x5c
 8005732:	f7fe fccb 	bl	80040cc <memset>
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <std+0x38>)
 8005738:	6263      	str	r3, [r4, #36]	; 0x24
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <std+0x3c>)
 800573c:	62a3      	str	r3, [r4, #40]	; 0x28
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <std+0x40>)
 8005740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <std+0x44>)
 8005744:	6224      	str	r4, [r4, #32]
 8005746:	6323      	str	r3, [r4, #48]	; 0x30
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	080067bd 	.word	0x080067bd
 8005750:	080067df 	.word	0x080067df
 8005754:	08006817 	.word	0x08006817
 8005758:	0800683b 	.word	0x0800683b

0800575c <_cleanup_r>:
 800575c:	4901      	ldr	r1, [pc, #4]	; (8005764 <_cleanup_r+0x8>)
 800575e:	f000 b8af 	b.w	80058c0 <_fwalk_reent>
 8005762:	bf00      	nop
 8005764:	08006b51 	.word	0x08006b51

08005768 <__sfmoreglue>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	2268      	movs	r2, #104	; 0x68
 800576c:	1e4d      	subs	r5, r1, #1
 800576e:	4355      	muls	r5, r2
 8005770:	460e      	mov	r6, r1
 8005772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005776:	f000 fce7 	bl	8006148 <_malloc_r>
 800577a:	4604      	mov	r4, r0
 800577c:	b140      	cbz	r0, 8005790 <__sfmoreglue+0x28>
 800577e:	2100      	movs	r1, #0
 8005780:	e9c0 1600 	strd	r1, r6, [r0]
 8005784:	300c      	adds	r0, #12
 8005786:	60a0      	str	r0, [r4, #8]
 8005788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800578c:	f7fe fc9e 	bl	80040cc <memset>
 8005790:	4620      	mov	r0, r4
 8005792:	bd70      	pop	{r4, r5, r6, pc}

08005794 <__sfp_lock_acquire>:
 8005794:	4801      	ldr	r0, [pc, #4]	; (800579c <__sfp_lock_acquire+0x8>)
 8005796:	f000 b8b8 	b.w	800590a <__retarget_lock_acquire_recursive>
 800579a:	bf00      	nop
 800579c:	20000391 	.word	0x20000391

080057a0 <__sfp_lock_release>:
 80057a0:	4801      	ldr	r0, [pc, #4]	; (80057a8 <__sfp_lock_release+0x8>)
 80057a2:	f000 b8b3 	b.w	800590c <__retarget_lock_release_recursive>
 80057a6:	bf00      	nop
 80057a8:	20000391 	.word	0x20000391

080057ac <__sinit_lock_acquire>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__sinit_lock_acquire+0x8>)
 80057ae:	f000 b8ac 	b.w	800590a <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000392 	.word	0x20000392

080057b8 <__sinit_lock_release>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__sinit_lock_release+0x8>)
 80057ba:	f000 b8a7 	b.w	800590c <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	20000392 	.word	0x20000392

080057c4 <__sinit>:
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	f7ff fff0 	bl	80057ac <__sinit_lock_acquire>
 80057cc:	69a3      	ldr	r3, [r4, #24]
 80057ce:	b11b      	cbz	r3, 80057d8 <__sinit+0x14>
 80057d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d4:	f7ff bff0 	b.w	80057b8 <__sinit_lock_release>
 80057d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057dc:	6523      	str	r3, [r4, #80]	; 0x50
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <__sinit+0x68>)
 80057e0:	4a13      	ldr	r2, [pc, #76]	; (8005830 <__sinit+0x6c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	bf04      	itt	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	61a3      	streq	r3, [r4, #24]
 80057ee:	4620      	mov	r0, r4
 80057f0:	f000 f820 	bl	8005834 <__sfp>
 80057f4:	6060      	str	r0, [r4, #4]
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 f81c 	bl	8005834 <__sfp>
 80057fc:	60a0      	str	r0, [r4, #8]
 80057fe:	4620      	mov	r0, r4
 8005800:	f000 f818 	bl	8005834 <__sfp>
 8005804:	2200      	movs	r2, #0
 8005806:	60e0      	str	r0, [r4, #12]
 8005808:	2104      	movs	r1, #4
 800580a:	6860      	ldr	r0, [r4, #4]
 800580c:	f7ff ff82 	bl	8005714 <std>
 8005810:	68a0      	ldr	r0, [r4, #8]
 8005812:	2201      	movs	r2, #1
 8005814:	2109      	movs	r1, #9
 8005816:	f7ff ff7d 	bl	8005714 <std>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	2202      	movs	r2, #2
 800581e:	2112      	movs	r1, #18
 8005820:	f7ff ff78 	bl	8005714 <std>
 8005824:	2301      	movs	r3, #1
 8005826:	61a3      	str	r3, [r4, #24]
 8005828:	e7d2      	b.n	80057d0 <__sinit+0xc>
 800582a:	bf00      	nop
 800582c:	08006f30 	.word	0x08006f30
 8005830:	0800575d 	.word	0x0800575d

08005834 <__sfp>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	4607      	mov	r7, r0
 8005838:	f7ff ffac 	bl	8005794 <__sfp_lock_acquire>
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <__sfp+0x84>)
 800583e:	681e      	ldr	r6, [r3, #0]
 8005840:	69b3      	ldr	r3, [r6, #24]
 8005842:	b913      	cbnz	r3, 800584a <__sfp+0x16>
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff ffbd 	bl	80057c4 <__sinit>
 800584a:	3648      	adds	r6, #72	; 0x48
 800584c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005850:	3b01      	subs	r3, #1
 8005852:	d503      	bpl.n	800585c <__sfp+0x28>
 8005854:	6833      	ldr	r3, [r6, #0]
 8005856:	b30b      	cbz	r3, 800589c <__sfp+0x68>
 8005858:	6836      	ldr	r6, [r6, #0]
 800585a:	e7f7      	b.n	800584c <__sfp+0x18>
 800585c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005860:	b9d5      	cbnz	r5, 8005898 <__sfp+0x64>
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <__sfp+0x88>)
 8005864:	60e3      	str	r3, [r4, #12]
 8005866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800586a:	6665      	str	r5, [r4, #100]	; 0x64
 800586c:	f000 f84c 	bl	8005908 <__retarget_lock_init_recursive>
 8005870:	f7ff ff96 	bl	80057a0 <__sfp_lock_release>
 8005874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800587c:	6025      	str	r5, [r4, #0]
 800587e:	61a5      	str	r5, [r4, #24]
 8005880:	2208      	movs	r2, #8
 8005882:	4629      	mov	r1, r5
 8005884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005888:	f7fe fc20 	bl	80040cc <memset>
 800588c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005894:	4620      	mov	r0, r4
 8005896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005898:	3468      	adds	r4, #104	; 0x68
 800589a:	e7d9      	b.n	8005850 <__sfp+0x1c>
 800589c:	2104      	movs	r1, #4
 800589e:	4638      	mov	r0, r7
 80058a0:	f7ff ff62 	bl	8005768 <__sfmoreglue>
 80058a4:	4604      	mov	r4, r0
 80058a6:	6030      	str	r0, [r6, #0]
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1d5      	bne.n	8005858 <__sfp+0x24>
 80058ac:	f7ff ff78 	bl	80057a0 <__sfp_lock_release>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	e7ee      	b.n	8005894 <__sfp+0x60>
 80058b6:	bf00      	nop
 80058b8:	08006f30 	.word	0x08006f30
 80058bc:	ffff0001 	.word	0xffff0001

080058c0 <_fwalk_reent>:
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	4606      	mov	r6, r0
 80058c6:	4688      	mov	r8, r1
 80058c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058cc:	2700      	movs	r7, #0
 80058ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058d2:	f1b9 0901 	subs.w	r9, r9, #1
 80058d6:	d505      	bpl.n	80058e4 <_fwalk_reent+0x24>
 80058d8:	6824      	ldr	r4, [r4, #0]
 80058da:	2c00      	cmp	r4, #0
 80058dc:	d1f7      	bne.n	80058ce <_fwalk_reent+0xe>
 80058de:	4638      	mov	r0, r7
 80058e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e4:	89ab      	ldrh	r3, [r5, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d907      	bls.n	80058fa <_fwalk_reent+0x3a>
 80058ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058ee:	3301      	adds	r3, #1
 80058f0:	d003      	beq.n	80058fa <_fwalk_reent+0x3a>
 80058f2:	4629      	mov	r1, r5
 80058f4:	4630      	mov	r0, r6
 80058f6:	47c0      	blx	r8
 80058f8:	4307      	orrs	r7, r0
 80058fa:	3568      	adds	r5, #104	; 0x68
 80058fc:	e7e9      	b.n	80058d2 <_fwalk_reent+0x12>
	...

08005900 <_localeconv_r>:
 8005900:	4800      	ldr	r0, [pc, #0]	; (8005904 <_localeconv_r+0x4>)
 8005902:	4770      	bx	lr
 8005904:	20000160 	.word	0x20000160

08005908 <__retarget_lock_init_recursive>:
 8005908:	4770      	bx	lr

0800590a <__retarget_lock_acquire_recursive>:
 800590a:	4770      	bx	lr

0800590c <__retarget_lock_release_recursive>:
 800590c:	4770      	bx	lr
	...

08005910 <malloc>:
 8005910:	4b02      	ldr	r3, [pc, #8]	; (800591c <malloc+0xc>)
 8005912:	4601      	mov	r1, r0
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	f000 bc17 	b.w	8006148 <_malloc_r>
 800591a:	bf00      	nop
 800591c:	2000000c 	.word	0x2000000c

08005920 <memcpy>:
 8005920:	440a      	add	r2, r1
 8005922:	4291      	cmp	r1, r2
 8005924:	f100 33ff 	add.w	r3, r0, #4294967295
 8005928:	d100      	bne.n	800592c <memcpy+0xc>
 800592a:	4770      	bx	lr
 800592c:	b510      	push	{r4, lr}
 800592e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005936:	4291      	cmp	r1, r2
 8005938:	d1f9      	bne.n	800592e <memcpy+0xe>
 800593a:	bd10      	pop	{r4, pc}

0800593c <_Balloc>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005940:	4604      	mov	r4, r0
 8005942:	460d      	mov	r5, r1
 8005944:	b976      	cbnz	r6, 8005964 <_Balloc+0x28>
 8005946:	2010      	movs	r0, #16
 8005948:	f7ff ffe2 	bl	8005910 <malloc>
 800594c:	4602      	mov	r2, r0
 800594e:	6260      	str	r0, [r4, #36]	; 0x24
 8005950:	b920      	cbnz	r0, 800595c <_Balloc+0x20>
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <_Balloc+0x78>)
 8005954:	4818      	ldr	r0, [pc, #96]	; (80059b8 <_Balloc+0x7c>)
 8005956:	2166      	movs	r1, #102	; 0x66
 8005958:	f001 f846 	bl	80069e8 <__assert_func>
 800595c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005960:	6006      	str	r6, [r0, #0]
 8005962:	60c6      	str	r6, [r0, #12]
 8005964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005966:	68f3      	ldr	r3, [r6, #12]
 8005968:	b183      	cbz	r3, 800598c <_Balloc+0x50>
 800596a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005972:	b9b8      	cbnz	r0, 80059a4 <_Balloc+0x68>
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f605 	lsl.w	r6, r1, r5
 800597a:	1d72      	adds	r2, r6, #5
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	4620      	mov	r0, r4
 8005980:	f000 fb60 	bl	8006044 <_calloc_r>
 8005984:	b160      	cbz	r0, 80059a0 <_Balloc+0x64>
 8005986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800598a:	e00e      	b.n	80059aa <_Balloc+0x6e>
 800598c:	2221      	movs	r2, #33	; 0x21
 800598e:	2104      	movs	r1, #4
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fb57 	bl	8006044 <_calloc_r>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	60f0      	str	r0, [r6, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e4      	bne.n	800596a <_Balloc+0x2e>
 80059a0:	2000      	movs	r0, #0
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	6802      	ldr	r2, [r0, #0]
 80059a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059aa:	2300      	movs	r3, #0
 80059ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059b0:	e7f7      	b.n	80059a2 <_Balloc+0x66>
 80059b2:	bf00      	nop
 80059b4:	08006f75 	.word	0x08006f75
 80059b8:	08007058 	.word	0x08007058

080059bc <_Bfree>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059c0:	4605      	mov	r5, r0
 80059c2:	460c      	mov	r4, r1
 80059c4:	b976      	cbnz	r6, 80059e4 <_Bfree+0x28>
 80059c6:	2010      	movs	r0, #16
 80059c8:	f7ff ffa2 	bl	8005910 <malloc>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6268      	str	r0, [r5, #36]	; 0x24
 80059d0:	b920      	cbnz	r0, 80059dc <_Bfree+0x20>
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <_Bfree+0x3c>)
 80059d4:	4809      	ldr	r0, [pc, #36]	; (80059fc <_Bfree+0x40>)
 80059d6:	218a      	movs	r1, #138	; 0x8a
 80059d8:	f001 f806 	bl	80069e8 <__assert_func>
 80059dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059e0:	6006      	str	r6, [r0, #0]
 80059e2:	60c6      	str	r6, [r0, #12]
 80059e4:	b13c      	cbz	r4, 80059f6 <_Bfree+0x3a>
 80059e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059e8:	6862      	ldr	r2, [r4, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059f0:	6021      	str	r1, [r4, #0]
 80059f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	08006f75 	.word	0x08006f75
 80059fc:	08007058 	.word	0x08007058

08005a00 <__multadd>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	690d      	ldr	r5, [r1, #16]
 8005a06:	4607      	mov	r7, r0
 8005a08:	460c      	mov	r4, r1
 8005a0a:	461e      	mov	r6, r3
 8005a0c:	f101 0c14 	add.w	ip, r1, #20
 8005a10:	2000      	movs	r0, #0
 8005a12:	f8dc 3000 	ldr.w	r3, [ip]
 8005a16:	b299      	uxth	r1, r3
 8005a18:	fb02 6101 	mla	r1, r2, r1, r6
 8005a1c:	0c1e      	lsrs	r6, r3, #16
 8005a1e:	0c0b      	lsrs	r3, r1, #16
 8005a20:	fb02 3306 	mla	r3, r2, r6, r3
 8005a24:	b289      	uxth	r1, r1
 8005a26:	3001      	adds	r0, #1
 8005a28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a2c:	4285      	cmp	r5, r0
 8005a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a36:	dcec      	bgt.n	8005a12 <__multadd+0x12>
 8005a38:	b30e      	cbz	r6, 8005a7e <__multadd+0x7e>
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	42ab      	cmp	r3, r5
 8005a3e:	dc19      	bgt.n	8005a74 <__multadd+0x74>
 8005a40:	6861      	ldr	r1, [r4, #4]
 8005a42:	4638      	mov	r0, r7
 8005a44:	3101      	adds	r1, #1
 8005a46:	f7ff ff79 	bl	800593c <_Balloc>
 8005a4a:	4680      	mov	r8, r0
 8005a4c:	b928      	cbnz	r0, 8005a5a <__multadd+0x5a>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <__multadd+0x84>)
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <__multadd+0x88>)
 8005a54:	21b5      	movs	r1, #181	; 0xb5
 8005a56:	f000 ffc7 	bl	80069e8 <__assert_func>
 8005a5a:	6922      	ldr	r2, [r4, #16]
 8005a5c:	3202      	adds	r2, #2
 8005a5e:	f104 010c 	add.w	r1, r4, #12
 8005a62:	0092      	lsls	r2, r2, #2
 8005a64:	300c      	adds	r0, #12
 8005a66:	f7ff ff5b 	bl	8005920 <memcpy>
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff ffa5 	bl	80059bc <_Bfree>
 8005a72:	4644      	mov	r4, r8
 8005a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a78:	3501      	adds	r5, #1
 8005a7a:	615e      	str	r6, [r3, #20]
 8005a7c:	6125      	str	r5, [r4, #16]
 8005a7e:	4620      	mov	r0, r4
 8005a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a84:	08006fe7 	.word	0x08006fe7
 8005a88:	08007058 	.word	0x08007058

08005a8c <__hi0bits>:
 8005a8c:	0c03      	lsrs	r3, r0, #16
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	b9d3      	cbnz	r3, 8005ac8 <__hi0bits+0x3c>
 8005a92:	0400      	lsls	r0, r0, #16
 8005a94:	2310      	movs	r3, #16
 8005a96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a9a:	bf04      	itt	eq
 8005a9c:	0200      	lsleq	r0, r0, #8
 8005a9e:	3308      	addeq	r3, #8
 8005aa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005aa4:	bf04      	itt	eq
 8005aa6:	0100      	lsleq	r0, r0, #4
 8005aa8:	3304      	addeq	r3, #4
 8005aaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005aae:	bf04      	itt	eq
 8005ab0:	0080      	lsleq	r0, r0, #2
 8005ab2:	3302      	addeq	r3, #2
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	db05      	blt.n	8005ac4 <__hi0bits+0x38>
 8005ab8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005abc:	f103 0301 	add.w	r3, r3, #1
 8005ac0:	bf08      	it	eq
 8005ac2:	2320      	moveq	r3, #32
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	4770      	bx	lr
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e7e4      	b.n	8005a96 <__hi0bits+0xa>

08005acc <__lo0bits>:
 8005acc:	6803      	ldr	r3, [r0, #0]
 8005ace:	f013 0207 	ands.w	r2, r3, #7
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	d00b      	beq.n	8005aee <__lo0bits+0x22>
 8005ad6:	07da      	lsls	r2, r3, #31
 8005ad8:	d423      	bmi.n	8005b22 <__lo0bits+0x56>
 8005ada:	0798      	lsls	r0, r3, #30
 8005adc:	bf49      	itett	mi
 8005ade:	085b      	lsrmi	r3, r3, #1
 8005ae0:	089b      	lsrpl	r3, r3, #2
 8005ae2:	2001      	movmi	r0, #1
 8005ae4:	600b      	strmi	r3, [r1, #0]
 8005ae6:	bf5c      	itt	pl
 8005ae8:	600b      	strpl	r3, [r1, #0]
 8005aea:	2002      	movpl	r0, #2
 8005aec:	4770      	bx	lr
 8005aee:	b298      	uxth	r0, r3
 8005af0:	b9a8      	cbnz	r0, 8005b1e <__lo0bits+0x52>
 8005af2:	0c1b      	lsrs	r3, r3, #16
 8005af4:	2010      	movs	r0, #16
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	b90a      	cbnz	r2, 8005afe <__lo0bits+0x32>
 8005afa:	3008      	adds	r0, #8
 8005afc:	0a1b      	lsrs	r3, r3, #8
 8005afe:	071a      	lsls	r2, r3, #28
 8005b00:	bf04      	itt	eq
 8005b02:	091b      	lsreq	r3, r3, #4
 8005b04:	3004      	addeq	r0, #4
 8005b06:	079a      	lsls	r2, r3, #30
 8005b08:	bf04      	itt	eq
 8005b0a:	089b      	lsreq	r3, r3, #2
 8005b0c:	3002      	addeq	r0, #2
 8005b0e:	07da      	lsls	r2, r3, #31
 8005b10:	d403      	bmi.n	8005b1a <__lo0bits+0x4e>
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	f100 0001 	add.w	r0, r0, #1
 8005b18:	d005      	beq.n	8005b26 <__lo0bits+0x5a>
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	4770      	bx	lr
 8005b1e:	4610      	mov	r0, r2
 8005b20:	e7e9      	b.n	8005af6 <__lo0bits+0x2a>
 8005b22:	2000      	movs	r0, #0
 8005b24:	4770      	bx	lr
 8005b26:	2020      	movs	r0, #32
 8005b28:	4770      	bx	lr
	...

08005b2c <__i2b>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	460c      	mov	r4, r1
 8005b30:	2101      	movs	r1, #1
 8005b32:	f7ff ff03 	bl	800593c <_Balloc>
 8005b36:	4602      	mov	r2, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__i2b+0x1a>
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <__i2b+0x24>)
 8005b3c:	4805      	ldr	r0, [pc, #20]	; (8005b54 <__i2b+0x28>)
 8005b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b42:	f000 ff51 	bl	80069e8 <__assert_func>
 8005b46:	2301      	movs	r3, #1
 8005b48:	6144      	str	r4, [r0, #20]
 8005b4a:	6103      	str	r3, [r0, #16]
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	08006fe7 	.word	0x08006fe7
 8005b54:	08007058 	.word	0x08007058

08005b58 <__multiply>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	4691      	mov	r9, r2
 8005b5e:	690a      	ldr	r2, [r1, #16]
 8005b60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfb8      	it	lt
 8005b68:	460b      	movlt	r3, r1
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	bfbc      	itt	lt
 8005b6e:	464c      	movlt	r4, r9
 8005b70:	4699      	movlt	r9, r3
 8005b72:	6927      	ldr	r7, [r4, #16]
 8005b74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	6861      	ldr	r1, [r4, #4]
 8005b7c:	eb07 060a 	add.w	r6, r7, sl
 8005b80:	42b3      	cmp	r3, r6
 8005b82:	b085      	sub	sp, #20
 8005b84:	bfb8      	it	lt
 8005b86:	3101      	addlt	r1, #1
 8005b88:	f7ff fed8 	bl	800593c <_Balloc>
 8005b8c:	b930      	cbnz	r0, 8005b9c <__multiply+0x44>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4b44      	ldr	r3, [pc, #272]	; (8005ca4 <__multiply+0x14c>)
 8005b92:	4845      	ldr	r0, [pc, #276]	; (8005ca8 <__multiply+0x150>)
 8005b94:	f240 115d 	movw	r1, #349	; 0x15d
 8005b98:	f000 ff26 	bl	80069e8 <__assert_func>
 8005b9c:	f100 0514 	add.w	r5, r0, #20
 8005ba0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4543      	cmp	r3, r8
 8005baa:	d321      	bcc.n	8005bf0 <__multiply+0x98>
 8005bac:	f104 0314 	add.w	r3, r4, #20
 8005bb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005bb4:	f109 0314 	add.w	r3, r9, #20
 8005bb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005bbc:	9202      	str	r2, [sp, #8]
 8005bbe:	1b3a      	subs	r2, r7, r4
 8005bc0:	3a15      	subs	r2, #21
 8005bc2:	f022 0203 	bic.w	r2, r2, #3
 8005bc6:	3204      	adds	r2, #4
 8005bc8:	f104 0115 	add.w	r1, r4, #21
 8005bcc:	428f      	cmp	r7, r1
 8005bce:	bf38      	it	cc
 8005bd0:	2204      	movcc	r2, #4
 8005bd2:	9201      	str	r2, [sp, #4]
 8005bd4:	9a02      	ldr	r2, [sp, #8]
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d80c      	bhi.n	8005bf6 <__multiply+0x9e>
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	dd03      	ble.n	8005be8 <__multiply+0x90>
 8005be0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05a      	beq.n	8005c9e <__multiply+0x146>
 8005be8:	6106      	str	r6, [r0, #16]
 8005bea:	b005      	add	sp, #20
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	f843 2b04 	str.w	r2, [r3], #4
 8005bf4:	e7d8      	b.n	8005ba8 <__multiply+0x50>
 8005bf6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bfa:	f1ba 0f00 	cmp.w	sl, #0
 8005bfe:	d024      	beq.n	8005c4a <__multiply+0xf2>
 8005c00:	f104 0e14 	add.w	lr, r4, #20
 8005c04:	46a9      	mov	r9, r5
 8005c06:	f04f 0c00 	mov.w	ip, #0
 8005c0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c0e:	f8d9 1000 	ldr.w	r1, [r9]
 8005c12:	fa1f fb82 	uxth.w	fp, r2
 8005c16:	b289      	uxth	r1, r1
 8005c18:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c20:	f8d9 2000 	ldr.w	r2, [r9]
 8005c24:	4461      	add	r1, ip
 8005c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005c2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c32:	b289      	uxth	r1, r1
 8005c34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c38:	4577      	cmp	r7, lr
 8005c3a:	f849 1b04 	str.w	r1, [r9], #4
 8005c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c42:	d8e2      	bhi.n	8005c0a <__multiply+0xb2>
 8005c44:	9a01      	ldr	r2, [sp, #4]
 8005c46:	f845 c002 	str.w	ip, [r5, r2]
 8005c4a:	9a03      	ldr	r2, [sp, #12]
 8005c4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c50:	3304      	adds	r3, #4
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	d020      	beq.n	8005c9a <__multiply+0x142>
 8005c58:	6829      	ldr	r1, [r5, #0]
 8005c5a:	f104 0c14 	add.w	ip, r4, #20
 8005c5e:	46ae      	mov	lr, r5
 8005c60:	f04f 0a00 	mov.w	sl, #0
 8005c64:	f8bc b000 	ldrh.w	fp, [ip]
 8005c68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c6c:	fb09 220b 	mla	r2, r9, fp, r2
 8005c70:	4492      	add	sl, r2
 8005c72:	b289      	uxth	r1, r1
 8005c74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005c78:	f84e 1b04 	str.w	r1, [lr], #4
 8005c7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c80:	f8be 1000 	ldrh.w	r1, [lr]
 8005c84:	0c12      	lsrs	r2, r2, #16
 8005c86:	fb09 1102 	mla	r1, r9, r2, r1
 8005c8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005c8e:	4567      	cmp	r7, ip
 8005c90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c94:	d8e6      	bhi.n	8005c64 <__multiply+0x10c>
 8005c96:	9a01      	ldr	r2, [sp, #4]
 8005c98:	50a9      	str	r1, [r5, r2]
 8005c9a:	3504      	adds	r5, #4
 8005c9c:	e79a      	b.n	8005bd4 <__multiply+0x7c>
 8005c9e:	3e01      	subs	r6, #1
 8005ca0:	e79c      	b.n	8005bdc <__multiply+0x84>
 8005ca2:	bf00      	nop
 8005ca4:	08006fe7 	.word	0x08006fe7
 8005ca8:	08007058 	.word	0x08007058

08005cac <__pow5mult>:
 8005cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	f012 0203 	ands.w	r2, r2, #3
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460f      	mov	r7, r1
 8005cba:	d007      	beq.n	8005ccc <__pow5mult+0x20>
 8005cbc:	4c25      	ldr	r4, [pc, #148]	; (8005d54 <__pow5mult+0xa8>)
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005cc6:	f7ff fe9b 	bl	8005a00 <__multadd>
 8005cca:	4607      	mov	r7, r0
 8005ccc:	10ad      	asrs	r5, r5, #2
 8005cce:	d03d      	beq.n	8005d4c <__pow5mult+0xa0>
 8005cd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cd2:	b97c      	cbnz	r4, 8005cf4 <__pow5mult+0x48>
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f7ff fe1b 	bl	8005910 <malloc>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6270      	str	r0, [r6, #36]	; 0x24
 8005cde:	b928      	cbnz	r0, 8005cec <__pow5mult+0x40>
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <__pow5mult+0xac>)
 8005ce2:	481e      	ldr	r0, [pc, #120]	; (8005d5c <__pow5mult+0xb0>)
 8005ce4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ce8:	f000 fe7e 	bl	80069e8 <__assert_func>
 8005cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cf0:	6004      	str	r4, [r0, #0]
 8005cf2:	60c4      	str	r4, [r0, #12]
 8005cf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cfc:	b94c      	cbnz	r4, 8005d12 <__pow5mult+0x66>
 8005cfe:	f240 2171 	movw	r1, #625	; 0x271
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ff12 	bl	8005b2c <__i2b>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d0e:	4604      	mov	r4, r0
 8005d10:	6003      	str	r3, [r0, #0]
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	07eb      	lsls	r3, r5, #31
 8005d18:	d50a      	bpl.n	8005d30 <__pow5mult+0x84>
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f7ff ff1a 	bl	8005b58 <__multiply>
 8005d24:	4639      	mov	r1, r7
 8005d26:	4680      	mov	r8, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff fe47 	bl	80059bc <_Bfree>
 8005d2e:	4647      	mov	r7, r8
 8005d30:	106d      	asrs	r5, r5, #1
 8005d32:	d00b      	beq.n	8005d4c <__pow5mult+0xa0>
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	b938      	cbnz	r0, 8005d48 <__pow5mult+0x9c>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff ff0b 	bl	8005b58 <__multiply>
 8005d42:	6020      	str	r0, [r4, #0]
 8005d44:	f8c0 9000 	str.w	r9, [r0]
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e7e4      	b.n	8005d16 <__pow5mult+0x6a>
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d52:	bf00      	nop
 8005d54:	080071a8 	.word	0x080071a8
 8005d58:	08006f75 	.word	0x08006f75
 8005d5c:	08007058 	.word	0x08007058

08005d60 <__lshift>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	460c      	mov	r4, r1
 8005d66:	6849      	ldr	r1, [r1, #4]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d6e:	68a3      	ldr	r3, [r4, #8]
 8005d70:	4607      	mov	r7, r0
 8005d72:	4691      	mov	r9, r2
 8005d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d78:	f108 0601 	add.w	r6, r8, #1
 8005d7c:	42b3      	cmp	r3, r6
 8005d7e:	db0b      	blt.n	8005d98 <__lshift+0x38>
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7ff fddb 	bl	800593c <_Balloc>
 8005d86:	4605      	mov	r5, r0
 8005d88:	b948      	cbnz	r0, 8005d9e <__lshift+0x3e>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <__lshift+0xd8>)
 8005d8e:	482b      	ldr	r0, [pc, #172]	; (8005e3c <__lshift+0xdc>)
 8005d90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d94:	f000 fe28 	bl	80069e8 <__assert_func>
 8005d98:	3101      	adds	r1, #1
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	e7ee      	b.n	8005d7c <__lshift+0x1c>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f100 0114 	add.w	r1, r0, #20
 8005da4:	f100 0210 	add.w	r2, r0, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	4553      	cmp	r3, sl
 8005dac:	db37      	blt.n	8005e1e <__lshift+0xbe>
 8005dae:	6920      	ldr	r0, [r4, #16]
 8005db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005db4:	f104 0314 	add.w	r3, r4, #20
 8005db8:	f019 091f 	ands.w	r9, r9, #31
 8005dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005dc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005dc4:	d02f      	beq.n	8005e26 <__lshift+0xc6>
 8005dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8005dca:	468a      	mov	sl, r1
 8005dcc:	f04f 0c00 	mov.w	ip, #0
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	fa02 f209 	lsl.w	r2, r2, r9
 8005dd6:	ea42 020c 	orr.w	r2, r2, ip
 8005dda:	f84a 2b04 	str.w	r2, [sl], #4
 8005dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de2:	4298      	cmp	r0, r3
 8005de4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005de8:	d8f2      	bhi.n	8005dd0 <__lshift+0x70>
 8005dea:	1b03      	subs	r3, r0, r4
 8005dec:	3b15      	subs	r3, #21
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	3304      	adds	r3, #4
 8005df4:	f104 0215 	add.w	r2, r4, #21
 8005df8:	4290      	cmp	r0, r2
 8005dfa:	bf38      	it	cc
 8005dfc:	2304      	movcc	r3, #4
 8005dfe:	f841 c003 	str.w	ip, [r1, r3]
 8005e02:	f1bc 0f00 	cmp.w	ip, #0
 8005e06:	d001      	beq.n	8005e0c <__lshift+0xac>
 8005e08:	f108 0602 	add.w	r6, r8, #2
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	4638      	mov	r0, r7
 8005e10:	612e      	str	r6, [r5, #16]
 8005e12:	4621      	mov	r1, r4
 8005e14:	f7ff fdd2 	bl	80059bc <_Bfree>
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e22:	3301      	adds	r3, #1
 8005e24:	e7c1      	b.n	8005daa <__lshift+0x4a>
 8005e26:	3904      	subs	r1, #4
 8005e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e30:	4298      	cmp	r0, r3
 8005e32:	d8f9      	bhi.n	8005e28 <__lshift+0xc8>
 8005e34:	e7ea      	b.n	8005e0c <__lshift+0xac>
 8005e36:	bf00      	nop
 8005e38:	08006fe7 	.word	0x08006fe7
 8005e3c:	08007058 	.word	0x08007058

08005e40 <__mcmp>:
 8005e40:	b530      	push	{r4, r5, lr}
 8005e42:	6902      	ldr	r2, [r0, #16]
 8005e44:	690c      	ldr	r4, [r1, #16]
 8005e46:	1b12      	subs	r2, r2, r4
 8005e48:	d10e      	bne.n	8005e68 <__mcmp+0x28>
 8005e4a:	f100 0314 	add.w	r3, r0, #20
 8005e4e:	3114      	adds	r1, #20
 8005e50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e60:	42a5      	cmp	r5, r4
 8005e62:	d003      	beq.n	8005e6c <__mcmp+0x2c>
 8005e64:	d305      	bcc.n	8005e72 <__mcmp+0x32>
 8005e66:	2201      	movs	r2, #1
 8005e68:	4610      	mov	r0, r2
 8005e6a:	bd30      	pop	{r4, r5, pc}
 8005e6c:	4283      	cmp	r3, r0
 8005e6e:	d3f3      	bcc.n	8005e58 <__mcmp+0x18>
 8005e70:	e7fa      	b.n	8005e68 <__mcmp+0x28>
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	e7f7      	b.n	8005e68 <__mcmp+0x28>

08005e78 <__mdiff>:
 8005e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	4606      	mov	r6, r0
 8005e80:	4611      	mov	r1, r2
 8005e82:	4620      	mov	r0, r4
 8005e84:	4690      	mov	r8, r2
 8005e86:	f7ff ffdb 	bl	8005e40 <__mcmp>
 8005e8a:	1e05      	subs	r5, r0, #0
 8005e8c:	d110      	bne.n	8005eb0 <__mdiff+0x38>
 8005e8e:	4629      	mov	r1, r5
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff fd53 	bl	800593c <_Balloc>
 8005e96:	b930      	cbnz	r0, 8005ea6 <__mdiff+0x2e>
 8005e98:	4b3a      	ldr	r3, [pc, #232]	; (8005f84 <__mdiff+0x10c>)
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	f240 2132 	movw	r1, #562	; 0x232
 8005ea0:	4839      	ldr	r0, [pc, #228]	; (8005f88 <__mdiff+0x110>)
 8005ea2:	f000 fda1 	bl	80069e8 <__assert_func>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005eac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	bfa4      	itt	ge
 8005eb2:	4643      	movge	r3, r8
 8005eb4:	46a0      	movge	r8, r4
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ebc:	bfa6      	itte	ge
 8005ebe:	461c      	movge	r4, r3
 8005ec0:	2500      	movge	r5, #0
 8005ec2:	2501      	movlt	r5, #1
 8005ec4:	f7ff fd3a 	bl	800593c <_Balloc>
 8005ec8:	b920      	cbnz	r0, 8005ed4 <__mdiff+0x5c>
 8005eca:	4b2e      	ldr	r3, [pc, #184]	; (8005f84 <__mdiff+0x10c>)
 8005ecc:	4602      	mov	r2, r0
 8005ece:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ed2:	e7e5      	b.n	8005ea0 <__mdiff+0x28>
 8005ed4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ed8:	6926      	ldr	r6, [r4, #16]
 8005eda:	60c5      	str	r5, [r0, #12]
 8005edc:	f104 0914 	add.w	r9, r4, #20
 8005ee0:	f108 0514 	add.w	r5, r8, #20
 8005ee4:	f100 0e14 	add.w	lr, r0, #20
 8005ee8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005eec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ef0:	f108 0210 	add.w	r2, r8, #16
 8005ef4:	46f2      	mov	sl, lr
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005efc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f00:	fa1f f883 	uxth.w	r8, r3
 8005f04:	fa11 f18b 	uxtah	r1, r1, fp
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	eba1 0808 	sub.w	r8, r1, r8
 8005f0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f16:	fa1f f888 	uxth.w	r8, r8
 8005f1a:	1419      	asrs	r1, r3, #16
 8005f1c:	454e      	cmp	r6, r9
 8005f1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f22:	f84a 3b04 	str.w	r3, [sl], #4
 8005f26:	d8e7      	bhi.n	8005ef8 <__mdiff+0x80>
 8005f28:	1b33      	subs	r3, r6, r4
 8005f2a:	3b15      	subs	r3, #21
 8005f2c:	f023 0303 	bic.w	r3, r3, #3
 8005f30:	3304      	adds	r3, #4
 8005f32:	3415      	adds	r4, #21
 8005f34:	42a6      	cmp	r6, r4
 8005f36:	bf38      	it	cc
 8005f38:	2304      	movcc	r3, #4
 8005f3a:	441d      	add	r5, r3
 8005f3c:	4473      	add	r3, lr
 8005f3e:	469e      	mov	lr, r3
 8005f40:	462e      	mov	r6, r5
 8005f42:	4566      	cmp	r6, ip
 8005f44:	d30e      	bcc.n	8005f64 <__mdiff+0xec>
 8005f46:	f10c 0203 	add.w	r2, ip, #3
 8005f4a:	1b52      	subs	r2, r2, r5
 8005f4c:	f022 0203 	bic.w	r2, r2, #3
 8005f50:	3d03      	subs	r5, #3
 8005f52:	45ac      	cmp	ip, r5
 8005f54:	bf38      	it	cc
 8005f56:	2200      	movcc	r2, #0
 8005f58:	441a      	add	r2, r3
 8005f5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005f5e:	b17b      	cbz	r3, 8005f80 <__mdiff+0x108>
 8005f60:	6107      	str	r7, [r0, #16]
 8005f62:	e7a3      	b.n	8005eac <__mdiff+0x34>
 8005f64:	f856 8b04 	ldr.w	r8, [r6], #4
 8005f68:	fa11 f288 	uxtah	r2, r1, r8
 8005f6c:	1414      	asrs	r4, r2, #16
 8005f6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f72:	b292      	uxth	r2, r2
 8005f74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005f78:	f84e 2b04 	str.w	r2, [lr], #4
 8005f7c:	1421      	asrs	r1, r4, #16
 8005f7e:	e7e0      	b.n	8005f42 <__mdiff+0xca>
 8005f80:	3f01      	subs	r7, #1
 8005f82:	e7ea      	b.n	8005f5a <__mdiff+0xe2>
 8005f84:	08006fe7 	.word	0x08006fe7
 8005f88:	08007058 	.word	0x08007058

08005f8c <__d2b>:
 8005f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f90:	4689      	mov	r9, r1
 8005f92:	2101      	movs	r1, #1
 8005f94:	ec57 6b10 	vmov	r6, r7, d0
 8005f98:	4690      	mov	r8, r2
 8005f9a:	f7ff fccf 	bl	800593c <_Balloc>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	b930      	cbnz	r0, 8005fb0 <__d2b+0x24>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b25      	ldr	r3, [pc, #148]	; (800603c <__d2b+0xb0>)
 8005fa6:	4826      	ldr	r0, [pc, #152]	; (8006040 <__d2b+0xb4>)
 8005fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8005fac:	f000 fd1c 	bl	80069e8 <__assert_func>
 8005fb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005fb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fb8:	bb35      	cbnz	r5, 8006008 <__d2b+0x7c>
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	d028      	beq.n	8006012 <__d2b+0x86>
 8005fc0:	4668      	mov	r0, sp
 8005fc2:	9600      	str	r6, [sp, #0]
 8005fc4:	f7ff fd82 	bl	8005acc <__lo0bits>
 8005fc8:	9900      	ldr	r1, [sp, #0]
 8005fca:	b300      	cbz	r0, 800600e <__d2b+0x82>
 8005fcc:	9a01      	ldr	r2, [sp, #4]
 8005fce:	f1c0 0320 	rsb	r3, r0, #32
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	40c2      	lsrs	r2, r0
 8005fda:	6163      	str	r3, [r4, #20]
 8005fdc:	9201      	str	r2, [sp, #4]
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	61a3      	str	r3, [r4, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bf14      	ite	ne
 8005fe6:	2202      	movne	r2, #2
 8005fe8:	2201      	moveq	r2, #1
 8005fea:	6122      	str	r2, [r4, #16]
 8005fec:	b1d5      	cbz	r5, 8006024 <__d2b+0x98>
 8005fee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ff2:	4405      	add	r5, r0
 8005ff4:	f8c9 5000 	str.w	r5, [r9]
 8005ff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ffc:	f8c8 0000 	str.w	r0, [r8]
 8006000:	4620      	mov	r0, r4
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800600c:	e7d5      	b.n	8005fba <__d2b+0x2e>
 800600e:	6161      	str	r1, [r4, #20]
 8006010:	e7e5      	b.n	8005fde <__d2b+0x52>
 8006012:	a801      	add	r0, sp, #4
 8006014:	f7ff fd5a 	bl	8005acc <__lo0bits>
 8006018:	9b01      	ldr	r3, [sp, #4]
 800601a:	6163      	str	r3, [r4, #20]
 800601c:	2201      	movs	r2, #1
 800601e:	6122      	str	r2, [r4, #16]
 8006020:	3020      	adds	r0, #32
 8006022:	e7e3      	b.n	8005fec <__d2b+0x60>
 8006024:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800602c:	f8c9 0000 	str.w	r0, [r9]
 8006030:	6918      	ldr	r0, [r3, #16]
 8006032:	f7ff fd2b 	bl	8005a8c <__hi0bits>
 8006036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800603a:	e7df      	b.n	8005ffc <__d2b+0x70>
 800603c:	08006fe7 	.word	0x08006fe7
 8006040:	08007058 	.word	0x08007058

08006044 <_calloc_r>:
 8006044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006046:	fba1 2402 	umull	r2, r4, r1, r2
 800604a:	b94c      	cbnz	r4, 8006060 <_calloc_r+0x1c>
 800604c:	4611      	mov	r1, r2
 800604e:	9201      	str	r2, [sp, #4]
 8006050:	f000 f87a 	bl	8006148 <_malloc_r>
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	4605      	mov	r5, r0
 8006058:	b930      	cbnz	r0, 8006068 <_calloc_r+0x24>
 800605a:	4628      	mov	r0, r5
 800605c:	b003      	add	sp, #12
 800605e:	bd30      	pop	{r4, r5, pc}
 8006060:	220c      	movs	r2, #12
 8006062:	6002      	str	r2, [r0, #0]
 8006064:	2500      	movs	r5, #0
 8006066:	e7f8      	b.n	800605a <_calloc_r+0x16>
 8006068:	4621      	mov	r1, r4
 800606a:	f7fe f82f 	bl	80040cc <memset>
 800606e:	e7f4      	b.n	800605a <_calloc_r+0x16>

08006070 <_free_r>:
 8006070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006072:	2900      	cmp	r1, #0
 8006074:	d044      	beq.n	8006100 <_free_r+0x90>
 8006076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607a:	9001      	str	r0, [sp, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f1a1 0404 	sub.w	r4, r1, #4
 8006082:	bfb8      	it	lt
 8006084:	18e4      	addlt	r4, r4, r3
 8006086:	f000 fe55 	bl	8006d34 <__malloc_lock>
 800608a:	4a1e      	ldr	r2, [pc, #120]	; (8006104 <_free_r+0x94>)
 800608c:	9801      	ldr	r0, [sp, #4]
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	b933      	cbnz	r3, 80060a0 <_free_r+0x30>
 8006092:	6063      	str	r3, [r4, #4]
 8006094:	6014      	str	r4, [r2, #0]
 8006096:	b003      	add	sp, #12
 8006098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800609c:	f000 be50 	b.w	8006d40 <__malloc_unlock>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d908      	bls.n	80060b6 <_free_r+0x46>
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1961      	adds	r1, r4, r5
 80060a8:	428b      	cmp	r3, r1
 80060aa:	bf01      	itttt	eq
 80060ac:	6819      	ldreq	r1, [r3, #0]
 80060ae:	685b      	ldreq	r3, [r3, #4]
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	e7ed      	b.n	8006092 <_free_r+0x22>
 80060b6:	461a      	mov	r2, r3
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b10b      	cbz	r3, 80060c0 <_free_r+0x50>
 80060bc:	42a3      	cmp	r3, r4
 80060be:	d9fa      	bls.n	80060b6 <_free_r+0x46>
 80060c0:	6811      	ldr	r1, [r2, #0]
 80060c2:	1855      	adds	r5, r2, r1
 80060c4:	42a5      	cmp	r5, r4
 80060c6:	d10b      	bne.n	80060e0 <_free_r+0x70>
 80060c8:	6824      	ldr	r4, [r4, #0]
 80060ca:	4421      	add	r1, r4
 80060cc:	1854      	adds	r4, r2, r1
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	6011      	str	r1, [r2, #0]
 80060d2:	d1e0      	bne.n	8006096 <_free_r+0x26>
 80060d4:	681c      	ldr	r4, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	4421      	add	r1, r4
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	e7da      	b.n	8006096 <_free_r+0x26>
 80060e0:	d902      	bls.n	80060e8 <_free_r+0x78>
 80060e2:	230c      	movs	r3, #12
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	e7d6      	b.n	8006096 <_free_r+0x26>
 80060e8:	6825      	ldr	r5, [r4, #0]
 80060ea:	1961      	adds	r1, r4, r5
 80060ec:	428b      	cmp	r3, r1
 80060ee:	bf04      	itt	eq
 80060f0:	6819      	ldreq	r1, [r3, #0]
 80060f2:	685b      	ldreq	r3, [r3, #4]
 80060f4:	6063      	str	r3, [r4, #4]
 80060f6:	bf04      	itt	eq
 80060f8:	1949      	addeq	r1, r1, r5
 80060fa:	6021      	streq	r1, [r4, #0]
 80060fc:	6054      	str	r4, [r2, #4]
 80060fe:	e7ca      	b.n	8006096 <_free_r+0x26>
 8006100:	b003      	add	sp, #12
 8006102:	bd30      	pop	{r4, r5, pc}
 8006104:	20000394 	.word	0x20000394

08006108 <sbrk_aligned>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4e0e      	ldr	r6, [pc, #56]	; (8006144 <sbrk_aligned+0x3c>)
 800610c:	460c      	mov	r4, r1
 800610e:	6831      	ldr	r1, [r6, #0]
 8006110:	4605      	mov	r5, r0
 8006112:	b911      	cbnz	r1, 800611a <sbrk_aligned+0x12>
 8006114:	f000 fb42 	bl	800679c <_sbrk_r>
 8006118:	6030      	str	r0, [r6, #0]
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 fb3d 	bl	800679c <_sbrk_r>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d00a      	beq.n	800613c <sbrk_aligned+0x34>
 8006126:	1cc4      	adds	r4, r0, #3
 8006128:	f024 0403 	bic.w	r4, r4, #3
 800612c:	42a0      	cmp	r0, r4
 800612e:	d007      	beq.n	8006140 <sbrk_aligned+0x38>
 8006130:	1a21      	subs	r1, r4, r0
 8006132:	4628      	mov	r0, r5
 8006134:	f000 fb32 	bl	800679c <_sbrk_r>
 8006138:	3001      	adds	r0, #1
 800613a:	d101      	bne.n	8006140 <sbrk_aligned+0x38>
 800613c:	f04f 34ff 	mov.w	r4, #4294967295
 8006140:	4620      	mov	r0, r4
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	20000398 	.word	0x20000398

08006148 <_malloc_r>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	1ccd      	adds	r5, r1, #3
 800614e:	f025 0503 	bic.w	r5, r5, #3
 8006152:	3508      	adds	r5, #8
 8006154:	2d0c      	cmp	r5, #12
 8006156:	bf38      	it	cc
 8006158:	250c      	movcc	r5, #12
 800615a:	2d00      	cmp	r5, #0
 800615c:	4607      	mov	r7, r0
 800615e:	db01      	blt.n	8006164 <_malloc_r+0x1c>
 8006160:	42a9      	cmp	r1, r5
 8006162:	d905      	bls.n	8006170 <_malloc_r+0x28>
 8006164:	230c      	movs	r3, #12
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	2600      	movs	r6, #0
 800616a:	4630      	mov	r0, r6
 800616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006170:	4e2e      	ldr	r6, [pc, #184]	; (800622c <_malloc_r+0xe4>)
 8006172:	f000 fddf 	bl	8006d34 <__malloc_lock>
 8006176:	6833      	ldr	r3, [r6, #0]
 8006178:	461c      	mov	r4, r3
 800617a:	bb34      	cbnz	r4, 80061ca <_malloc_r+0x82>
 800617c:	4629      	mov	r1, r5
 800617e:	4638      	mov	r0, r7
 8006180:	f7ff ffc2 	bl	8006108 <sbrk_aligned>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	4604      	mov	r4, r0
 8006188:	d14d      	bne.n	8006226 <_malloc_r+0xde>
 800618a:	6834      	ldr	r4, [r6, #0]
 800618c:	4626      	mov	r6, r4
 800618e:	2e00      	cmp	r6, #0
 8006190:	d140      	bne.n	8006214 <_malloc_r+0xcc>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	4631      	mov	r1, r6
 8006196:	4638      	mov	r0, r7
 8006198:	eb04 0803 	add.w	r8, r4, r3
 800619c:	f000 fafe 	bl	800679c <_sbrk_r>
 80061a0:	4580      	cmp	r8, r0
 80061a2:	d13a      	bne.n	800621a <_malloc_r+0xd2>
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	3503      	adds	r5, #3
 80061a8:	1a6d      	subs	r5, r5, r1
 80061aa:	f025 0503 	bic.w	r5, r5, #3
 80061ae:	3508      	adds	r5, #8
 80061b0:	2d0c      	cmp	r5, #12
 80061b2:	bf38      	it	cc
 80061b4:	250c      	movcc	r5, #12
 80061b6:	4629      	mov	r1, r5
 80061b8:	4638      	mov	r0, r7
 80061ba:	f7ff ffa5 	bl	8006108 <sbrk_aligned>
 80061be:	3001      	adds	r0, #1
 80061c0:	d02b      	beq.n	800621a <_malloc_r+0xd2>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	442b      	add	r3, r5
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	e00e      	b.n	80061e8 <_malloc_r+0xa0>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	1b52      	subs	r2, r2, r5
 80061ce:	d41e      	bmi.n	800620e <_malloc_r+0xc6>
 80061d0:	2a0b      	cmp	r2, #11
 80061d2:	d916      	bls.n	8006202 <_malloc_r+0xba>
 80061d4:	1961      	adds	r1, r4, r5
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	6025      	str	r5, [r4, #0]
 80061da:	bf18      	it	ne
 80061dc:	6059      	strne	r1, [r3, #4]
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	bf08      	it	eq
 80061e2:	6031      	streq	r1, [r6, #0]
 80061e4:	5162      	str	r2, [r4, r5]
 80061e6:	604b      	str	r3, [r1, #4]
 80061e8:	4638      	mov	r0, r7
 80061ea:	f104 060b 	add.w	r6, r4, #11
 80061ee:	f000 fda7 	bl	8006d40 <__malloc_unlock>
 80061f2:	f026 0607 	bic.w	r6, r6, #7
 80061f6:	1d23      	adds	r3, r4, #4
 80061f8:	1af2      	subs	r2, r6, r3
 80061fa:	d0b6      	beq.n	800616a <_malloc_r+0x22>
 80061fc:	1b9b      	subs	r3, r3, r6
 80061fe:	50a3      	str	r3, [r4, r2]
 8006200:	e7b3      	b.n	800616a <_malloc_r+0x22>
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	42a3      	cmp	r3, r4
 8006206:	bf0c      	ite	eq
 8006208:	6032      	streq	r2, [r6, #0]
 800620a:	605a      	strne	r2, [r3, #4]
 800620c:	e7ec      	b.n	80061e8 <_malloc_r+0xa0>
 800620e:	4623      	mov	r3, r4
 8006210:	6864      	ldr	r4, [r4, #4]
 8006212:	e7b2      	b.n	800617a <_malloc_r+0x32>
 8006214:	4634      	mov	r4, r6
 8006216:	6876      	ldr	r6, [r6, #4]
 8006218:	e7b9      	b.n	800618e <_malloc_r+0x46>
 800621a:	230c      	movs	r3, #12
 800621c:	603b      	str	r3, [r7, #0]
 800621e:	4638      	mov	r0, r7
 8006220:	f000 fd8e 	bl	8006d40 <__malloc_unlock>
 8006224:	e7a1      	b.n	800616a <_malloc_r+0x22>
 8006226:	6025      	str	r5, [r4, #0]
 8006228:	e7de      	b.n	80061e8 <_malloc_r+0xa0>
 800622a:	bf00      	nop
 800622c:	20000394 	.word	0x20000394

08006230 <__ssputs_r>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	688e      	ldr	r6, [r1, #8]
 8006236:	429e      	cmp	r6, r3
 8006238:	4682      	mov	sl, r0
 800623a:	460c      	mov	r4, r1
 800623c:	4690      	mov	r8, r2
 800623e:	461f      	mov	r7, r3
 8006240:	d838      	bhi.n	80062b4 <__ssputs_r+0x84>
 8006242:	898a      	ldrh	r2, [r1, #12]
 8006244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006248:	d032      	beq.n	80062b0 <__ssputs_r+0x80>
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	6909      	ldr	r1, [r1, #16]
 800624e:	eba5 0901 	sub.w	r9, r5, r1
 8006252:	6965      	ldr	r5, [r4, #20]
 8006254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800625c:	3301      	adds	r3, #1
 800625e:	444b      	add	r3, r9
 8006260:	106d      	asrs	r5, r5, #1
 8006262:	429d      	cmp	r5, r3
 8006264:	bf38      	it	cc
 8006266:	461d      	movcc	r5, r3
 8006268:	0553      	lsls	r3, r2, #21
 800626a:	d531      	bpl.n	80062d0 <__ssputs_r+0xa0>
 800626c:	4629      	mov	r1, r5
 800626e:	f7ff ff6b 	bl	8006148 <_malloc_r>
 8006272:	4606      	mov	r6, r0
 8006274:	b950      	cbnz	r0, 800628c <__ssputs_r+0x5c>
 8006276:	230c      	movs	r3, #12
 8006278:	f8ca 3000 	str.w	r3, [sl]
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628c:	6921      	ldr	r1, [r4, #16]
 800628e:	464a      	mov	r2, r9
 8006290:	f7ff fb46 	bl	8005920 <memcpy>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	81a3      	strh	r3, [r4, #12]
 80062a0:	6126      	str	r6, [r4, #16]
 80062a2:	6165      	str	r5, [r4, #20]
 80062a4:	444e      	add	r6, r9
 80062a6:	eba5 0509 	sub.w	r5, r5, r9
 80062aa:	6026      	str	r6, [r4, #0]
 80062ac:	60a5      	str	r5, [r4, #8]
 80062ae:	463e      	mov	r6, r7
 80062b0:	42be      	cmp	r6, r7
 80062b2:	d900      	bls.n	80062b6 <__ssputs_r+0x86>
 80062b4:	463e      	mov	r6, r7
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	4632      	mov	r2, r6
 80062ba:	4641      	mov	r1, r8
 80062bc:	f000 fd20 	bl	8006d00 <memmove>
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	1b9b      	subs	r3, r3, r6
 80062c4:	60a3      	str	r3, [r4, #8]
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	4433      	add	r3, r6
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	2000      	movs	r0, #0
 80062ce:	e7db      	b.n	8006288 <__ssputs_r+0x58>
 80062d0:	462a      	mov	r2, r5
 80062d2:	f000 fd3b 	bl	8006d4c <_realloc_r>
 80062d6:	4606      	mov	r6, r0
 80062d8:	2800      	cmp	r0, #0
 80062da:	d1e1      	bne.n	80062a0 <__ssputs_r+0x70>
 80062dc:	6921      	ldr	r1, [r4, #16]
 80062de:	4650      	mov	r0, sl
 80062e0:	f7ff fec6 	bl	8006070 <_free_r>
 80062e4:	e7c7      	b.n	8006276 <__ssputs_r+0x46>
	...

080062e8 <_svfiprintf_r>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	4698      	mov	r8, r3
 80062ee:	898b      	ldrh	r3, [r1, #12]
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	b09d      	sub	sp, #116	; 0x74
 80062f4:	4607      	mov	r7, r0
 80062f6:	460d      	mov	r5, r1
 80062f8:	4614      	mov	r4, r2
 80062fa:	d50e      	bpl.n	800631a <_svfiprintf_r+0x32>
 80062fc:	690b      	ldr	r3, [r1, #16]
 80062fe:	b963      	cbnz	r3, 800631a <_svfiprintf_r+0x32>
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	f7ff ff21 	bl	8006148 <_malloc_r>
 8006306:	6028      	str	r0, [r5, #0]
 8006308:	6128      	str	r0, [r5, #16]
 800630a:	b920      	cbnz	r0, 8006316 <_svfiprintf_r+0x2e>
 800630c:	230c      	movs	r3, #12
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	e0d1      	b.n	80064ba <_svfiprintf_r+0x1d2>
 8006316:	2340      	movs	r3, #64	; 0x40
 8006318:	616b      	str	r3, [r5, #20]
 800631a:	2300      	movs	r3, #0
 800631c:	9309      	str	r3, [sp, #36]	; 0x24
 800631e:	2320      	movs	r3, #32
 8006320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006324:	f8cd 800c 	str.w	r8, [sp, #12]
 8006328:	2330      	movs	r3, #48	; 0x30
 800632a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80064d4 <_svfiprintf_r+0x1ec>
 800632e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006332:	f04f 0901 	mov.w	r9, #1
 8006336:	4623      	mov	r3, r4
 8006338:	469a      	mov	sl, r3
 800633a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800633e:	b10a      	cbz	r2, 8006344 <_svfiprintf_r+0x5c>
 8006340:	2a25      	cmp	r2, #37	; 0x25
 8006342:	d1f9      	bne.n	8006338 <_svfiprintf_r+0x50>
 8006344:	ebba 0b04 	subs.w	fp, sl, r4
 8006348:	d00b      	beq.n	8006362 <_svfiprintf_r+0x7a>
 800634a:	465b      	mov	r3, fp
 800634c:	4622      	mov	r2, r4
 800634e:	4629      	mov	r1, r5
 8006350:	4638      	mov	r0, r7
 8006352:	f7ff ff6d 	bl	8006230 <__ssputs_r>
 8006356:	3001      	adds	r0, #1
 8006358:	f000 80aa 	beq.w	80064b0 <_svfiprintf_r+0x1c8>
 800635c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800635e:	445a      	add	r2, fp
 8006360:	9209      	str	r2, [sp, #36]	; 0x24
 8006362:	f89a 3000 	ldrb.w	r3, [sl]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80a2 	beq.w	80064b0 <_svfiprintf_r+0x1c8>
 800636c:	2300      	movs	r3, #0
 800636e:	f04f 32ff 	mov.w	r2, #4294967295
 8006372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006376:	f10a 0a01 	add.w	sl, sl, #1
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006382:	931a      	str	r3, [sp, #104]	; 0x68
 8006384:	4654      	mov	r4, sl
 8006386:	2205      	movs	r2, #5
 8006388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638c:	4851      	ldr	r0, [pc, #324]	; (80064d4 <_svfiprintf_r+0x1ec>)
 800638e:	f7f9 ff37 	bl	8000200 <memchr>
 8006392:	9a04      	ldr	r2, [sp, #16]
 8006394:	b9d8      	cbnz	r0, 80063ce <_svfiprintf_r+0xe6>
 8006396:	06d0      	lsls	r0, r2, #27
 8006398:	bf44      	itt	mi
 800639a:	2320      	movmi	r3, #32
 800639c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a0:	0711      	lsls	r1, r2, #28
 80063a2:	bf44      	itt	mi
 80063a4:	232b      	movmi	r3, #43	; 0x2b
 80063a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063aa:	f89a 3000 	ldrb.w	r3, [sl]
 80063ae:	2b2a      	cmp	r3, #42	; 0x2a
 80063b0:	d015      	beq.n	80063de <_svfiprintf_r+0xf6>
 80063b2:	9a07      	ldr	r2, [sp, #28]
 80063b4:	4654      	mov	r4, sl
 80063b6:	2000      	movs	r0, #0
 80063b8:	f04f 0c0a 	mov.w	ip, #10
 80063bc:	4621      	mov	r1, r4
 80063be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063c2:	3b30      	subs	r3, #48	; 0x30
 80063c4:	2b09      	cmp	r3, #9
 80063c6:	d94e      	bls.n	8006466 <_svfiprintf_r+0x17e>
 80063c8:	b1b0      	cbz	r0, 80063f8 <_svfiprintf_r+0x110>
 80063ca:	9207      	str	r2, [sp, #28]
 80063cc:	e014      	b.n	80063f8 <_svfiprintf_r+0x110>
 80063ce:	eba0 0308 	sub.w	r3, r0, r8
 80063d2:	fa09 f303 	lsl.w	r3, r9, r3
 80063d6:	4313      	orrs	r3, r2
 80063d8:	9304      	str	r3, [sp, #16]
 80063da:	46a2      	mov	sl, r4
 80063dc:	e7d2      	b.n	8006384 <_svfiprintf_r+0x9c>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	1d19      	adds	r1, r3, #4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	9103      	str	r1, [sp, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bfbb      	ittet	lt
 80063ea:	425b      	neglt	r3, r3
 80063ec:	f042 0202 	orrlt.w	r2, r2, #2
 80063f0:	9307      	strge	r3, [sp, #28]
 80063f2:	9307      	strlt	r3, [sp, #28]
 80063f4:	bfb8      	it	lt
 80063f6:	9204      	strlt	r2, [sp, #16]
 80063f8:	7823      	ldrb	r3, [r4, #0]
 80063fa:	2b2e      	cmp	r3, #46	; 0x2e
 80063fc:	d10c      	bne.n	8006418 <_svfiprintf_r+0x130>
 80063fe:	7863      	ldrb	r3, [r4, #1]
 8006400:	2b2a      	cmp	r3, #42	; 0x2a
 8006402:	d135      	bne.n	8006470 <_svfiprintf_r+0x188>
 8006404:	9b03      	ldr	r3, [sp, #12]
 8006406:	1d1a      	adds	r2, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	9203      	str	r2, [sp, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfb8      	it	lt
 8006410:	f04f 33ff 	movlt.w	r3, #4294967295
 8006414:	3402      	adds	r4, #2
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064e4 <_svfiprintf_r+0x1fc>
 800641c:	7821      	ldrb	r1, [r4, #0]
 800641e:	2203      	movs	r2, #3
 8006420:	4650      	mov	r0, sl
 8006422:	f7f9 feed 	bl	8000200 <memchr>
 8006426:	b140      	cbz	r0, 800643a <_svfiprintf_r+0x152>
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	eba0 000a 	sub.w	r0, r0, sl
 800642e:	fa03 f000 	lsl.w	r0, r3, r0
 8006432:	9b04      	ldr	r3, [sp, #16]
 8006434:	4303      	orrs	r3, r0
 8006436:	3401      	adds	r4, #1
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800643e:	4826      	ldr	r0, [pc, #152]	; (80064d8 <_svfiprintf_r+0x1f0>)
 8006440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006444:	2206      	movs	r2, #6
 8006446:	f7f9 fedb 	bl	8000200 <memchr>
 800644a:	2800      	cmp	r0, #0
 800644c:	d038      	beq.n	80064c0 <_svfiprintf_r+0x1d8>
 800644e:	4b23      	ldr	r3, [pc, #140]	; (80064dc <_svfiprintf_r+0x1f4>)
 8006450:	bb1b      	cbnz	r3, 800649a <_svfiprintf_r+0x1b2>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	3307      	adds	r3, #7
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	3308      	adds	r3, #8
 800645c:	9303      	str	r3, [sp, #12]
 800645e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006460:	4433      	add	r3, r6
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	e767      	b.n	8006336 <_svfiprintf_r+0x4e>
 8006466:	fb0c 3202 	mla	r2, ip, r2, r3
 800646a:	460c      	mov	r4, r1
 800646c:	2001      	movs	r0, #1
 800646e:	e7a5      	b.n	80063bc <_svfiprintf_r+0xd4>
 8006470:	2300      	movs	r3, #0
 8006472:	3401      	adds	r4, #1
 8006474:	9305      	str	r3, [sp, #20]
 8006476:	4619      	mov	r1, r3
 8006478:	f04f 0c0a 	mov.w	ip, #10
 800647c:	4620      	mov	r0, r4
 800647e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006482:	3a30      	subs	r2, #48	; 0x30
 8006484:	2a09      	cmp	r2, #9
 8006486:	d903      	bls.n	8006490 <_svfiprintf_r+0x1a8>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0c5      	beq.n	8006418 <_svfiprintf_r+0x130>
 800648c:	9105      	str	r1, [sp, #20]
 800648e:	e7c3      	b.n	8006418 <_svfiprintf_r+0x130>
 8006490:	fb0c 2101 	mla	r1, ip, r1, r2
 8006494:	4604      	mov	r4, r0
 8006496:	2301      	movs	r3, #1
 8006498:	e7f0      	b.n	800647c <_svfiprintf_r+0x194>
 800649a:	ab03      	add	r3, sp, #12
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	462a      	mov	r2, r5
 80064a0:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <_svfiprintf_r+0x1f8>)
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	4638      	mov	r0, r7
 80064a6:	f7fd feb9 	bl	800421c <_printf_float>
 80064aa:	1c42      	adds	r2, r0, #1
 80064ac:	4606      	mov	r6, r0
 80064ae:	d1d6      	bne.n	800645e <_svfiprintf_r+0x176>
 80064b0:	89ab      	ldrh	r3, [r5, #12]
 80064b2:	065b      	lsls	r3, r3, #25
 80064b4:	f53f af2c 	bmi.w	8006310 <_svfiprintf_r+0x28>
 80064b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ba:	b01d      	add	sp, #116	; 0x74
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	ab03      	add	r3, sp, #12
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	462a      	mov	r2, r5
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <_svfiprintf_r+0x1f8>)
 80064c8:	a904      	add	r1, sp, #16
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7fe f94a 	bl	8004764 <_printf_i>
 80064d0:	e7eb      	b.n	80064aa <_svfiprintf_r+0x1c2>
 80064d2:	bf00      	nop
 80064d4:	080071b4 	.word	0x080071b4
 80064d8:	080071be 	.word	0x080071be
 80064dc:	0800421d 	.word	0x0800421d
 80064e0:	08006231 	.word	0x08006231
 80064e4:	080071ba 	.word	0x080071ba

080064e8 <__sfputc_r>:
 80064e8:	6893      	ldr	r3, [r2, #8]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	b410      	push	{r4}
 80064f0:	6093      	str	r3, [r2, #8]
 80064f2:	da08      	bge.n	8006506 <__sfputc_r+0x1e>
 80064f4:	6994      	ldr	r4, [r2, #24]
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	db01      	blt.n	80064fe <__sfputc_r+0x16>
 80064fa:	290a      	cmp	r1, #10
 80064fc:	d103      	bne.n	8006506 <__sfputc_r+0x1e>
 80064fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006502:	f000 b99f 	b.w	8006844 <__swbuf_r>
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	1c58      	adds	r0, r3, #1
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	7019      	strb	r1, [r3, #0]
 800650e:	4608      	mov	r0, r1
 8006510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006514:	4770      	bx	lr

08006516 <__sfputs_r>:
 8006516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006518:	4606      	mov	r6, r0
 800651a:	460f      	mov	r7, r1
 800651c:	4614      	mov	r4, r2
 800651e:	18d5      	adds	r5, r2, r3
 8006520:	42ac      	cmp	r4, r5
 8006522:	d101      	bne.n	8006528 <__sfputs_r+0x12>
 8006524:	2000      	movs	r0, #0
 8006526:	e007      	b.n	8006538 <__sfputs_r+0x22>
 8006528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652c:	463a      	mov	r2, r7
 800652e:	4630      	mov	r0, r6
 8006530:	f7ff ffda 	bl	80064e8 <__sfputc_r>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d1f3      	bne.n	8006520 <__sfputs_r+0xa>
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800653c <_vfiprintf_r>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	460d      	mov	r5, r1
 8006542:	b09d      	sub	sp, #116	; 0x74
 8006544:	4614      	mov	r4, r2
 8006546:	4698      	mov	r8, r3
 8006548:	4606      	mov	r6, r0
 800654a:	b118      	cbz	r0, 8006554 <_vfiprintf_r+0x18>
 800654c:	6983      	ldr	r3, [r0, #24]
 800654e:	b90b      	cbnz	r3, 8006554 <_vfiprintf_r+0x18>
 8006550:	f7ff f938 	bl	80057c4 <__sinit>
 8006554:	4b89      	ldr	r3, [pc, #548]	; (800677c <_vfiprintf_r+0x240>)
 8006556:	429d      	cmp	r5, r3
 8006558:	d11b      	bne.n	8006592 <_vfiprintf_r+0x56>
 800655a:	6875      	ldr	r5, [r6, #4]
 800655c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800655e:	07d9      	lsls	r1, r3, #31
 8006560:	d405      	bmi.n	800656e <_vfiprintf_r+0x32>
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	059a      	lsls	r2, r3, #22
 8006566:	d402      	bmi.n	800656e <_vfiprintf_r+0x32>
 8006568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800656a:	f7ff f9ce 	bl	800590a <__retarget_lock_acquire_recursive>
 800656e:	89ab      	ldrh	r3, [r5, #12]
 8006570:	071b      	lsls	r3, r3, #28
 8006572:	d501      	bpl.n	8006578 <_vfiprintf_r+0x3c>
 8006574:	692b      	ldr	r3, [r5, #16]
 8006576:	b9eb      	cbnz	r3, 80065b4 <_vfiprintf_r+0x78>
 8006578:	4629      	mov	r1, r5
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f9c6 	bl	800690c <__swsetup_r>
 8006580:	b1c0      	cbz	r0, 80065b4 <_vfiprintf_r+0x78>
 8006582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006584:	07dc      	lsls	r4, r3, #31
 8006586:	d50e      	bpl.n	80065a6 <_vfiprintf_r+0x6a>
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	b01d      	add	sp, #116	; 0x74
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <_vfiprintf_r+0x244>)
 8006594:	429d      	cmp	r5, r3
 8006596:	d101      	bne.n	800659c <_vfiprintf_r+0x60>
 8006598:	68b5      	ldr	r5, [r6, #8]
 800659a:	e7df      	b.n	800655c <_vfiprintf_r+0x20>
 800659c:	4b79      	ldr	r3, [pc, #484]	; (8006784 <_vfiprintf_r+0x248>)
 800659e:	429d      	cmp	r5, r3
 80065a0:	bf08      	it	eq
 80065a2:	68f5      	ldreq	r5, [r6, #12]
 80065a4:	e7da      	b.n	800655c <_vfiprintf_r+0x20>
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	0598      	lsls	r0, r3, #22
 80065aa:	d4ed      	bmi.n	8006588 <_vfiprintf_r+0x4c>
 80065ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ae:	f7ff f9ad 	bl	800590c <__retarget_lock_release_recursive>
 80065b2:	e7e9      	b.n	8006588 <_vfiprintf_r+0x4c>
 80065b4:	2300      	movs	r3, #0
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	2320      	movs	r3, #32
 80065ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065be:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c2:	2330      	movs	r3, #48	; 0x30
 80065c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006788 <_vfiprintf_r+0x24c>
 80065c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065cc:	f04f 0901 	mov.w	r9, #1
 80065d0:	4623      	mov	r3, r4
 80065d2:	469a      	mov	sl, r3
 80065d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d8:	b10a      	cbz	r2, 80065de <_vfiprintf_r+0xa2>
 80065da:	2a25      	cmp	r2, #37	; 0x25
 80065dc:	d1f9      	bne.n	80065d2 <_vfiprintf_r+0x96>
 80065de:	ebba 0b04 	subs.w	fp, sl, r4
 80065e2:	d00b      	beq.n	80065fc <_vfiprintf_r+0xc0>
 80065e4:	465b      	mov	r3, fp
 80065e6:	4622      	mov	r2, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ff93 	bl	8006516 <__sfputs_r>
 80065f0:	3001      	adds	r0, #1
 80065f2:	f000 80aa 	beq.w	800674a <_vfiprintf_r+0x20e>
 80065f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f8:	445a      	add	r2, fp
 80065fa:	9209      	str	r2, [sp, #36]	; 0x24
 80065fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a2 	beq.w	800674a <_vfiprintf_r+0x20e>
 8006606:	2300      	movs	r3, #0
 8006608:	f04f 32ff 	mov.w	r2, #4294967295
 800660c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006610:	f10a 0a01 	add.w	sl, sl, #1
 8006614:	9304      	str	r3, [sp, #16]
 8006616:	9307      	str	r3, [sp, #28]
 8006618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800661c:	931a      	str	r3, [sp, #104]	; 0x68
 800661e:	4654      	mov	r4, sl
 8006620:	2205      	movs	r2, #5
 8006622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006626:	4858      	ldr	r0, [pc, #352]	; (8006788 <_vfiprintf_r+0x24c>)
 8006628:	f7f9 fdea 	bl	8000200 <memchr>
 800662c:	9a04      	ldr	r2, [sp, #16]
 800662e:	b9d8      	cbnz	r0, 8006668 <_vfiprintf_r+0x12c>
 8006630:	06d1      	lsls	r1, r2, #27
 8006632:	bf44      	itt	mi
 8006634:	2320      	movmi	r3, #32
 8006636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800663a:	0713      	lsls	r3, r2, #28
 800663c:	bf44      	itt	mi
 800663e:	232b      	movmi	r3, #43	; 0x2b
 8006640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006644:	f89a 3000 	ldrb.w	r3, [sl]
 8006648:	2b2a      	cmp	r3, #42	; 0x2a
 800664a:	d015      	beq.n	8006678 <_vfiprintf_r+0x13c>
 800664c:	9a07      	ldr	r2, [sp, #28]
 800664e:	4654      	mov	r4, sl
 8006650:	2000      	movs	r0, #0
 8006652:	f04f 0c0a 	mov.w	ip, #10
 8006656:	4621      	mov	r1, r4
 8006658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800665c:	3b30      	subs	r3, #48	; 0x30
 800665e:	2b09      	cmp	r3, #9
 8006660:	d94e      	bls.n	8006700 <_vfiprintf_r+0x1c4>
 8006662:	b1b0      	cbz	r0, 8006692 <_vfiprintf_r+0x156>
 8006664:	9207      	str	r2, [sp, #28]
 8006666:	e014      	b.n	8006692 <_vfiprintf_r+0x156>
 8006668:	eba0 0308 	sub.w	r3, r0, r8
 800666c:	fa09 f303 	lsl.w	r3, r9, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	46a2      	mov	sl, r4
 8006676:	e7d2      	b.n	800661e <_vfiprintf_r+0xe2>
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	1d19      	adds	r1, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	9103      	str	r1, [sp, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfbb      	ittet	lt
 8006684:	425b      	neglt	r3, r3
 8006686:	f042 0202 	orrlt.w	r2, r2, #2
 800668a:	9307      	strge	r3, [sp, #28]
 800668c:	9307      	strlt	r3, [sp, #28]
 800668e:	bfb8      	it	lt
 8006690:	9204      	strlt	r2, [sp, #16]
 8006692:	7823      	ldrb	r3, [r4, #0]
 8006694:	2b2e      	cmp	r3, #46	; 0x2e
 8006696:	d10c      	bne.n	80066b2 <_vfiprintf_r+0x176>
 8006698:	7863      	ldrb	r3, [r4, #1]
 800669a:	2b2a      	cmp	r3, #42	; 0x2a
 800669c:	d135      	bne.n	800670a <_vfiprintf_r+0x1ce>
 800669e:	9b03      	ldr	r3, [sp, #12]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	9203      	str	r2, [sp, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb8      	it	lt
 80066aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80066ae:	3402      	adds	r4, #2
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006798 <_vfiprintf_r+0x25c>
 80066b6:	7821      	ldrb	r1, [r4, #0]
 80066b8:	2203      	movs	r2, #3
 80066ba:	4650      	mov	r0, sl
 80066bc:	f7f9 fda0 	bl	8000200 <memchr>
 80066c0:	b140      	cbz	r0, 80066d4 <_vfiprintf_r+0x198>
 80066c2:	2340      	movs	r3, #64	; 0x40
 80066c4:	eba0 000a 	sub.w	r0, r0, sl
 80066c8:	fa03 f000 	lsl.w	r0, r3, r0
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	4303      	orrs	r3, r0
 80066d0:	3401      	adds	r4, #1
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	482c      	ldr	r0, [pc, #176]	; (800678c <_vfiprintf_r+0x250>)
 80066da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066de:	2206      	movs	r2, #6
 80066e0:	f7f9 fd8e 	bl	8000200 <memchr>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d03f      	beq.n	8006768 <_vfiprintf_r+0x22c>
 80066e8:	4b29      	ldr	r3, [pc, #164]	; (8006790 <_vfiprintf_r+0x254>)
 80066ea:	bb1b      	cbnz	r3, 8006734 <_vfiprintf_r+0x1f8>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	3308      	adds	r3, #8
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	443b      	add	r3, r7
 80066fc:	9309      	str	r3, [sp, #36]	; 0x24
 80066fe:	e767      	b.n	80065d0 <_vfiprintf_r+0x94>
 8006700:	fb0c 3202 	mla	r2, ip, r2, r3
 8006704:	460c      	mov	r4, r1
 8006706:	2001      	movs	r0, #1
 8006708:	e7a5      	b.n	8006656 <_vfiprintf_r+0x11a>
 800670a:	2300      	movs	r3, #0
 800670c:	3401      	adds	r4, #1
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	4619      	mov	r1, r3
 8006712:	f04f 0c0a 	mov.w	ip, #10
 8006716:	4620      	mov	r0, r4
 8006718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671c:	3a30      	subs	r2, #48	; 0x30
 800671e:	2a09      	cmp	r2, #9
 8006720:	d903      	bls.n	800672a <_vfiprintf_r+0x1ee>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0c5      	beq.n	80066b2 <_vfiprintf_r+0x176>
 8006726:	9105      	str	r1, [sp, #20]
 8006728:	e7c3      	b.n	80066b2 <_vfiprintf_r+0x176>
 800672a:	fb0c 2101 	mla	r1, ip, r1, r2
 800672e:	4604      	mov	r4, r0
 8006730:	2301      	movs	r3, #1
 8006732:	e7f0      	b.n	8006716 <_vfiprintf_r+0x1da>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b16      	ldr	r3, [pc, #88]	; (8006794 <_vfiprintf_r+0x258>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4630      	mov	r0, r6
 8006740:	f7fd fd6c 	bl	800421c <_printf_float>
 8006744:	4607      	mov	r7, r0
 8006746:	1c78      	adds	r0, r7, #1
 8006748:	d1d6      	bne.n	80066f8 <_vfiprintf_r+0x1bc>
 800674a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800674c:	07d9      	lsls	r1, r3, #31
 800674e:	d405      	bmi.n	800675c <_vfiprintf_r+0x220>
 8006750:	89ab      	ldrh	r3, [r5, #12]
 8006752:	059a      	lsls	r2, r3, #22
 8006754:	d402      	bmi.n	800675c <_vfiprintf_r+0x220>
 8006756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006758:	f7ff f8d8 	bl	800590c <__retarget_lock_release_recursive>
 800675c:	89ab      	ldrh	r3, [r5, #12]
 800675e:	065b      	lsls	r3, r3, #25
 8006760:	f53f af12 	bmi.w	8006588 <_vfiprintf_r+0x4c>
 8006764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006766:	e711      	b.n	800658c <_vfiprintf_r+0x50>
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	462a      	mov	r2, r5
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <_vfiprintf_r+0x258>)
 8006770:	a904      	add	r1, sp, #16
 8006772:	4630      	mov	r0, r6
 8006774:	f7fd fff6 	bl	8004764 <_printf_i>
 8006778:	e7e4      	b.n	8006744 <_vfiprintf_r+0x208>
 800677a:	bf00      	nop
 800677c:	08007018 	.word	0x08007018
 8006780:	08007038 	.word	0x08007038
 8006784:	08006ff8 	.word	0x08006ff8
 8006788:	080071b4 	.word	0x080071b4
 800678c:	080071be 	.word	0x080071be
 8006790:	0800421d 	.word	0x0800421d
 8006794:	08006517 	.word	0x08006517
 8006798:	080071ba 	.word	0x080071ba

0800679c <_sbrk_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	4d06      	ldr	r5, [pc, #24]	; (80067b8 <_sbrk_r+0x1c>)
 80067a0:	2300      	movs	r3, #0
 80067a2:	4604      	mov	r4, r0
 80067a4:	4608      	mov	r0, r1
 80067a6:	602b      	str	r3, [r5, #0]
 80067a8:	f7fa fe3e 	bl	8001428 <_sbrk>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	d102      	bne.n	80067b6 <_sbrk_r+0x1a>
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b103      	cbz	r3, 80067b6 <_sbrk_r+0x1a>
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	bd38      	pop	{r3, r4, r5, pc}
 80067b8:	2000039c 	.word	0x2000039c

080067bc <__sread>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	f000 faf2 	bl	8006dac <_read_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfab      	itete	ge
 80067cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ce:	89a3      	ldrhlt	r3, [r4, #12]
 80067d0:	181b      	addge	r3, r3, r0
 80067d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067d6:	bfac      	ite	ge
 80067d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067da:	81a3      	strhlt	r3, [r4, #12]
 80067dc:	bd10      	pop	{r4, pc}

080067de <__swrite>:
 80067de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	461f      	mov	r7, r3
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	05db      	lsls	r3, r3, #23
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4616      	mov	r6, r2
 80067ee:	d505      	bpl.n	80067fc <__swrite+0x1e>
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2302      	movs	r3, #2
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 f9f8 	bl	8006bec <_lseek_r>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	f000 b869 	b.w	80068e8 <_write_r>

08006816 <__sseek>:
 8006816:	b510      	push	{r4, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681e:	f000 f9e5 	bl	8006bec <_lseek_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	bf15      	itete	ne
 8006828:	6560      	strne	r0, [r4, #84]	; 0x54
 800682a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800682e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006832:	81a3      	strheq	r3, [r4, #12]
 8006834:	bf18      	it	ne
 8006836:	81a3      	strhne	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__sclose>:
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 b8f1 	b.w	8006a24 <_close_r>
	...

08006844 <__swbuf_r>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4614      	mov	r4, r2
 800684a:	4605      	mov	r5, r0
 800684c:	b118      	cbz	r0, 8006856 <__swbuf_r+0x12>
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	b90b      	cbnz	r3, 8006856 <__swbuf_r+0x12>
 8006852:	f7fe ffb7 	bl	80057c4 <__sinit>
 8006856:	4b21      	ldr	r3, [pc, #132]	; (80068dc <__swbuf_r+0x98>)
 8006858:	429c      	cmp	r4, r3
 800685a:	d12b      	bne.n	80068b4 <__swbuf_r+0x70>
 800685c:	686c      	ldr	r4, [r5, #4]
 800685e:	69a3      	ldr	r3, [r4, #24]
 8006860:	60a3      	str	r3, [r4, #8]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	d52f      	bpl.n	80068c8 <__swbuf_r+0x84>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	b36b      	cbz	r3, 80068c8 <__swbuf_r+0x84>
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	6820      	ldr	r0, [r4, #0]
 8006870:	1ac0      	subs	r0, r0, r3
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	b2f6      	uxtb	r6, r6
 8006876:	4283      	cmp	r3, r0
 8006878:	4637      	mov	r7, r6
 800687a:	dc04      	bgt.n	8006886 <__swbuf_r+0x42>
 800687c:	4621      	mov	r1, r4
 800687e:	4628      	mov	r0, r5
 8006880:	f000 f966 	bl	8006b50 <_fflush_r>
 8006884:	bb30      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	3b01      	subs	r3, #1
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	701e      	strb	r6, [r3, #0]
 8006894:	6963      	ldr	r3, [r4, #20]
 8006896:	3001      	adds	r0, #1
 8006898:	4283      	cmp	r3, r0
 800689a:	d004      	beq.n	80068a6 <__swbuf_r+0x62>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	d506      	bpl.n	80068b0 <__swbuf_r+0x6c>
 80068a2:	2e0a      	cmp	r6, #10
 80068a4:	d104      	bne.n	80068b0 <__swbuf_r+0x6c>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 f951 	bl	8006b50 <_fflush_r>
 80068ae:	b988      	cbnz	r0, 80068d4 <__swbuf_r+0x90>
 80068b0:	4638      	mov	r0, r7
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <__swbuf_r+0x9c>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	d101      	bne.n	80068be <__swbuf_r+0x7a>
 80068ba:	68ac      	ldr	r4, [r5, #8]
 80068bc:	e7cf      	b.n	800685e <__swbuf_r+0x1a>
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <__swbuf_r+0xa0>)
 80068c0:	429c      	cmp	r4, r3
 80068c2:	bf08      	it	eq
 80068c4:	68ec      	ldreq	r4, [r5, #12]
 80068c6:	e7ca      	b.n	800685e <__swbuf_r+0x1a>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f81e 	bl	800690c <__swsetup_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0cb      	beq.n	800686c <__swbuf_r+0x28>
 80068d4:	f04f 37ff 	mov.w	r7, #4294967295
 80068d8:	e7ea      	b.n	80068b0 <__swbuf_r+0x6c>
 80068da:	bf00      	nop
 80068dc:	08007018 	.word	0x08007018
 80068e0:	08007038 	.word	0x08007038
 80068e4:	08006ff8 	.word	0x08006ff8

080068e8 <_write_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d07      	ldr	r5, [pc, #28]	; (8006908 <_write_r+0x20>)
 80068ec:	4604      	mov	r4, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	4611      	mov	r1, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	602a      	str	r2, [r5, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fa fbd0 	bl	800109c <_write>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_write_r+0x1e>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_write_r+0x1e>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	2000039c 	.word	0x2000039c

0800690c <__swsetup_r>:
 800690c:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <__swsetup_r+0xcc>)
 800690e:	b570      	push	{r4, r5, r6, lr}
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	4606      	mov	r6, r0
 8006914:	460c      	mov	r4, r1
 8006916:	b125      	cbz	r5, 8006922 <__swsetup_r+0x16>
 8006918:	69ab      	ldr	r3, [r5, #24]
 800691a:	b913      	cbnz	r3, 8006922 <__swsetup_r+0x16>
 800691c:	4628      	mov	r0, r5
 800691e:	f7fe ff51 	bl	80057c4 <__sinit>
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <__swsetup_r+0xd0>)
 8006924:	429c      	cmp	r4, r3
 8006926:	d10f      	bne.n	8006948 <__swsetup_r+0x3c>
 8006928:	686c      	ldr	r4, [r5, #4]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006930:	0719      	lsls	r1, r3, #28
 8006932:	d42c      	bmi.n	800698e <__swsetup_r+0x82>
 8006934:	06dd      	lsls	r5, r3, #27
 8006936:	d411      	bmi.n	800695c <__swsetup_r+0x50>
 8006938:	2309      	movs	r3, #9
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	f04f 30ff 	mov.w	r0, #4294967295
 8006946:	e03e      	b.n	80069c6 <__swsetup_r+0xba>
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <__swsetup_r+0xd4>)
 800694a:	429c      	cmp	r4, r3
 800694c:	d101      	bne.n	8006952 <__swsetup_r+0x46>
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	e7eb      	b.n	800692a <__swsetup_r+0x1e>
 8006952:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <__swsetup_r+0xd8>)
 8006954:	429c      	cmp	r4, r3
 8006956:	bf08      	it	eq
 8006958:	68ec      	ldreq	r4, [r5, #12]
 800695a:	e7e6      	b.n	800692a <__swsetup_r+0x1e>
 800695c:	0758      	lsls	r0, r3, #29
 800695e:	d512      	bpl.n	8006986 <__swsetup_r+0x7a>
 8006960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006962:	b141      	cbz	r1, 8006976 <__swsetup_r+0x6a>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__swsetup_r+0x66>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff fb7f 	bl	8006070 <_free_r>
 8006972:	2300      	movs	r3, #0
 8006974:	6363      	str	r3, [r4, #52]	; 0x34
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	2300      	movs	r3, #0
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b94b      	cbnz	r3, 80069a6 <__swsetup_r+0x9a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699c:	d003      	beq.n	80069a6 <__swsetup_r+0x9a>
 800699e:	4621      	mov	r1, r4
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f95b 	bl	8006c5c <__smakebuf_r>
 80069a6:	89a0      	ldrh	r0, [r4, #12]
 80069a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ac:	f010 0301 	ands.w	r3, r0, #1
 80069b0:	d00a      	beq.n	80069c8 <__swsetup_r+0xbc>
 80069b2:	2300      	movs	r3, #0
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	425b      	negs	r3, r3
 80069ba:	61a3      	str	r3, [r4, #24]
 80069bc:	6923      	ldr	r3, [r4, #16]
 80069be:	b943      	cbnz	r3, 80069d2 <__swsetup_r+0xc6>
 80069c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c4:	d1ba      	bne.n	800693c <__swsetup_r+0x30>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	0781      	lsls	r1, r0, #30
 80069ca:	bf58      	it	pl
 80069cc:	6963      	ldrpl	r3, [r4, #20]
 80069ce:	60a3      	str	r3, [r4, #8]
 80069d0:	e7f4      	b.n	80069bc <__swsetup_r+0xb0>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e7f7      	b.n	80069c6 <__swsetup_r+0xba>
 80069d6:	bf00      	nop
 80069d8:	2000000c 	.word	0x2000000c
 80069dc:	08007018 	.word	0x08007018
 80069e0:	08007038 	.word	0x08007038
 80069e4:	08006ff8 	.word	0x08006ff8

080069e8 <__assert_func>:
 80069e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069ea:	4614      	mov	r4, r2
 80069ec:	461a      	mov	r2, r3
 80069ee:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <__assert_func+0x2c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4605      	mov	r5, r0
 80069f4:	68d8      	ldr	r0, [r3, #12]
 80069f6:	b14c      	cbz	r4, 8006a0c <__assert_func+0x24>
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <__assert_func+0x30>)
 80069fa:	9100      	str	r1, [sp, #0]
 80069fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a00:	4906      	ldr	r1, [pc, #24]	; (8006a1c <__assert_func+0x34>)
 8006a02:	462b      	mov	r3, r5
 8006a04:	f000 f8e0 	bl	8006bc8 <fiprintf>
 8006a08:	f000 f9ef 	bl	8006dea <abort>
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <__assert_func+0x38>)
 8006a0e:	461c      	mov	r4, r3
 8006a10:	e7f3      	b.n	80069fa <__assert_func+0x12>
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c
 8006a18:	080071c5 	.word	0x080071c5
 8006a1c:	080071d2 	.word	0x080071d2
 8006a20:	08007200 	.word	0x08007200

08006a24 <_close_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d06      	ldr	r5, [pc, #24]	; (8006a40 <_close_r+0x1c>)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fa fcc5 	bl	80013be <_close>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_close_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_close_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	2000039c 	.word	0x2000039c

08006a44 <__sflush_r>:
 8006a44:	898a      	ldrh	r2, [r1, #12]
 8006a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	0710      	lsls	r0, r2, #28
 8006a4e:	460c      	mov	r4, r1
 8006a50:	d458      	bmi.n	8006b04 <__sflush_r+0xc0>
 8006a52:	684b      	ldr	r3, [r1, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dc05      	bgt.n	8006a64 <__sflush_r+0x20>
 8006a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dc02      	bgt.n	8006a64 <__sflush_r+0x20>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d0f9      	beq.n	8006a5e <__sflush_r+0x1a>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a70:	682f      	ldr	r7, [r5, #0]
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	d032      	beq.n	8006adc <__sflush_r+0x98>
 8006a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	075a      	lsls	r2, r3, #29
 8006a7c:	d505      	bpl.n	8006a8a <__sflush_r+0x46>
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	1ac0      	subs	r0, r0, r3
 8006a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a84:	b10b      	cbz	r3, 8006a8a <__sflush_r+0x46>
 8006a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a88:	1ac0      	subs	r0, r0, r3
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a90:	6a21      	ldr	r1, [r4, #32]
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b0      	blx	r6
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	d106      	bne.n	8006aaa <__sflush_r+0x66>
 8006a9c:	6829      	ldr	r1, [r5, #0]
 8006a9e:	291d      	cmp	r1, #29
 8006aa0:	d82c      	bhi.n	8006afc <__sflush_r+0xb8>
 8006aa2:	4a2a      	ldr	r2, [pc, #168]	; (8006b4c <__sflush_r+0x108>)
 8006aa4:	40ca      	lsrs	r2, r1
 8006aa6:	07d6      	lsls	r6, r2, #31
 8006aa8:	d528      	bpl.n	8006afc <__sflush_r+0xb8>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6062      	str	r2, [r4, #4]
 8006aae:	04d9      	lsls	r1, r3, #19
 8006ab0:	6922      	ldr	r2, [r4, #16]
 8006ab2:	6022      	str	r2, [r4, #0]
 8006ab4:	d504      	bpl.n	8006ac0 <__sflush_r+0x7c>
 8006ab6:	1c42      	adds	r2, r0, #1
 8006ab8:	d101      	bne.n	8006abe <__sflush_r+0x7a>
 8006aba:	682b      	ldr	r3, [r5, #0]
 8006abc:	b903      	cbnz	r3, 8006ac0 <__sflush_r+0x7c>
 8006abe:	6560      	str	r0, [r4, #84]	; 0x54
 8006ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ac2:	602f      	str	r7, [r5, #0]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d0ca      	beq.n	8006a5e <__sflush_r+0x1a>
 8006ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006acc:	4299      	cmp	r1, r3
 8006ace:	d002      	beq.n	8006ad6 <__sflush_r+0x92>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff facd 	bl	8006070 <_free_r>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8006ada:	e7c1      	b.n	8006a60 <__sflush_r+0x1c>
 8006adc:	6a21      	ldr	r1, [r4, #32]
 8006ade:	2301      	movs	r3, #1
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	47b0      	blx	r6
 8006ae4:	1c41      	adds	r1, r0, #1
 8006ae6:	d1c7      	bne.n	8006a78 <__sflush_r+0x34>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c4      	beq.n	8006a78 <__sflush_r+0x34>
 8006aee:	2b1d      	cmp	r3, #29
 8006af0:	d001      	beq.n	8006af6 <__sflush_r+0xb2>
 8006af2:	2b16      	cmp	r3, #22
 8006af4:	d101      	bne.n	8006afa <__sflush_r+0xb6>
 8006af6:	602f      	str	r7, [r5, #0]
 8006af8:	e7b1      	b.n	8006a5e <__sflush_r+0x1a>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	e7ad      	b.n	8006a60 <__sflush_r+0x1c>
 8006b04:	690f      	ldr	r7, [r1, #16]
 8006b06:	2f00      	cmp	r7, #0
 8006b08:	d0a9      	beq.n	8006a5e <__sflush_r+0x1a>
 8006b0a:	0793      	lsls	r3, r2, #30
 8006b0c:	680e      	ldr	r6, [r1, #0]
 8006b0e:	bf08      	it	eq
 8006b10:	694b      	ldreq	r3, [r1, #20]
 8006b12:	600f      	str	r7, [r1, #0]
 8006b14:	bf18      	it	ne
 8006b16:	2300      	movne	r3, #0
 8006b18:	eba6 0807 	sub.w	r8, r6, r7
 8006b1c:	608b      	str	r3, [r1, #8]
 8006b1e:	f1b8 0f00 	cmp.w	r8, #0
 8006b22:	dd9c      	ble.n	8006a5e <__sflush_r+0x1a>
 8006b24:	6a21      	ldr	r1, [r4, #32]
 8006b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b28:	4643      	mov	r3, r8
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b0      	blx	r6
 8006b30:	2800      	cmp	r0, #0
 8006b32:	dc06      	bgt.n	8006b42 <__sflush_r+0xfe>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	e78e      	b.n	8006a60 <__sflush_r+0x1c>
 8006b42:	4407      	add	r7, r0
 8006b44:	eba8 0800 	sub.w	r8, r8, r0
 8006b48:	e7e9      	b.n	8006b1e <__sflush_r+0xda>
 8006b4a:	bf00      	nop
 8006b4c:	20400001 	.word	0x20400001

08006b50 <_fflush_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	690b      	ldr	r3, [r1, #16]
 8006b54:	4605      	mov	r5, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	b913      	cbnz	r3, 8006b60 <_fflush_r+0x10>
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	b118      	cbz	r0, 8006b6a <_fflush_r+0x1a>
 8006b62:	6983      	ldr	r3, [r0, #24]
 8006b64:	b90b      	cbnz	r3, 8006b6a <_fflush_r+0x1a>
 8006b66:	f7fe fe2d 	bl	80057c4 <__sinit>
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <_fflush_r+0x6c>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d11b      	bne.n	8006ba8 <_fflush_r+0x58>
 8006b70:	686c      	ldr	r4, [r5, #4]
 8006b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0ef      	beq.n	8006b5a <_fflush_r+0xa>
 8006b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b7c:	07d0      	lsls	r0, r2, #31
 8006b7e:	d404      	bmi.n	8006b8a <_fflush_r+0x3a>
 8006b80:	0599      	lsls	r1, r3, #22
 8006b82:	d402      	bmi.n	8006b8a <_fflush_r+0x3a>
 8006b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b86:	f7fe fec0 	bl	800590a <__retarget_lock_acquire_recursive>
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	f7ff ff59 	bl	8006a44 <__sflush_r>
 8006b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b94:	07da      	lsls	r2, r3, #31
 8006b96:	4605      	mov	r5, r0
 8006b98:	d4e0      	bmi.n	8006b5c <_fflush_r+0xc>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	059b      	lsls	r3, r3, #22
 8006b9e:	d4dd      	bmi.n	8006b5c <_fflush_r+0xc>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f7fe feb3 	bl	800590c <__retarget_lock_release_recursive>
 8006ba6:	e7d9      	b.n	8006b5c <_fflush_r+0xc>
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <_fflush_r+0x70>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	d101      	bne.n	8006bb2 <_fflush_r+0x62>
 8006bae:	68ac      	ldr	r4, [r5, #8]
 8006bb0:	e7df      	b.n	8006b72 <_fflush_r+0x22>
 8006bb2:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <_fflush_r+0x74>)
 8006bb4:	429c      	cmp	r4, r3
 8006bb6:	bf08      	it	eq
 8006bb8:	68ec      	ldreq	r4, [r5, #12]
 8006bba:	e7da      	b.n	8006b72 <_fflush_r+0x22>
 8006bbc:	08007018 	.word	0x08007018
 8006bc0:	08007038 	.word	0x08007038
 8006bc4:	08006ff8 	.word	0x08006ff8

08006bc8 <fiprintf>:
 8006bc8:	b40e      	push	{r1, r2, r3}
 8006bca:	b503      	push	{r0, r1, lr}
 8006bcc:	4601      	mov	r1, r0
 8006bce:	ab03      	add	r3, sp, #12
 8006bd0:	4805      	ldr	r0, [pc, #20]	; (8006be8 <fiprintf+0x20>)
 8006bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f7ff fcaf 	bl	800653c <_vfiprintf_r>
 8006bde:	b002      	add	sp, #8
 8006be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be4:	b003      	add	sp, #12
 8006be6:	4770      	bx	lr
 8006be8:	2000000c 	.word	0x2000000c

08006bec <_lseek_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	; (8006c0c <_lseek_r+0x20>)
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	602a      	str	r2, [r5, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f7fa fc06 	bl	800140c <_lseek>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_lseek_r+0x1e>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_lseek_r+0x1e>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000039c 	.word	0x2000039c

08006c10 <__swhatbuf_r>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	460e      	mov	r6, r1
 8006c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c18:	2900      	cmp	r1, #0
 8006c1a:	b096      	sub	sp, #88	; 0x58
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	da08      	bge.n	8006c34 <__swhatbuf_r+0x24>
 8006c22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	061a      	lsls	r2, r3, #24
 8006c2c:	d410      	bmi.n	8006c50 <__swhatbuf_r+0x40>
 8006c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c32:	e00e      	b.n	8006c52 <__swhatbuf_r+0x42>
 8006c34:	466a      	mov	r2, sp
 8006c36:	f000 f8df 	bl	8006df8 <_fstat_r>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	dbf1      	blt.n	8006c22 <__swhatbuf_r+0x12>
 8006c3e:	9a01      	ldr	r2, [sp, #4]
 8006c40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c48:	425a      	negs	r2, r3
 8006c4a:	415a      	adcs	r2, r3
 8006c4c:	602a      	str	r2, [r5, #0]
 8006c4e:	e7ee      	b.n	8006c2e <__swhatbuf_r+0x1e>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	2000      	movs	r0, #0
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	b016      	add	sp, #88	; 0x58
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c5c <__smakebuf_r>:
 8006c5c:	898b      	ldrh	r3, [r1, #12]
 8006c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c60:	079d      	lsls	r5, r3, #30
 8006c62:	4606      	mov	r6, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	d507      	bpl.n	8006c78 <__smakebuf_r+0x1c>
 8006c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	2301      	movs	r3, #1
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	b002      	add	sp, #8
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	ab01      	add	r3, sp, #4
 8006c7a:	466a      	mov	r2, sp
 8006c7c:	f7ff ffc8 	bl	8006c10 <__swhatbuf_r>
 8006c80:	9900      	ldr	r1, [sp, #0]
 8006c82:	4605      	mov	r5, r0
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7ff fa5f 	bl	8006148 <_malloc_r>
 8006c8a:	b948      	cbnz	r0, 8006ca0 <__smakebuf_r+0x44>
 8006c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c90:	059a      	lsls	r2, r3, #22
 8006c92:	d4ef      	bmi.n	8006c74 <__smakebuf_r+0x18>
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	e7e3      	b.n	8006c68 <__smakebuf_r+0xc>
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <__smakebuf_r+0x7c>)
 8006ca2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	6020      	str	r0, [r4, #0]
 8006ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	6163      	str	r3, [r4, #20]
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	6120      	str	r0, [r4, #16]
 8006cb6:	b15b      	cbz	r3, 8006cd0 <__smakebuf_r+0x74>
 8006cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f000 f8ad 	bl	8006e1c <_isatty_r>
 8006cc2:	b128      	cbz	r0, 8006cd0 <__smakebuf_r+0x74>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	89a0      	ldrh	r0, [r4, #12]
 8006cd2:	4305      	orrs	r5, r0
 8006cd4:	81a5      	strh	r5, [r4, #12]
 8006cd6:	e7cd      	b.n	8006c74 <__smakebuf_r+0x18>
 8006cd8:	0800575d 	.word	0x0800575d

08006cdc <__ascii_mbtowc>:
 8006cdc:	b082      	sub	sp, #8
 8006cde:	b901      	cbnz	r1, 8006ce2 <__ascii_mbtowc+0x6>
 8006ce0:	a901      	add	r1, sp, #4
 8006ce2:	b142      	cbz	r2, 8006cf6 <__ascii_mbtowc+0x1a>
 8006ce4:	b14b      	cbz	r3, 8006cfa <__ascii_mbtowc+0x1e>
 8006ce6:	7813      	ldrb	r3, [r2, #0]
 8006ce8:	600b      	str	r3, [r1, #0]
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	1e10      	subs	r0, r2, #0
 8006cee:	bf18      	it	ne
 8006cf0:	2001      	movne	r0, #1
 8006cf2:	b002      	add	sp, #8
 8006cf4:	4770      	bx	lr
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	e7fb      	b.n	8006cf2 <__ascii_mbtowc+0x16>
 8006cfa:	f06f 0001 	mvn.w	r0, #1
 8006cfe:	e7f8      	b.n	8006cf2 <__ascii_mbtowc+0x16>

08006d00 <memmove>:
 8006d00:	4288      	cmp	r0, r1
 8006d02:	b510      	push	{r4, lr}
 8006d04:	eb01 0402 	add.w	r4, r1, r2
 8006d08:	d902      	bls.n	8006d10 <memmove+0x10>
 8006d0a:	4284      	cmp	r4, r0
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	d807      	bhi.n	8006d20 <memmove+0x20>
 8006d10:	1e43      	subs	r3, r0, #1
 8006d12:	42a1      	cmp	r1, r4
 8006d14:	d008      	beq.n	8006d28 <memmove+0x28>
 8006d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d1e:	e7f8      	b.n	8006d12 <memmove+0x12>
 8006d20:	4402      	add	r2, r0
 8006d22:	4601      	mov	r1, r0
 8006d24:	428a      	cmp	r2, r1
 8006d26:	d100      	bne.n	8006d2a <memmove+0x2a>
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d32:	e7f7      	b.n	8006d24 <memmove+0x24>

08006d34 <__malloc_lock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_lock+0x8>)
 8006d36:	f7fe bde8 	b.w	800590a <__retarget_lock_acquire_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000390 	.word	0x20000390

08006d40 <__malloc_unlock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	; (8006d48 <__malloc_unlock+0x8>)
 8006d42:	f7fe bde3 	b.w	800590c <__retarget_lock_release_recursive>
 8006d46:	bf00      	nop
 8006d48:	20000390 	.word	0x20000390

08006d4c <_realloc_r>:
 8006d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d50:	4680      	mov	r8, r0
 8006d52:	4614      	mov	r4, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	b921      	cbnz	r1, 8006d62 <_realloc_r+0x16>
 8006d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	f7ff b9f3 	b.w	8006148 <_malloc_r>
 8006d62:	b92a      	cbnz	r2, 8006d70 <_realloc_r+0x24>
 8006d64:	f7ff f984 	bl	8006070 <_free_r>
 8006d68:	4625      	mov	r5, r4
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	f000 f864 	bl	8006e3c <_malloc_usable_size_r>
 8006d74:	4284      	cmp	r4, r0
 8006d76:	4607      	mov	r7, r0
 8006d78:	d802      	bhi.n	8006d80 <_realloc_r+0x34>
 8006d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d7e:	d812      	bhi.n	8006da6 <_realloc_r+0x5a>
 8006d80:	4621      	mov	r1, r4
 8006d82:	4640      	mov	r0, r8
 8006d84:	f7ff f9e0 	bl	8006148 <_malloc_r>
 8006d88:	4605      	mov	r5, r0
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d0ed      	beq.n	8006d6a <_realloc_r+0x1e>
 8006d8e:	42bc      	cmp	r4, r7
 8006d90:	4622      	mov	r2, r4
 8006d92:	4631      	mov	r1, r6
 8006d94:	bf28      	it	cs
 8006d96:	463a      	movcs	r2, r7
 8006d98:	f7fe fdc2 	bl	8005920 <memcpy>
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4640      	mov	r0, r8
 8006da0:	f7ff f966 	bl	8006070 <_free_r>
 8006da4:	e7e1      	b.n	8006d6a <_realloc_r+0x1e>
 8006da6:	4635      	mov	r5, r6
 8006da8:	e7df      	b.n	8006d6a <_realloc_r+0x1e>
	...

08006dac <_read_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_read_r+0x20>)
 8006db0:	4604      	mov	r4, r0
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	602a      	str	r2, [r5, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f7fa fae2 	bl	8001384 <_read>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_read_r+0x1e>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_read_r+0x1e>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	2000039c 	.word	0x2000039c

08006dd0 <__ascii_wctomb>:
 8006dd0:	b149      	cbz	r1, 8006de6 <__ascii_wctomb+0x16>
 8006dd2:	2aff      	cmp	r2, #255	; 0xff
 8006dd4:	bf85      	ittet	hi
 8006dd6:	238a      	movhi	r3, #138	; 0x8a
 8006dd8:	6003      	strhi	r3, [r0, #0]
 8006dda:	700a      	strbls	r2, [r1, #0]
 8006ddc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006de0:	bf98      	it	ls
 8006de2:	2001      	movls	r0, #1
 8006de4:	4770      	bx	lr
 8006de6:	4608      	mov	r0, r1
 8006de8:	4770      	bx	lr

08006dea <abort>:
 8006dea:	b508      	push	{r3, lr}
 8006dec:	2006      	movs	r0, #6
 8006dee:	f000 f855 	bl	8006e9c <raise>
 8006df2:	2001      	movs	r0, #1
 8006df4:	f7fa fabc 	bl	8001370 <_exit>

08006df8 <_fstat_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_fstat_r+0x20>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f7fa fae6 	bl	80013d6 <_fstat>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d102      	bne.n	8006e14 <_fstat_r+0x1c>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b103      	cbz	r3, 8006e14 <_fstat_r+0x1c>
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	2000039c 	.word	0x2000039c

08006e1c <_isatty_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_isatty_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fa fae5 	bl	80013f6 <_isatty>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_isatty_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_isatty_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	2000039c 	.word	0x2000039c

08006e3c <_malloc_usable_size_r>:
 8006e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e40:	1f18      	subs	r0, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bfbc      	itt	lt
 8006e46:	580b      	ldrlt	r3, [r1, r0]
 8006e48:	18c0      	addlt	r0, r0, r3
 8006e4a:	4770      	bx	lr

08006e4c <_raise_r>:
 8006e4c:	291f      	cmp	r1, #31
 8006e4e:	b538      	push	{r3, r4, r5, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	d904      	bls.n	8006e60 <_raise_r+0x14>
 8006e56:	2316      	movs	r3, #22
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e62:	b112      	cbz	r2, 8006e6a <_raise_r+0x1e>
 8006e64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e68:	b94b      	cbnz	r3, 8006e7e <_raise_r+0x32>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 f830 	bl	8006ed0 <_getpid_r>
 8006e70:	462a      	mov	r2, r5
 8006e72:	4601      	mov	r1, r0
 8006e74:	4620      	mov	r0, r4
 8006e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7a:	f000 b817 	b.w	8006eac <_kill_r>
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d00a      	beq.n	8006e98 <_raise_r+0x4c>
 8006e82:	1c59      	adds	r1, r3, #1
 8006e84:	d103      	bne.n	8006e8e <_raise_r+0x42>
 8006e86:	2316      	movs	r3, #22
 8006e88:	6003      	str	r3, [r0, #0]
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	e7e7      	b.n	8006e5e <_raise_r+0x12>
 8006e8e:	2400      	movs	r4, #0
 8006e90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e94:	4628      	mov	r0, r5
 8006e96:	4798      	blx	r3
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7e0      	b.n	8006e5e <_raise_r+0x12>

08006e9c <raise>:
 8006e9c:	4b02      	ldr	r3, [pc, #8]	; (8006ea8 <raise+0xc>)
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	6818      	ldr	r0, [r3, #0]
 8006ea2:	f7ff bfd3 	b.w	8006e4c <_raise_r>
 8006ea6:	bf00      	nop
 8006ea8:	2000000c 	.word	0x2000000c

08006eac <_kill_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	; (8006ecc <_kill_r+0x20>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f7fa fa49 	bl	8001350 <_kill>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d102      	bne.n	8006ec8 <_kill_r+0x1c>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	b103      	cbz	r3, 8006ec8 <_kill_r+0x1c>
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	bd38      	pop	{r3, r4, r5, pc}
 8006eca:	bf00      	nop
 8006ecc:	2000039c 	.word	0x2000039c

08006ed0 <_getpid_r>:
 8006ed0:	f7fa ba36 	b.w	8001340 <_getpid>

08006ed4 <_init>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	bf00      	nop
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr

08006ee0 <_fini>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr
