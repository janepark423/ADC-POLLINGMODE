
UART_LED_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c1c  08004c1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c24  08004c24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba34  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002068  00000000  00000000  0002bad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000848  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025220  00000000  00000000  0002ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c700  00000000  00000000  00053ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df8d3  00000000  00000000  000605d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013feab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ce8  00000000  00000000  0013fefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ae8 	.word	0x08004ae8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004ae8 	.word	0x08004ae8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <MX_ADC1_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_ADC1_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_ADC1_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_ADC1_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_ADC1_Init+0x98>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_ADC1_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x98>)
 8000606:	f000 fc2d 	bl	8000e64 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000610:	f000 f9f2 	bl	80009f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800061c:	2306      	movs	r3, #6
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x98>)
 8000626:	f000 fdcb 	bl	80011c0 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000630:	f000 f9e2 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000008c 	.word	0x2000008c
 8000640:	40012000 	.word	0x40012000
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_ADC_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d127      	bne.n	80006ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_ADC_MspInit+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_ADC_MspInit+0x84>)
 80006b6:	f001 f955 	bl	8001964 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000

080006d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <MX_GPIO_Init+0x9c>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_GPIO_Init+0x9c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_GPIO_Init+0x9c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <MX_GPIO_Init+0x9c>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ONE_Pin|LED_THREE_Pin|LED_TWO_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000742:	f001 fabb 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_ONE_Pin|LED_THREE_Pin|LED_TWO_Pin;
 8000746:	f244 0381 	movw	r3, #16513	; 0x4081
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_GPIO_Init+0xa0>)
 8000760:	f001 f900 	bl	8001964 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400

08000774 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int myData = 0;
uint8_t _test = 0;

int _write(int fd, char *ptr, int len) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (unsigned char*) ptr, len, HAL_MAX_DELAY);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	b29a      	uxth	r2, r3
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <_write+0x28>)
 800078c:	f001 ffe5 	bl	800275a <HAL_UART_Transmit>
	return len;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001dc 	.word	0x200001dc

080007a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == huart3.Instance) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d145      	bne.n	8000840 <HAL_UART_RxCpltCallback+0xa0>
		if (myData == '1') {
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b31      	cmp	r3, #49	; 0x31
 80007ba:	d10b      	bne.n	80007d4 <HAL_UART_RxCpltCallback+0x34>
			HAL_UART_Transmit(&huart3, &myData, 1, 10);
 80007bc:	230a      	movs	r3, #10
 80007be:	2201      	movs	r2, #1
 80007c0:	4922      	ldr	r1, [pc, #136]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 80007c2:	4821      	ldr	r0, [pc, #132]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 80007c4:	f001 ffc9 	bl	800275a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LED_ONE_GPIO_Port, LED_ONE_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2101      	movs	r1, #1
 80007cc:	4820      	ldr	r0, [pc, #128]	; (8000850 <HAL_UART_RxCpltCallback+0xb0>)
 80007ce:	f001 fa75 	bl	8001cbc <HAL_GPIO_WritePin>
 80007d2:	e030      	b.n	8000836 <HAL_UART_RxCpltCallback+0x96>

		} else if (myData == '2') {
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b32      	cmp	r3, #50	; 0x32
 80007da:	d10b      	bne.n	80007f4 <HAL_UART_RxCpltCallback+0x54>
			HAL_UART_Transmit(&huart3, &myData, 1, 10);
 80007dc:	230a      	movs	r3, #10
 80007de:	2201      	movs	r2, #1
 80007e0:	491a      	ldr	r1, [pc, #104]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 80007e4:	f001 ffb9 	bl	800275a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LED_TWO_GPIO_Port, LED_TWO_Pin, 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	4818      	ldr	r0, [pc, #96]	; (8000850 <HAL_UART_RxCpltCallback+0xb0>)
 80007ee:	f001 fa65 	bl	8001cbc <HAL_GPIO_WritePin>
 80007f2:	e020      	b.n	8000836 <HAL_UART_RxCpltCallback+0x96>

		} else if (myData == '3') {
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b33      	cmp	r3, #51	; 0x33
 80007fa:	d10c      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x76>
			HAL_UART_Transmit(&huart3, &myData, 1, 10);
 80007fc:	230a      	movs	r3, #10
 80007fe:	2201      	movs	r2, #1
 8000800:	4912      	ldr	r1, [pc, #72]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 8000804:	f001 ffa9 	bl	800275a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LED_THREE_GPIO_Port, LED_THREE_Pin, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <HAL_UART_RxCpltCallback+0xb0>)
 8000810:	f001 fa54 	bl	8001cbc <HAL_GPIO_WritePin>
 8000814:	e00f      	b.n	8000836 <HAL_UART_RxCpltCallback+0x96>

		} else if (myData == '4') {
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b34      	cmp	r3, #52	; 0x34
 800081c:	d10b      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x96>
			HAL_UART_Transmit(&huart3, &myData, 1, 10);
 800081e:	230a      	movs	r3, #10
 8000820:	2201      	movs	r2, #1
 8000822:	490a      	ldr	r1, [pc, #40]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 8000826:	f001 ff98 	bl	800275a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOB, LED_ONE_Pin | LED_TWO_Pin | LED_THREE_Pin,
 800082a:	2200      	movs	r2, #0
 800082c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000830:	4807      	ldr	r0, [pc, #28]	; (8000850 <HAL_UART_RxCpltCallback+0xb0>)
 8000832:	f001 fa43 	bl	8001cbc <HAL_GPIO_WritePin>
					0);
		}
		HAL_UART_Receive_IT(&huart3, &myData, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <HAL_UART_RxCpltCallback+0xac>)
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <HAL_UART_RxCpltCallback+0xa8>)
 800083c:	f002 f81f 	bl	800287e <HAL_UART_Receive_IT>

	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001dc 	.word	0x200001dc
 800084c:	200001d4 	.word	0x200001d4
 8000850:	40020400 	.word	0x40020400

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800085a:	f000 fa6d 	bl	8000d38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800085e:	f000 f85b 	bl	8000918 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000862:	f7ff ff35 	bl	80006d0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000866:	f000 f9c3 	bl	8000bf0 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 800086a:	f7ff fe9b 	bl	80005a4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	char *str = "Hello world!";
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <main+0x9c>)
 8000870:	607b      	str	r3, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &myData, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	491f      	ldr	r1, [pc, #124]	; (80008f4 <main+0xa0>)
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <main+0xa4>)
 8000878:	f002 f801 	bl	800287e <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		HAL_ADC_Start(&hadc1);                 // ADC를 Enable시킨 후 conversion을 시작
 800087c:	481f      	ldr	r0, [pc, #124]	; (80008fc <main+0xa8>)
 800087e:	f000 fb35 	bl	8000eec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // conversion이 완료되기를 기다림
 8000882:	f04f 31ff 	mov.w	r1, #4294967295
 8000886:	481d      	ldr	r0, [pc, #116]	; (80008fc <main+0xa8>)
 8000888:	f000 fc02 	bl	8001090 <HAL_ADC_PollForConversion>
		uint16_t adc_value = HAL_ADC_GetValue(&hadc1);     // ADC 데이터를 읽어 변수에 저장
 800088c:	481b      	ldr	r0, [pc, #108]	; (80008fc <main+0xa8>)
 800088e:	f000 fc8a 	bl	80011a6 <HAL_ADC_GetValue>
 8000892:	4603      	mov	r3, r0
 8000894:	807b      	strh	r3, [r7, #2]
		sprintf((char*) buffer, "ADC1-0: %d\n", adc_value); // 이하 UART를 통해 ADC 데이터 출력
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	461a      	mov	r2, r3
 800089a:	4919      	ldr	r1, [pc, #100]	; (8000900 <main+0xac>)
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <main+0xb0>)
 800089e:	f002 ffd1 	bl	8003844 <siprintf>
		HAL_UART_Transmit(&huart3, buffer, strlen((char*) buffer), 100);
 80008a2:	4818      	ldr	r0, [pc, #96]	; (8000904 <main+0xb0>)
 80008a4:	f7ff fca4 	bl	80001f0 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	4915      	ldr	r1, [pc, #84]	; (8000904 <main+0xb0>)
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <main+0xa4>)
 80008b2:	f001 ff52 	bl	800275a <HAL_UART_Transmit>
		printf("buffer 1 is ___%d\r\n", buffer[0]);
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0xb0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0xb4>)
 80008be:	f002 ffa9 	bl	8003814 <iprintf>
		printf("buffer 2 is ___%d\r\n", buffer[1]);
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <main+0xb0>)
 80008c4:	785b      	ldrb	r3, [r3, #1]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <main+0xb8>)
 80008ca:	f002 ffa3 	bl	8003814 <iprintf>
		printf("buffer 3 is ___%d\r\n", buffer[2]);
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <main+0xb0>)
 80008d0:	789b      	ldrb	r3, [r3, #2]
 80008d2:	4619      	mov	r1, r3
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <main+0xbc>)
 80008d6:	f002 ff9d 	bl	8003814 <iprintf>
		printf("buffer 4 is ___%d\r\n", buffer[3]);
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <main+0xb0>)
 80008dc:	78db      	ldrb	r3, [r3, #3]
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <main+0xc0>)
 80008e2:	f002 ff97 	bl	8003814 <iprintf>
		HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fa97 	bl	8000e1c <HAL_Delay>
	while (1) {
 80008ee:	e7c5      	b.n	800087c <main+0x28>
 80008f0:	08004b00 	.word	0x08004b00
 80008f4:	200001d4 	.word	0x200001d4
 80008f8:	200001dc 	.word	0x200001dc
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	08004b10 	.word	0x08004b10
 8000904:	200000d4 	.word	0x200000d4
 8000908:	08004b1c 	.word	0x08004b1c
 800090c:	08004b30 	.word	0x08004b30
 8000910:	08004b44 	.word	0x08004b44
 8000914:	08004b58 	.word	0x08004b58

08000918 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 ff6c 	bl	8003804 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <SystemClock_Config+0xd8>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a2a      	ldr	r2, [pc, #168]	; (80009f0 <SystemClock_Config+0xd8>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <SystemClock_Config+0xd8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xdc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <SystemClock_Config+0xdc>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <SystemClock_Config+0xdc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000988:	2308      	movs	r3, #8
 800098a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800098c:	23b4      	movs	r3, #180	; 0xb4
 800098e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f001 f9f7 	bl	8001d90 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x94>
		Error_Handler();
 80009a8:	f000 f826 	bl	80009f8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80009ac:	f001 f9a0 	bl	8001cf0 <HAL_PWREx_EnableOverDrive>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xa2>
		Error_Handler();
 80009b6:	f000 f81f 	bl	80009f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2105      	movs	r1, #5
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fc51 	bl	8002280 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xd0>
		Error_Handler();
 80009e4:	f000 f808 	bl	80009f8 <Error_Handler>
	}
}
 80009e8:	bf00      	nop
 80009ea:	3750      	adds	r7, #80	; 0x50
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f99c 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART3_IRQHandler+0x10>)
 8000aae:	f001 ff17 	bl	80028e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001dc 	.word	0x200001dc

08000abc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e00a      	b.n	8000ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ace:	f3af 8000 	nop.w
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60ba      	str	r2, [r7, #8]
 8000ada:	b2ca      	uxtb	r2, r1
 8000adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf0      	blt.n	8000ace <_read+0x12>
  }

  return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_isatty>:

int _isatty(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f002 fe0e 	bl	80037b0 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20030000 	.word	0x20030000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200001d8 	.word	0x200001d8
 8000bc8:	20000238 	.word	0x20000238

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART3_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000bfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000c28:	f001 fd4a 	bl	80026c0 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f7ff fee1 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001dc 	.word	0x200001dc
 8000c40:	40004800 	.word	0x40004800

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_UART_MspInit+0x94>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d134      	bne.n	8000cd0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_UART_MspInit+0x9c>)
 8000cbc:	f000 fe52 	bl	8001964 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2027      	movs	r0, #39	; 0x27
 8000cc6:	f000 fd84 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cca:	2027      	movs	r0, #39	; 0x27
 8000ccc:	f000 fd9d 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ff5d 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f002 fd53 	bl	80037bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fd9d 	bl	8000854 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d28:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 8000d2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d30:	20000234 	.word	0x20000234

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 fd2b 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe4a 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fd43 	bl	8001826 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 fd0b 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000220 	.word	0x20000220

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000220 	.word	0x20000220

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e033      	b.n	8000ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d109      	bne.n	8000e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fbe0 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d118      	bne.n	8000ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	f043 0202 	orr.w	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 fab4 	bl	8001424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f023 0303 	bic.w	r3, r3, #3
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed2:	e001      	b.n	8000ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Start+0x1a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e0b2      	b.n	800106c <HAL_ADC_Start+0x180>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d018      	beq.n	8000f4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0201 	orr.w	r2, r2, #1
 8000f2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2c:	4b52      	ldr	r3, [pc, #328]	; (8001078 <HAL_ADC_Start+0x18c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a52      	ldr	r2, [pc, #328]	; (800107c <HAL_ADC_Start+0x190>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9a      	lsrs	r2, r3, #18
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f9      	bne.n	8000f42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d17a      	bne.n	8001052 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f9a:	d106      	bne.n	8000faa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f023 0206 	bic.w	r2, r3, #6
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_ADC_Start+0x194>)
 8000fba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d12a      	bne.n	8001028 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <HAL_ADC_Start+0x198>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d015      	beq.n	8001008 <HAL_ADC_Start+0x11c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a29      	ldr	r2, [pc, #164]	; (8001088 <HAL_ADC_Start+0x19c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d105      	bne.n	8000ff2 <HAL_ADC_Start+0x106>
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_ADC_Start+0x194>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00a      	beq.n	8001008 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <HAL_ADC_Start+0x1a0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d136      	bne.n	800106a <HAL_ADC_Start+0x17e>
 8000ffc:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_ADC_Start+0x194>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	2b00      	cmp	r3, #0
 8001006:	d130      	bne.n	800106a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d129      	bne.n	800106a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	e020      	b.n	800106a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a15      	ldr	r2, [pc, #84]	; (8001084 <HAL_ADC_Start+0x198>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11b      	bne.n	800106a <HAL_ADC_Start+0x17e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d114      	bne.n	800106a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	e00b      	b.n	800106a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f043 0210 	orr.w	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	20000000 	.word	0x20000000
 800107c:	431bde83 	.word	0x431bde83
 8001080:	40012300 	.word	0x40012300
 8001084:	40012000 	.word	0x40012000
 8001088:	40012100 	.word	0x40012100
 800108c:	40012200 	.word	0x40012200

08001090 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ac:	d113      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010bc:	d10b      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f043 0220 	orr.w	r2, r3, #32
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e063      	b.n	800119e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80010d6:	f7ff fe95 	bl	8000e04 <HAL_GetTick>
 80010da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010dc:	e021      	b.n	8001122 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d01d      	beq.n	8001122 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <HAL_ADC_PollForConversion+0x6c>
 80010ec:	f7ff fe8a 	bl	8000e04 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d212      	bcs.n	8001122 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b02      	cmp	r3, #2
 8001108:	d00b      	beq.n	8001122 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f043 0204 	orr.w	r2, r3, #4
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e03d      	b.n	800119e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b02      	cmp	r3, #2
 800112e:	d1d6      	bne.n	80010de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0212 	mvn.w	r2, #18
 8001138:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d123      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11f      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001174:	2b00      	cmp	r3, #0
 8001176:	d111      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1c>
 80011d8:	2302      	movs	r3, #2
 80011da:	e113      	b.n	8001404 <HAL_ADC_ConfigChannel+0x244>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d925      	bls.n	8001238 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68d9      	ldr	r1, [r3, #12]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	3b1e      	subs	r3, #30
 8001202:	2207      	movs	r2, #7
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43da      	mvns	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	400a      	ands	r2, r1
 8001210:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68d9      	ldr	r1, [r3, #12]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	4603      	mov	r3, r0
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4403      	add	r3, r0
 800122a:	3b1e      	subs	r3, #30
 800122c:	409a      	lsls	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	e022      	b.n	800127e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6919      	ldr	r1, [r3, #16]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	2207      	movs	r2, #7
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	400a      	ands	r2, r1
 800125a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4403      	add	r3, r0
 8001274:	409a      	lsls	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b06      	cmp	r3, #6
 8001284:	d824      	bhi.n	80012d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b05      	subs	r3, #5
 8001298:	221f      	movs	r2, #31
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	400a      	ands	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	3b05      	subs	r3, #5
 80012c2:	fa00 f203 	lsl.w	r2, r0, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
 80012ce:	e04c      	b.n	800136a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b0c      	cmp	r3, #12
 80012d6:	d824      	bhi.n	8001322 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b23      	subs	r3, #35	; 0x23
 80012ea:	221f      	movs	r2, #31
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43da      	mvns	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	400a      	ands	r2, r1
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b23      	subs	r3, #35	; 0x23
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	631a      	str	r2, [r3, #48]	; 0x30
 8001320:	e023      	b.n	800136a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b41      	subs	r3, #65	; 0x41
 8001334:	221f      	movs	r2, #31
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	400a      	ands	r2, r1
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3b41      	subs	r3, #65	; 0x41
 800135e:	fa00 f203 	lsl.w	r2, r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_ADC_ConfigChannel+0x250>)
 800136c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_ADC_ConfigChannel+0x254>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10f      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1d8>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b12      	cmp	r3, #18
 800137e:	d10b      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_ADC_ConfigChannel+0x254>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x23a>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_ADC_ConfigChannel+0x258>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x1f4>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b11      	cmp	r3, #17
 80013b2:	d122      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <HAL_ADC_ConfigChannel+0x258>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d111      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_ADC_ConfigChannel+0x25c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x260>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	0c9a      	lsrs	r2, r3, #18
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f9      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40012300 	.word	0x40012300
 8001414:	40012000 	.word	0x40012000
 8001418:	10000012 	.word	0x10000012
 800141c:	20000000 	.word	0x20000000
 8001420:	431bde83 	.word	0x431bde83

08001424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142c:	4b79      	ldr	r3, [pc, #484]	; (8001614 <ADC_Init+0x1f0>)
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	431a      	orrs	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	021a      	lsls	r2, r3, #8
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <ADC_Init+0x1f4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6899      	ldr	r1, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	e00f      	b.n	8001522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0202 	bic.w	r2, r2, #2
 8001530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e1b      	ldrb	r3, [r3, #24]
 800153c:	005a      	lsls	r2, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01b      	beq.n	8001588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800155e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800156e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	3b01      	subs	r3, #1
 800157c:	035a      	lsls	r2, r3, #13
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	e007      	b.n	8001598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	051a      	lsls	r2, r3, #20
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	025a      	lsls	r2, r3, #9
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	029a      	lsls	r2, r3, #10
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40012300 	.word	0x40012300
 8001618:	0f000001 	.word	0x0f000001

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_EnableIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e100 	.word	0xe000e100

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff29 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff3e 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff31 	bl	8001680 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fada 	bl	8000e04 <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d008      	beq.n	8001870 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e052      	b.n	8001916 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0216 	bic.w	r2, r2, #22
 800187e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <HAL_DMA_Abort+0x62>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0208 	bic.w	r2, r2, #8
 80018ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	e013      	b.n	80018ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c2:	f7ff fa9f 	bl	8000e04 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d90c      	bls.n	80018ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2203      	movs	r2, #3
 80018da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e015      	b.n	8001916 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1e4      	bne.n	80018c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d004      	beq.n	800193c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e00c      	b.n	8001956 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2205      	movs	r2, #5
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e177      	b.n	8001c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8166 	bne.w	8001c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80c0 	beq.w	8001c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d037      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	e012      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	e010      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae84 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff f872 	bl	8000e04 <HAL_GetTick>
 8001d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d22:	e009      	b.n	8001d38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d24:	f7ff f86e 	bl	8000e04 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d32:	d901      	bls.n	8001d38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e01f      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d1ee      	bne.n	8001d24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff f85a 	bl	8000e04 <HAL_GetTick>
 8001d50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d52:	e009      	b.n	8001d68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d54:	f7ff f856 	bl	8000e04 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d62:	d901      	bls.n	8001d68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e007      	b.n	8001d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d74:	d1ee      	bne.n	8001d54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	420e0040 	.word	0x420e0040
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	420e0044 	.word	0x420e0044

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e267      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d00c      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d112      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b7e      	ldr	r3, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x108>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d157      	bne.n	8001e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e242      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x74>
 8001df6:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x98>
 8001e0e:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a6f      	ldr	r2, [pc, #444]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6c      	ldr	r2, [pc, #432]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a68      	ldr	r2, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7fe ffdc 	bl	8000e04 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e50:	f7fe ffd8 	bl	8000e04 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e207      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xc0>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7fe ffc8 	bl	8000e04 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe ffc4 	bl	8000e04 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1f3      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xe8>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d11c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e1c7      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	e03a      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f06:	f7fe ff7d 	bl	8000e04 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7fe ff79 	bl	8000e04 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e1a8      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4925      	ldr	r1, [pc, #148]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x244>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe ff5c 	bl	8000e04 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f50:	f7fe ff58 	bl	8000e04 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e187      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d036      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff3c 	bl	8000e04 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f90:	f7fe ff38 	bl	8000e04 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e167      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x200>
 8001fae:	e01b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_OscConfig+0x248>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ff25 	bl	8000e04 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	e00e      	b.n	8001fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ff21 	bl	8000e04 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d907      	bls.n	8001fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e150      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
 8001fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fdc:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ea      	bne.n	8001fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8097 	beq.w	8002124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b81      	ldr	r3, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a7c      	ldr	r2, [pc, #496]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b7a      	ldr	r3, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b77      	ldr	r3, [pc, #476]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a73      	ldr	r2, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7fe fee1 	bl	8000e04 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7fe fedd 	bl	8000e04 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e10c      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x474>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x2ea>
 800206c:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6713      	str	r3, [r2, #112]	; 0x70
 8002078:	e01c      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b05      	cmp	r3, #5
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x30c>
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a5e      	ldr	r2, [pc, #376]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x324>
 800209c:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
 80020a8:	4b55      	ldr	r3, [pc, #340]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a54      	ldr	r2, [pc, #336]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe fea2 	bl	8000e04 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fe9e 	bl	8000e04 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0cb      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0ee      	beq.n	80020c4 <HAL_RCC_OscConfig+0x334>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fe8c 	bl	8000e04 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe fe88 	bl	8000e04 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0b5      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ee      	bne.n	80020f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a1 	beq.w	8002270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800212e:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b08      	cmp	r3, #8
 8002138:	d05c      	beq.n	80021f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d141      	bne.n	80021c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fe5c 	bl	8000e04 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fe58 	bl	8000e04 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e087      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	491b      	ldr	r1, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fe31 	bl	8000e04 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fe2d 	bl	8000e04 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e05c      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x416>
 80021c4:	e054      	b.n	8002270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_RCC_OscConfig+0x478>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe1a 	bl	8000e04 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fe16 	bl	8000e04 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e045      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_OscConfig+0x470>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x444>
 80021f2:	e03d      	b.n	8002270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e038      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000
 8002208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4ec>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d028      	beq.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d121      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d11a      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d111      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	3b01      	subs	r3, #1
 8002256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fd48 	bl	8000e04 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fd44 	bl	8000e04 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fca8 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	08004b6c 	.word	0x08004b6c
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b094      	sub	sp, #80	; 0x50
 8002452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	2300      	movs	r3, #0
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	2300      	movs	r3, #0
 800245e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002464:	4b79      	ldr	r3, [pc, #484]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d00d      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x40>
 8002470:	2b08      	cmp	r3, #8
 8002472:	f200 80e1 	bhi.w	8002638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x34>
 800247a:	2b04      	cmp	r3, #4
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x3a>
 800247e:	e0db      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_GetSysClockFreq+0x204>)
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002484:	e0db      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <HAL_RCC_GetSysClockFreq+0x208>)
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800248a:	e0d8      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800248c:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002496:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	099b      	lsrs	r3, r3, #6
 80024a8:	2200      	movs	r2, #0
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024be:	4622      	mov	r2, r4
 80024c0:	462b      	mov	r3, r5
 80024c2:	f04f 0000 	mov.w	r0, #0
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	0159      	lsls	r1, r3, #5
 80024cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d0:	0150      	lsls	r0, r2, #5
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4621      	mov	r1, r4
 80024d8:	1a51      	subs	r1, r2, r1
 80024da:	6139      	str	r1, [r7, #16]
 80024dc:	4629      	mov	r1, r5
 80024de:	eb63 0301 	sbc.w	r3, r3, r1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f0:	4659      	mov	r1, fp
 80024f2:	018b      	lsls	r3, r1, #6
 80024f4:	4651      	mov	r1, sl
 80024f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024fa:	4651      	mov	r1, sl
 80024fc:	018a      	lsls	r2, r1, #6
 80024fe:	4651      	mov	r1, sl
 8002500:	ebb2 0801 	subs.w	r8, r2, r1
 8002504:	4659      	mov	r1, fp
 8002506:	eb63 0901 	sbc.w	r9, r3, r1
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800251a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800251e:	4690      	mov	r8, r2
 8002520:	4699      	mov	r9, r3
 8002522:	4623      	mov	r3, r4
 8002524:	eb18 0303 	adds.w	r3, r8, r3
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	462b      	mov	r3, r5
 800252c:	eb49 0303 	adc.w	r3, r9, r3
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800253e:	4629      	mov	r1, r5
 8002540:	024b      	lsls	r3, r1, #9
 8002542:	4621      	mov	r1, r4
 8002544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002548:	4621      	mov	r1, r4
 800254a:	024a      	lsls	r2, r1, #9
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	2200      	movs	r2, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
 8002556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800255c:	f7fd fea0 	bl	80002a0 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	e058      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	2200      	movs	r2, #0
 8002572:	4618      	mov	r0, r3
 8002574:	4611      	mov	r1, r2
 8002576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
 8002580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002584:	4642      	mov	r2, r8
 8002586:	464b      	mov	r3, r9
 8002588:	f04f 0000 	mov.w	r0, #0
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	0159      	lsls	r1, r3, #5
 8002592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002596:	0150      	lsls	r0, r2, #5
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4641      	mov	r1, r8
 800259e:	ebb2 0a01 	subs.w	sl, r2, r1
 80025a2:	4649      	mov	r1, r9
 80025a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025bc:	ebb2 040a 	subs.w	r4, r2, sl
 80025c0:	eb63 050b 	sbc.w	r5, r3, fp
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d2:	00e2      	lsls	r2, r4, #3
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4643      	mov	r3, r8
 80025da:	18e3      	adds	r3, r4, r3
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	464b      	mov	r3, r9
 80025e0:	eb45 0303 	adc.w	r3, r5, r3
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025f2:	4629      	mov	r1, r5
 80025f4:	028b      	lsls	r3, r1, #10
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025fc:	4621      	mov	r1, r4
 80025fe:	028a      	lsls	r2, r1, #10
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	61fa      	str	r2, [r7, #28]
 800260c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002610:	f7fd fe46 	bl	80002a0 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0x200>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800262c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetSysClockFreq+0x204>)
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002640:	4618      	mov	r0, r3
 8002642:	3750      	adds	r7, #80	; 0x50
 8002644:	46bd      	mov	sp, r7
 8002646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	00f42400 	.word	0x00f42400
 8002654:	007a1200 	.word	0x007a1200

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_RCC_GetHCLKFreq+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000000 	.word	0x20000000

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002674:	f7ff fff0 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0a9b      	lsrs	r3, r3, #10
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4903      	ldr	r1, [pc, #12]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	08004b7c 	.word	0x08004b7c

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800269c:	f7ff ffdc 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0b5b      	lsrs	r3, r3, #13
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08004b7c 	.word	0x08004b7c

080026c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e03f      	b.n	8002752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe faac 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fddf 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b08a      	sub	sp, #40	; 0x28
 800275e:	af02      	add	r7, sp, #8
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	d17c      	bne.n	8002874 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_UART_Transmit+0x2c>
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e075      	b.n	8002876 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_UART_Transmit+0x3e>
 8002794:	2302      	movs	r3, #2
 8002796:	e06e      	b.n	8002876 <HAL_UART_Transmit+0x11c>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ae:	f7fe fb29 	bl	8000e04 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c8:	d108      	bne.n	80027dc <HAL_UART_Transmit+0x82>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e003      	b.n	80027e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027ec:	e02a      	b.n	8002844 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fb1f 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e036      	b.n	8002876 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10b      	bne.n	8002826 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	3302      	adds	r3, #2
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	e007      	b.n	8002836 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3301      	adds	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1cf      	bne.n	80027ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 faef 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e006      	b.n	8002876 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b20      	cmp	r3, #32
 8002896:	d11d      	bne.n	80028d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <HAL_UART_Receive_IT+0x26>
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e016      	b.n	80028d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Receive_IT+0x38>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e00f      	b.n	80028d6 <HAL_UART_Receive_IT+0x58>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fb24 	bl	8002f18 <UART_Start_Receive_IT>
 80028d0:	4603      	mov	r3, r0
 80028d2:	e000      	b.n	80028d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0ba      	sub	sp, #232	; 0xe8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800291e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_UART_IRQHandler+0x66>
 8002932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fc07 	bl	8003152 <UART_Receive_IT>
      return;
 8002944:	e256      	b.n	8002df4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80de 	beq.w	8002b0c <HAL_UART_IRQHandler+0x22c>
 8002950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d106      	bne.n	800296a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002960:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80d1 	beq.w	8002b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_UART_IRQHandler+0xae>
 8002976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_UART_IRQHandler+0xd2>
 800299a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f043 0202 	orr.w	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_UART_IRQHandler+0xf6>
 80029be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0204 	orr.w	r2, r3, #4
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d011      	beq.n	8002a06 <HAL_UART_IRQHandler+0x126>
 80029e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0208 	orr.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 81ed 	beq.w	8002dea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_UART_IRQHandler+0x14e>
 8002a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb92 	bl	8003152 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_UART_IRQHandler+0x17a>
 8002a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d04f      	beq.n	8002afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa9a 	bl	8002f94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d141      	bne.n	8002af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3314      	adds	r3, #20
 8002a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1d9      	bne.n	8002a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d013      	beq.n	8002aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	4a7d      	ldr	r2, [pc, #500]	; (8002cbc <HAL_UART_IRQHandler+0x3dc>)
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe ff25 	bl	800191e <HAL_DMA_Abort_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	e00e      	b.n	8002b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f990 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	e00a      	b.n	8002b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f98c 	bl	8002e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	e006      	b.n	8002b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f988 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b06:	e170      	b.n	8002dea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	bf00      	nop
    return;
 8002b0a:	e16e      	b.n	8002dea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 814a 	bne.w	8002daa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8143 	beq.w	8002daa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 813c 	beq.w	8002daa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	f040 80b4 	bne.w	8002cc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8140 	beq.w	8002dee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b76:	429a      	cmp	r2, r3
 8002b78:	f080 8139 	bcs.w	8002dee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b8e:	f000 8088 	beq.w	8002ca2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1d9      	bne.n	8002b92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e1      	bne.n	8002bde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e3      	bne.n	8002c1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	330c      	adds	r3, #12
 8002c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002c84:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8c:	e841 2300 	strex	r3, r2, [r1]
 8002c90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e3      	bne.n	8002c60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe fdce 	bl	800183e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8b6 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cb8:	e099      	b.n	8002dee <HAL_UART_IRQHandler+0x50e>
 8002cba:	bf00      	nop
 8002cbc:	0800305b 	.word	0x0800305b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 808b 	beq.w	8002df2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8086 	beq.w	8002df2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3314      	adds	r3, #20
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3314      	adds	r3, #20
 8002d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d42:	633a      	str	r2, [r7, #48]	; 0x30
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e3      	bne.n	8002d1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0310 	bic.w	r3, r3, #16
 8002d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d88:	61fa      	str	r2, [r7, #28]
 8002d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	617b      	str	r3, [r7, #20]
   return(result);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e3      	bne.n	8002d64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f83e 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da8:	e023      	b.n	8002df2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_UART_IRQHandler+0x4ea>
 8002db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f95d 	bl	8003082 <UART_Transmit_IT>
    return;
 8002dc8:	e014      	b.n	8002df4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00e      	beq.n	8002df4 <HAL_UART_IRQHandler+0x514>
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f99d 	bl	8003122 <UART_EndTransmit_IT>
    return;
 8002de8:	e004      	b.n	8002df4 <HAL_UART_IRQHandler+0x514>
    return;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <HAL_UART_IRQHandler+0x514>
      return;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_UART_IRQHandler+0x514>
      return;
 8002df2:	bf00      	nop
  }
}
 8002df4:	37e8      	adds	r7, #232	; 0xe8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop

08002dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b090      	sub	sp, #64	; 0x40
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	e050      	b.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d04c      	beq.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e5c:	f7fd ffd2 	bl	8000e04 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d241      	bcs.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8c:	637a      	str	r2, [r7, #52]	; 0x34
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e5      	bne.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec0:	623a      	str	r2, [r7, #32]
 8002ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	69f9      	ldr	r1, [r7, #28]
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e00f      	b.n	8002f10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d09f      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3740      	adds	r7, #64	; 0x40
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2222      	movs	r2, #34	; 0x22
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b095      	sub	sp, #84	; 0x54
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbc:	643a      	str	r2, [r7, #64]	; 0x40
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e5      	bne.n	8002f9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	2b01      	cmp	r3, #1
 800300a:	d119      	bne.n	8003040 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	60bb      	str	r3, [r7, #8]
   return(result);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f023 0310 	bic.w	r3, r3, #16
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800302c:	61ba      	str	r2, [r7, #24]
 800302e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	613b      	str	r3, [r7, #16]
   return(result);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800304e:	bf00      	nop
 8003050:	3754      	adds	r7, #84	; 0x54
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fecb 	bl	8002e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b21      	cmp	r3, #33	; 0x21
 8003094:	d13e      	bne.n	8003114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d114      	bne.n	80030ca <UART_Transmit_IT+0x48>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d110      	bne.n	80030ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	1c9a      	adds	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	621a      	str	r2, [r3, #32]
 80030c8:	e008      	b.n	80030dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6211      	str	r1, [r2, #32]
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
  }
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003138:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fe5a 	bl	8002dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b22      	cmp	r3, #34	; 0x22
 8003164:	f040 80ab 	bne.w	80032be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003170:	d117      	bne.n	80031a2 <UART_Receive_IT+0x50>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	b29a      	uxth	r2, r3
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
 80031a0:	e026      	b.n	80031f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d007      	beq.n	80031c6 <UART_Receive_IT+0x74>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <UART_Receive_IT+0x82>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e008      	b.n	80031e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003200:	2b00      	cmp	r3, #0
 8003202:	d15a      	bne.n	80032ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0220 	bic.w	r2, r2, #32
 8003212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	2b01      	cmp	r3, #1
 8003242:	d135      	bne.n	80032b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	613b      	str	r3, [r7, #16]
   return(result);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326a:	623a      	str	r2, [r7, #32]
 800326c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	69f9      	ldr	r1, [r7, #28]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	61bb      	str	r3, [r7, #24]
   return(result);
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d10a      	bne.n	80032a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fdbb 	bl	8002e24 <HAL_UARTEx_RxEventCallback>
 80032ae:	e002      	b.n	80032b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fa75 	bl	80007a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e002      	b.n	80032c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b0c0      	sub	sp, #256	; 0x100
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	68d9      	ldr	r1, [r3, #12]
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	ea40 0301 	orr.w	r3, r0, r1
 80032f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	431a      	orrs	r2, r3
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003320:	f021 010c 	bic.w	r1, r1, #12
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800332e:	430b      	orrs	r3, r1
 8003330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003342:	6999      	ldr	r1, [r3, #24]
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	ea40 0301 	orr.w	r3, r0, r1
 800334e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <UART_SetConfig+0x2cc>)
 8003358:	429a      	cmp	r2, r3
 800335a:	d005      	beq.n	8003368 <UART_SetConfig+0xa0>
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <UART_SetConfig+0x2d0>)
 8003364:	429a      	cmp	r2, r3
 8003366:	d104      	bne.n	8003372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7ff f996 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 800336c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003370:	e003      	b.n	800337a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003372:	f7ff f97d 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8003376:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	f040 810c 	bne.w	80035a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338c:	2200      	movs	r2, #0
 800338e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003392:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	1891      	adds	r1, r2, r2
 80033a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033a2:	415b      	adcs	r3, r3
 80033a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033aa:	4621      	mov	r1, r4
 80033ac:	eb12 0801 	adds.w	r8, r2, r1
 80033b0:	4629      	mov	r1, r5
 80033b2:	eb43 0901 	adc.w	r9, r3, r1
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ca:	4690      	mov	r8, r2
 80033cc:	4699      	mov	r9, r3
 80033ce:	4623      	mov	r3, r4
 80033d0:	eb18 0303 	adds.w	r3, r8, r3
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033d8:	462b      	mov	r3, r5
 80033da:	eb49 0303 	adc.w	r3, r9, r3
 80033de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033f6:	460b      	mov	r3, r1
 80033f8:	18db      	adds	r3, r3, r3
 80033fa:	653b      	str	r3, [r7, #80]	; 0x50
 80033fc:	4613      	mov	r3, r2
 80033fe:	eb42 0303 	adc.w	r3, r2, r3
 8003402:	657b      	str	r3, [r7, #84]	; 0x54
 8003404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800340c:	f7fc ff48 	bl	80002a0 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <UART_SetConfig+0x2d4>)
 8003416:	fba3 2302 	umull	r2, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	011c      	lsls	r4, r3, #4
 800341e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003422:	2200      	movs	r2, #0
 8003424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003428:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800342c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003430:	4642      	mov	r2, r8
 8003432:	464b      	mov	r3, r9
 8003434:	1891      	adds	r1, r2, r2
 8003436:	64b9      	str	r1, [r7, #72]	; 0x48
 8003438:	415b      	adcs	r3, r3
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800343c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003440:	4641      	mov	r1, r8
 8003442:	eb12 0a01 	adds.w	sl, r2, r1
 8003446:	4649      	mov	r1, r9
 8003448:	eb43 0b01 	adc.w	fp, r3, r1
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800345c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003460:	4692      	mov	sl, r2
 8003462:	469b      	mov	fp, r3
 8003464:	4643      	mov	r3, r8
 8003466:	eb1a 0303 	adds.w	r3, sl, r3
 800346a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800346e:	464b      	mov	r3, r9
 8003470:	eb4b 0303 	adc.w	r3, fp, r3
 8003474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003484:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800348c:	460b      	mov	r3, r1
 800348e:	18db      	adds	r3, r3, r3
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
 8003492:	4613      	mov	r3, r2
 8003494:	eb42 0303 	adc.w	r3, r2, r3
 8003498:	647b      	str	r3, [r7, #68]	; 0x44
 800349a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800349e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034a2:	f7fc fefd 	bl	80002a0 <__aeabi_uldivmod>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	4b3b      	ldr	r3, [pc, #236]	; (800359c <UART_SetConfig+0x2d4>)
 80034ae:	fba3 2301 	umull	r2, r3, r3, r1
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2264      	movs	r2, #100	; 0x64
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	1acb      	subs	r3, r1, r3
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034c2:	4b36      	ldr	r3, [pc, #216]	; (800359c <UART_SetConfig+0x2d4>)
 80034c4:	fba3 2302 	umull	r2, r3, r3, r2
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d0:	441c      	add	r4, r3
 80034d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	1891      	adds	r1, r2, r2
 80034ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80034ec:	415b      	adcs	r3, r3
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034f4:	4641      	mov	r1, r8
 80034f6:	1851      	adds	r1, r2, r1
 80034f8:	6339      	str	r1, [r7, #48]	; 0x30
 80034fa:	4649      	mov	r1, r9
 80034fc:	414b      	adcs	r3, r1
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800350c:	4659      	mov	r1, fp
 800350e:	00cb      	lsls	r3, r1, #3
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003516:	4651      	mov	r1, sl
 8003518:	00ca      	lsls	r2, r1, #3
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	4603      	mov	r3, r0
 8003520:	4642      	mov	r2, r8
 8003522:	189b      	adds	r3, r3, r2
 8003524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003528:	464b      	mov	r3, r9
 800352a:	460a      	mov	r2, r1
 800352c:	eb42 0303 	adc.w	r3, r2, r3
 8003530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003540:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003548:	460b      	mov	r3, r1
 800354a:	18db      	adds	r3, r3, r3
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	4613      	mov	r3, r2
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800355a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800355e:	f7fc fe9f 	bl	80002a0 <__aeabi_uldivmod>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <UART_SetConfig+0x2d4>)
 8003568:	fba3 1302 	umull	r1, r3, r3, r2
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	2164      	movs	r1, #100	; 0x64
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3332      	adds	r3, #50	; 0x32
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <UART_SetConfig+0x2d4>)
 800357c:	fba2 2303 	umull	r2, r3, r2, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	f003 0207 	and.w	r2, r3, #7
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4422      	add	r2, r4
 800358e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003590:	e105      	b.n	800379e <UART_SetConfig+0x4d6>
 8003592:	bf00      	nop
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035b2:	4642      	mov	r2, r8
 80035b4:	464b      	mov	r3, r9
 80035b6:	1891      	adds	r1, r2, r2
 80035b8:	6239      	str	r1, [r7, #32]
 80035ba:	415b      	adcs	r3, r3
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035c2:	4641      	mov	r1, r8
 80035c4:	1854      	adds	r4, r2, r1
 80035c6:	4649      	mov	r1, r9
 80035c8:	eb43 0501 	adc.w	r5, r3, r1
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	00eb      	lsls	r3, r5, #3
 80035d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035da:	00e2      	lsls	r2, r4, #3
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	4643      	mov	r3, r8
 80035e2:	18e3      	adds	r3, r4, r3
 80035e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e8:	464b      	mov	r3, r9
 80035ea:	eb45 0303 	adc.w	r3, r5, r3
 80035ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800360e:	4629      	mov	r1, r5
 8003610:	008b      	lsls	r3, r1, #2
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003618:	4621      	mov	r1, r4
 800361a:	008a      	lsls	r2, r1, #2
 800361c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003620:	f7fc fe3e 	bl	80002a0 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4b60      	ldr	r3, [pc, #384]	; (80037ac <UART_SetConfig+0x4e4>)
 800362a:	fba3 2302 	umull	r2, r3, r3, r2
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	011c      	lsls	r4, r3, #4
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800363c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	1891      	adds	r1, r2, r2
 800364a:	61b9      	str	r1, [r7, #24]
 800364c:	415b      	adcs	r3, r3
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003654:	4641      	mov	r1, r8
 8003656:	1851      	adds	r1, r2, r1
 8003658:	6139      	str	r1, [r7, #16]
 800365a:	4649      	mov	r1, r9
 800365c:	414b      	adcs	r3, r1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800366c:	4659      	mov	r1, fp
 800366e:	00cb      	lsls	r3, r1, #3
 8003670:	4651      	mov	r1, sl
 8003672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003676:	4651      	mov	r1, sl
 8003678:	00ca      	lsls	r2, r1, #3
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	4603      	mov	r3, r0
 8003680:	4642      	mov	r2, r8
 8003682:	189b      	adds	r3, r3, r2
 8003684:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	67bb      	str	r3, [r7, #120]	; 0x78
 800369e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036ac:	4649      	mov	r1, r9
 80036ae:	008b      	lsls	r3, r1, #2
 80036b0:	4641      	mov	r1, r8
 80036b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b6:	4641      	mov	r1, r8
 80036b8:	008a      	lsls	r2, r1, #2
 80036ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036be:	f7fc fdef 	bl	80002a0 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <UART_SetConfig+0x4e4>)
 80036c8:	fba3 1302 	umull	r1, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2164      	movs	r1, #100	; 0x64
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	3332      	adds	r3, #50	; 0x32
 80036da:	4a34      	ldr	r2, [pc, #208]	; (80037ac <UART_SetConfig+0x4e4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e6:	441c      	add	r4, r3
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	673b      	str	r3, [r7, #112]	; 0x70
 80036f0:	677a      	str	r2, [r7, #116]	; 0x74
 80036f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	415b      	adcs	r3, r3
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003706:	4641      	mov	r1, r8
 8003708:	1851      	adds	r1, r2, r1
 800370a:	6039      	str	r1, [r7, #0]
 800370c:	4649      	mov	r1, r9
 800370e:	414b      	adcs	r3, r1
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371e:	4659      	mov	r1, fp
 8003720:	00cb      	lsls	r3, r1, #3
 8003722:	4651      	mov	r1, sl
 8003724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003728:	4651      	mov	r1, sl
 800372a:	00ca      	lsls	r2, r1, #3
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	4603      	mov	r3, r0
 8003732:	4642      	mov	r2, r8
 8003734:	189b      	adds	r3, r3, r2
 8003736:	66bb      	str	r3, [r7, #104]	; 0x68
 8003738:	464b      	mov	r3, r9
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	663b      	str	r3, [r7, #96]	; 0x60
 800374c:	667a      	str	r2, [r7, #100]	; 0x64
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800375a:	4649      	mov	r1, r9
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	4641      	mov	r1, r8
 8003760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003764:	4641      	mov	r1, r8
 8003766:	008a      	lsls	r2, r1, #2
 8003768:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800376c:	f7fc fd98 	bl	80002a0 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <UART_SetConfig+0x4e4>)
 8003776:	fba3 1302 	umull	r1, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2164      	movs	r1, #100	; 0x64
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <UART_SetConfig+0x4e4>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4422      	add	r2, r4
 800379c:	609a      	str	r2, [r3, #8]
}
 800379e:	bf00      	nop
 80037a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037aa:	bf00      	nop
 80037ac:	51eb851f 	.word	0x51eb851f

080037b0 <__errno>:
 80037b0:	4b01      	ldr	r3, [pc, #4]	; (80037b8 <__errno+0x8>)
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	2000000c 	.word	0x2000000c

080037bc <__libc_init_array>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4d0d      	ldr	r5, [pc, #52]	; (80037f4 <__libc_init_array+0x38>)
 80037c0:	4c0d      	ldr	r4, [pc, #52]	; (80037f8 <__libc_init_array+0x3c>)
 80037c2:	1b64      	subs	r4, r4, r5
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	2600      	movs	r6, #0
 80037c8:	42a6      	cmp	r6, r4
 80037ca:	d109      	bne.n	80037e0 <__libc_init_array+0x24>
 80037cc:	4d0b      	ldr	r5, [pc, #44]	; (80037fc <__libc_init_array+0x40>)
 80037ce:	4c0c      	ldr	r4, [pc, #48]	; (8003800 <__libc_init_array+0x44>)
 80037d0:	f001 f98a 	bl	8004ae8 <_init>
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	2600      	movs	r6, #0
 80037da:	42a6      	cmp	r6, r4
 80037dc:	d105      	bne.n	80037ea <__libc_init_array+0x2e>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e4:	4798      	blx	r3
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7ee      	b.n	80037c8 <__libc_init_array+0xc>
 80037ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ee:	4798      	blx	r3
 80037f0:	3601      	adds	r6, #1
 80037f2:	e7f2      	b.n	80037da <__libc_init_array+0x1e>
 80037f4:	08004c24 	.word	0x08004c24
 80037f8:	08004c24 	.word	0x08004c24
 80037fc:	08004c24 	.word	0x08004c24
 8003800:	08004c28 	.word	0x08004c28

08003804 <memset>:
 8003804:	4402      	add	r2, r0
 8003806:	4603      	mov	r3, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <iprintf>:
 8003814:	b40f      	push	{r0, r1, r2, r3}
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <iprintf+0x2c>)
 8003818:	b513      	push	{r0, r1, r4, lr}
 800381a:	681c      	ldr	r4, [r3, #0]
 800381c:	b124      	cbz	r4, 8003828 <iprintf+0x14>
 800381e:	69a3      	ldr	r3, [r4, #24]
 8003820:	b913      	cbnz	r3, 8003828 <iprintf+0x14>
 8003822:	4620      	mov	r0, r4
 8003824:	f000 f886 	bl	8003934 <__sinit>
 8003828:	ab05      	add	r3, sp, #20
 800382a:	9a04      	ldr	r2, [sp, #16]
 800382c:	68a1      	ldr	r1, [r4, #8]
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	4620      	mov	r0, r4
 8003832:	f000 fb39 	bl	8003ea8 <_vfiprintf_r>
 8003836:	b002      	add	sp, #8
 8003838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800383c:	b004      	add	sp, #16
 800383e:	4770      	bx	lr
 8003840:	2000000c 	.word	0x2000000c

08003844 <siprintf>:
 8003844:	b40e      	push	{r1, r2, r3}
 8003846:	b500      	push	{lr}
 8003848:	b09c      	sub	sp, #112	; 0x70
 800384a:	ab1d      	add	r3, sp, #116	; 0x74
 800384c:	9002      	str	r0, [sp, #8]
 800384e:	9006      	str	r0, [sp, #24]
 8003850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003854:	4809      	ldr	r0, [pc, #36]	; (800387c <siprintf+0x38>)
 8003856:	9107      	str	r1, [sp, #28]
 8003858:	9104      	str	r1, [sp, #16]
 800385a:	4909      	ldr	r1, [pc, #36]	; (8003880 <siprintf+0x3c>)
 800385c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003860:	9105      	str	r1, [sp, #20]
 8003862:	6800      	ldr	r0, [r0, #0]
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	a902      	add	r1, sp, #8
 8003868:	f000 f9f4 	bl	8003c54 <_svfiprintf_r>
 800386c:	9b02      	ldr	r3, [sp, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	b01c      	add	sp, #112	; 0x70
 8003874:	f85d eb04 	ldr.w	lr, [sp], #4
 8003878:	b003      	add	sp, #12
 800387a:	4770      	bx	lr
 800387c:	2000000c 	.word	0x2000000c
 8003880:	ffff0208 	.word	0xffff0208

08003884 <std>:
 8003884:	2300      	movs	r3, #0
 8003886:	b510      	push	{r4, lr}
 8003888:	4604      	mov	r4, r0
 800388a:	e9c0 3300 	strd	r3, r3, [r0]
 800388e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003892:	6083      	str	r3, [r0, #8]
 8003894:	8181      	strh	r1, [r0, #12]
 8003896:	6643      	str	r3, [r0, #100]	; 0x64
 8003898:	81c2      	strh	r2, [r0, #14]
 800389a:	6183      	str	r3, [r0, #24]
 800389c:	4619      	mov	r1, r3
 800389e:	2208      	movs	r2, #8
 80038a0:	305c      	adds	r0, #92	; 0x5c
 80038a2:	f7ff ffaf 	bl	8003804 <memset>
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <std+0x38>)
 80038a8:	6263      	str	r3, [r4, #36]	; 0x24
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <std+0x3c>)
 80038ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <std+0x40>)
 80038b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <std+0x44>)
 80038b4:	6224      	str	r4, [r4, #32]
 80038b6:	6323      	str	r3, [r4, #48]	; 0x30
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	bf00      	nop
 80038bc:	08004451 	.word	0x08004451
 80038c0:	08004473 	.word	0x08004473
 80038c4:	080044ab 	.word	0x080044ab
 80038c8:	080044cf 	.word	0x080044cf

080038cc <_cleanup_r>:
 80038cc:	4901      	ldr	r1, [pc, #4]	; (80038d4 <_cleanup_r+0x8>)
 80038ce:	f000 b8af 	b.w	8003a30 <_fwalk_reent>
 80038d2:	bf00      	nop
 80038d4:	080047a9 	.word	0x080047a9

080038d8 <__sfmoreglue>:
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	2268      	movs	r2, #104	; 0x68
 80038dc:	1e4d      	subs	r5, r1, #1
 80038de:	4355      	muls	r5, r2
 80038e0:	460e      	mov	r6, r1
 80038e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038e6:	f000 f8e5 	bl	8003ab4 <_malloc_r>
 80038ea:	4604      	mov	r4, r0
 80038ec:	b140      	cbz	r0, 8003900 <__sfmoreglue+0x28>
 80038ee:	2100      	movs	r1, #0
 80038f0:	e9c0 1600 	strd	r1, r6, [r0]
 80038f4:	300c      	adds	r0, #12
 80038f6:	60a0      	str	r0, [r4, #8]
 80038f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038fc:	f7ff ff82 	bl	8003804 <memset>
 8003900:	4620      	mov	r0, r4
 8003902:	bd70      	pop	{r4, r5, r6, pc}

08003904 <__sfp_lock_acquire>:
 8003904:	4801      	ldr	r0, [pc, #4]	; (800390c <__sfp_lock_acquire+0x8>)
 8003906:	f000 b8b3 	b.w	8003a70 <__retarget_lock_acquire_recursive>
 800390a:	bf00      	nop
 800390c:	20000225 	.word	0x20000225

08003910 <__sfp_lock_release>:
 8003910:	4801      	ldr	r0, [pc, #4]	; (8003918 <__sfp_lock_release+0x8>)
 8003912:	f000 b8ae 	b.w	8003a72 <__retarget_lock_release_recursive>
 8003916:	bf00      	nop
 8003918:	20000225 	.word	0x20000225

0800391c <__sinit_lock_acquire>:
 800391c:	4801      	ldr	r0, [pc, #4]	; (8003924 <__sinit_lock_acquire+0x8>)
 800391e:	f000 b8a7 	b.w	8003a70 <__retarget_lock_acquire_recursive>
 8003922:	bf00      	nop
 8003924:	20000226 	.word	0x20000226

08003928 <__sinit_lock_release>:
 8003928:	4801      	ldr	r0, [pc, #4]	; (8003930 <__sinit_lock_release+0x8>)
 800392a:	f000 b8a2 	b.w	8003a72 <__retarget_lock_release_recursive>
 800392e:	bf00      	nop
 8003930:	20000226 	.word	0x20000226

08003934 <__sinit>:
 8003934:	b510      	push	{r4, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	f7ff fff0 	bl	800391c <__sinit_lock_acquire>
 800393c:	69a3      	ldr	r3, [r4, #24]
 800393e:	b11b      	cbz	r3, 8003948 <__sinit+0x14>
 8003940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003944:	f7ff bff0 	b.w	8003928 <__sinit_lock_release>
 8003948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800394c:	6523      	str	r3, [r4, #80]	; 0x50
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <__sinit+0x68>)
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <__sinit+0x6c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	62a2      	str	r2, [r4, #40]	; 0x28
 8003956:	42a3      	cmp	r3, r4
 8003958:	bf04      	itt	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	61a3      	streq	r3, [r4, #24]
 800395e:	4620      	mov	r0, r4
 8003960:	f000 f820 	bl	80039a4 <__sfp>
 8003964:	6060      	str	r0, [r4, #4]
 8003966:	4620      	mov	r0, r4
 8003968:	f000 f81c 	bl	80039a4 <__sfp>
 800396c:	60a0      	str	r0, [r4, #8]
 800396e:	4620      	mov	r0, r4
 8003970:	f000 f818 	bl	80039a4 <__sfp>
 8003974:	2200      	movs	r2, #0
 8003976:	60e0      	str	r0, [r4, #12]
 8003978:	2104      	movs	r1, #4
 800397a:	6860      	ldr	r0, [r4, #4]
 800397c:	f7ff ff82 	bl	8003884 <std>
 8003980:	68a0      	ldr	r0, [r4, #8]
 8003982:	2201      	movs	r2, #1
 8003984:	2109      	movs	r1, #9
 8003986:	f7ff ff7d 	bl	8003884 <std>
 800398a:	68e0      	ldr	r0, [r4, #12]
 800398c:	2202      	movs	r2, #2
 800398e:	2112      	movs	r1, #18
 8003990:	f7ff ff78 	bl	8003884 <std>
 8003994:	2301      	movs	r3, #1
 8003996:	61a3      	str	r3, [r4, #24]
 8003998:	e7d2      	b.n	8003940 <__sinit+0xc>
 800399a:	bf00      	nop
 800399c:	08004b84 	.word	0x08004b84
 80039a0:	080038cd 	.word	0x080038cd

080039a4 <__sfp>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	4607      	mov	r7, r0
 80039a8:	f7ff ffac 	bl	8003904 <__sfp_lock_acquire>
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <__sfp+0x84>)
 80039ae:	681e      	ldr	r6, [r3, #0]
 80039b0:	69b3      	ldr	r3, [r6, #24]
 80039b2:	b913      	cbnz	r3, 80039ba <__sfp+0x16>
 80039b4:	4630      	mov	r0, r6
 80039b6:	f7ff ffbd 	bl	8003934 <__sinit>
 80039ba:	3648      	adds	r6, #72	; 0x48
 80039bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	d503      	bpl.n	80039cc <__sfp+0x28>
 80039c4:	6833      	ldr	r3, [r6, #0]
 80039c6:	b30b      	cbz	r3, 8003a0c <__sfp+0x68>
 80039c8:	6836      	ldr	r6, [r6, #0]
 80039ca:	e7f7      	b.n	80039bc <__sfp+0x18>
 80039cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039d0:	b9d5      	cbnz	r5, 8003a08 <__sfp+0x64>
 80039d2:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <__sfp+0x88>)
 80039d4:	60e3      	str	r3, [r4, #12]
 80039d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039da:	6665      	str	r5, [r4, #100]	; 0x64
 80039dc:	f000 f847 	bl	8003a6e <__retarget_lock_init_recursive>
 80039e0:	f7ff ff96 	bl	8003910 <__sfp_lock_release>
 80039e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039ec:	6025      	str	r5, [r4, #0]
 80039ee:	61a5      	str	r5, [r4, #24]
 80039f0:	2208      	movs	r2, #8
 80039f2:	4629      	mov	r1, r5
 80039f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039f8:	f7ff ff04 	bl	8003804 <memset>
 80039fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a04:	4620      	mov	r0, r4
 8003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a08:	3468      	adds	r4, #104	; 0x68
 8003a0a:	e7d9      	b.n	80039c0 <__sfp+0x1c>
 8003a0c:	2104      	movs	r1, #4
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f7ff ff62 	bl	80038d8 <__sfmoreglue>
 8003a14:	4604      	mov	r4, r0
 8003a16:	6030      	str	r0, [r6, #0]
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d1d5      	bne.n	80039c8 <__sfp+0x24>
 8003a1c:	f7ff ff78 	bl	8003910 <__sfp_lock_release>
 8003a20:	230c      	movs	r3, #12
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	e7ee      	b.n	8003a04 <__sfp+0x60>
 8003a26:	bf00      	nop
 8003a28:	08004b84 	.word	0x08004b84
 8003a2c:	ffff0001 	.word	0xffff0001

08003a30 <_fwalk_reent>:
 8003a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a34:	4606      	mov	r6, r0
 8003a36:	4688      	mov	r8, r1
 8003a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a3c:	2700      	movs	r7, #0
 8003a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a42:	f1b9 0901 	subs.w	r9, r9, #1
 8003a46:	d505      	bpl.n	8003a54 <_fwalk_reent+0x24>
 8003a48:	6824      	ldr	r4, [r4, #0]
 8003a4a:	2c00      	cmp	r4, #0
 8003a4c:	d1f7      	bne.n	8003a3e <_fwalk_reent+0xe>
 8003a4e:	4638      	mov	r0, r7
 8003a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a54:	89ab      	ldrh	r3, [r5, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d907      	bls.n	8003a6a <_fwalk_reent+0x3a>
 8003a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	d003      	beq.n	8003a6a <_fwalk_reent+0x3a>
 8003a62:	4629      	mov	r1, r5
 8003a64:	4630      	mov	r0, r6
 8003a66:	47c0      	blx	r8
 8003a68:	4307      	orrs	r7, r0
 8003a6a:	3568      	adds	r5, #104	; 0x68
 8003a6c:	e7e9      	b.n	8003a42 <_fwalk_reent+0x12>

08003a6e <__retarget_lock_init_recursive>:
 8003a6e:	4770      	bx	lr

08003a70 <__retarget_lock_acquire_recursive>:
 8003a70:	4770      	bx	lr

08003a72 <__retarget_lock_release_recursive>:
 8003a72:	4770      	bx	lr

08003a74 <sbrk_aligned>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	4e0e      	ldr	r6, [pc, #56]	; (8003ab0 <sbrk_aligned+0x3c>)
 8003a78:	460c      	mov	r4, r1
 8003a7a:	6831      	ldr	r1, [r6, #0]
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	b911      	cbnz	r1, 8003a86 <sbrk_aligned+0x12>
 8003a80:	f000 fcd6 	bl	8004430 <_sbrk_r>
 8003a84:	6030      	str	r0, [r6, #0]
 8003a86:	4621      	mov	r1, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 fcd1 	bl	8004430 <_sbrk_r>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d00a      	beq.n	8003aa8 <sbrk_aligned+0x34>
 8003a92:	1cc4      	adds	r4, r0, #3
 8003a94:	f024 0403 	bic.w	r4, r4, #3
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d007      	beq.n	8003aac <sbrk_aligned+0x38>
 8003a9c:	1a21      	subs	r1, r4, r0
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 fcc6 	bl	8004430 <_sbrk_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d101      	bne.n	8003aac <sbrk_aligned+0x38>
 8003aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8003aac:	4620      	mov	r0, r4
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	2000022c 	.word	0x2000022c

08003ab4 <_malloc_r>:
 8003ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab8:	1ccd      	adds	r5, r1, #3
 8003aba:	f025 0503 	bic.w	r5, r5, #3
 8003abe:	3508      	adds	r5, #8
 8003ac0:	2d0c      	cmp	r5, #12
 8003ac2:	bf38      	it	cc
 8003ac4:	250c      	movcc	r5, #12
 8003ac6:	2d00      	cmp	r5, #0
 8003ac8:	4607      	mov	r7, r0
 8003aca:	db01      	blt.n	8003ad0 <_malloc_r+0x1c>
 8003acc:	42a9      	cmp	r1, r5
 8003ace:	d905      	bls.n	8003adc <_malloc_r+0x28>
 8003ad0:	230c      	movs	r3, #12
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003adc:	4e2e      	ldr	r6, [pc, #184]	; (8003b98 <_malloc_r+0xe4>)
 8003ade:	f000 ff3f 	bl	8004960 <__malloc_lock>
 8003ae2:	6833      	ldr	r3, [r6, #0]
 8003ae4:	461c      	mov	r4, r3
 8003ae6:	bb34      	cbnz	r4, 8003b36 <_malloc_r+0x82>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4638      	mov	r0, r7
 8003aec:	f7ff ffc2 	bl	8003a74 <sbrk_aligned>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	4604      	mov	r4, r0
 8003af4:	d14d      	bne.n	8003b92 <_malloc_r+0xde>
 8003af6:	6834      	ldr	r4, [r6, #0]
 8003af8:	4626      	mov	r6, r4
 8003afa:	2e00      	cmp	r6, #0
 8003afc:	d140      	bne.n	8003b80 <_malloc_r+0xcc>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	4631      	mov	r1, r6
 8003b02:	4638      	mov	r0, r7
 8003b04:	eb04 0803 	add.w	r8, r4, r3
 8003b08:	f000 fc92 	bl	8004430 <_sbrk_r>
 8003b0c:	4580      	cmp	r8, r0
 8003b0e:	d13a      	bne.n	8003b86 <_malloc_r+0xd2>
 8003b10:	6821      	ldr	r1, [r4, #0]
 8003b12:	3503      	adds	r5, #3
 8003b14:	1a6d      	subs	r5, r5, r1
 8003b16:	f025 0503 	bic.w	r5, r5, #3
 8003b1a:	3508      	adds	r5, #8
 8003b1c:	2d0c      	cmp	r5, #12
 8003b1e:	bf38      	it	cc
 8003b20:	250c      	movcc	r5, #12
 8003b22:	4629      	mov	r1, r5
 8003b24:	4638      	mov	r0, r7
 8003b26:	f7ff ffa5 	bl	8003a74 <sbrk_aligned>
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d02b      	beq.n	8003b86 <_malloc_r+0xd2>
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	442b      	add	r3, r5
 8003b32:	6023      	str	r3, [r4, #0]
 8003b34:	e00e      	b.n	8003b54 <_malloc_r+0xa0>
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	1b52      	subs	r2, r2, r5
 8003b3a:	d41e      	bmi.n	8003b7a <_malloc_r+0xc6>
 8003b3c:	2a0b      	cmp	r2, #11
 8003b3e:	d916      	bls.n	8003b6e <_malloc_r+0xba>
 8003b40:	1961      	adds	r1, r4, r5
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	6025      	str	r5, [r4, #0]
 8003b46:	bf18      	it	ne
 8003b48:	6059      	strne	r1, [r3, #4]
 8003b4a:	6863      	ldr	r3, [r4, #4]
 8003b4c:	bf08      	it	eq
 8003b4e:	6031      	streq	r1, [r6, #0]
 8003b50:	5162      	str	r2, [r4, r5]
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	4638      	mov	r0, r7
 8003b56:	f104 060b 	add.w	r6, r4, #11
 8003b5a:	f000 ff07 	bl	800496c <__malloc_unlock>
 8003b5e:	f026 0607 	bic.w	r6, r6, #7
 8003b62:	1d23      	adds	r3, r4, #4
 8003b64:	1af2      	subs	r2, r6, r3
 8003b66:	d0b6      	beq.n	8003ad6 <_malloc_r+0x22>
 8003b68:	1b9b      	subs	r3, r3, r6
 8003b6a:	50a3      	str	r3, [r4, r2]
 8003b6c:	e7b3      	b.n	8003ad6 <_malloc_r+0x22>
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	bf0c      	ite	eq
 8003b74:	6032      	streq	r2, [r6, #0]
 8003b76:	605a      	strne	r2, [r3, #4]
 8003b78:	e7ec      	b.n	8003b54 <_malloc_r+0xa0>
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	6864      	ldr	r4, [r4, #4]
 8003b7e:	e7b2      	b.n	8003ae6 <_malloc_r+0x32>
 8003b80:	4634      	mov	r4, r6
 8003b82:	6876      	ldr	r6, [r6, #4]
 8003b84:	e7b9      	b.n	8003afa <_malloc_r+0x46>
 8003b86:	230c      	movs	r3, #12
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f000 feee 	bl	800496c <__malloc_unlock>
 8003b90:	e7a1      	b.n	8003ad6 <_malloc_r+0x22>
 8003b92:	6025      	str	r5, [r4, #0]
 8003b94:	e7de      	b.n	8003b54 <_malloc_r+0xa0>
 8003b96:	bf00      	nop
 8003b98:	20000228 	.word	0x20000228

08003b9c <__ssputs_r>:
 8003b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba0:	688e      	ldr	r6, [r1, #8]
 8003ba2:	429e      	cmp	r6, r3
 8003ba4:	4682      	mov	sl, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	4690      	mov	r8, r2
 8003baa:	461f      	mov	r7, r3
 8003bac:	d838      	bhi.n	8003c20 <__ssputs_r+0x84>
 8003bae:	898a      	ldrh	r2, [r1, #12]
 8003bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bb4:	d032      	beq.n	8003c1c <__ssputs_r+0x80>
 8003bb6:	6825      	ldr	r5, [r4, #0]
 8003bb8:	6909      	ldr	r1, [r1, #16]
 8003bba:	eba5 0901 	sub.w	r9, r5, r1
 8003bbe:	6965      	ldr	r5, [r4, #20]
 8003bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bc8:	3301      	adds	r3, #1
 8003bca:	444b      	add	r3, r9
 8003bcc:	106d      	asrs	r5, r5, #1
 8003bce:	429d      	cmp	r5, r3
 8003bd0:	bf38      	it	cc
 8003bd2:	461d      	movcc	r5, r3
 8003bd4:	0553      	lsls	r3, r2, #21
 8003bd6:	d531      	bpl.n	8003c3c <__ssputs_r+0xa0>
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7ff ff6b 	bl	8003ab4 <_malloc_r>
 8003bde:	4606      	mov	r6, r0
 8003be0:	b950      	cbnz	r0, 8003bf8 <__ssputs_r+0x5c>
 8003be2:	230c      	movs	r3, #12
 8003be4:	f8ca 3000 	str.w	r3, [sl]
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bee:	81a3      	strh	r3, [r4, #12]
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf8:	6921      	ldr	r1, [r4, #16]
 8003bfa:	464a      	mov	r2, r9
 8003bfc:	f000 fe88 	bl	8004910 <memcpy>
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0a:	81a3      	strh	r3, [r4, #12]
 8003c0c:	6126      	str	r6, [r4, #16]
 8003c0e:	6165      	str	r5, [r4, #20]
 8003c10:	444e      	add	r6, r9
 8003c12:	eba5 0509 	sub.w	r5, r5, r9
 8003c16:	6026      	str	r6, [r4, #0]
 8003c18:	60a5      	str	r5, [r4, #8]
 8003c1a:	463e      	mov	r6, r7
 8003c1c:	42be      	cmp	r6, r7
 8003c1e:	d900      	bls.n	8003c22 <__ssputs_r+0x86>
 8003c20:	463e      	mov	r6, r7
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	4632      	mov	r2, r6
 8003c26:	4641      	mov	r1, r8
 8003c28:	f000 fe80 	bl	800492c <memmove>
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	1b9b      	subs	r3, r3, r6
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4433      	add	r3, r6
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e7db      	b.n	8003bf4 <__ssputs_r+0x58>
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	f000 fee7 	bl	8004a10 <_realloc_r>
 8003c42:	4606      	mov	r6, r0
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d1e1      	bne.n	8003c0c <__ssputs_r+0x70>
 8003c48:	6921      	ldr	r1, [r4, #16]
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	f000 fe94 	bl	8004978 <_free_r>
 8003c50:	e7c7      	b.n	8003be2 <__ssputs_r+0x46>
	...

08003c54 <_svfiprintf_r>:
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	4698      	mov	r8, r3
 8003c5a:	898b      	ldrh	r3, [r1, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	b09d      	sub	sp, #116	; 0x74
 8003c60:	4607      	mov	r7, r0
 8003c62:	460d      	mov	r5, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	d50e      	bpl.n	8003c86 <_svfiprintf_r+0x32>
 8003c68:	690b      	ldr	r3, [r1, #16]
 8003c6a:	b963      	cbnz	r3, 8003c86 <_svfiprintf_r+0x32>
 8003c6c:	2140      	movs	r1, #64	; 0x40
 8003c6e:	f7ff ff21 	bl	8003ab4 <_malloc_r>
 8003c72:	6028      	str	r0, [r5, #0]
 8003c74:	6128      	str	r0, [r5, #16]
 8003c76:	b920      	cbnz	r0, 8003c82 <_svfiprintf_r+0x2e>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	e0d1      	b.n	8003e26 <_svfiprintf_r+0x1d2>
 8003c82:	2340      	movs	r3, #64	; 0x40
 8003c84:	616b      	str	r3, [r5, #20]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c94:	2330      	movs	r3, #48	; 0x30
 8003c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e40 <_svfiprintf_r+0x1ec>
 8003c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c9e:	f04f 0901 	mov.w	r9, #1
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003caa:	b10a      	cbz	r2, 8003cb0 <_svfiprintf_r+0x5c>
 8003cac:	2a25      	cmp	r2, #37	; 0x25
 8003cae:	d1f9      	bne.n	8003ca4 <_svfiprintf_r+0x50>
 8003cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb4:	d00b      	beq.n	8003cce <_svfiprintf_r+0x7a>
 8003cb6:	465b      	mov	r3, fp
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	f7ff ff6d 	bl	8003b9c <__ssputs_r>
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	f000 80aa 	beq.w	8003e1c <_svfiprintf_r+0x1c8>
 8003cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cca:	445a      	add	r2, fp
 8003ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cce:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a2 	beq.w	8003e1c <_svfiprintf_r+0x1c8>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce2:	f10a 0a01 	add.w	sl, sl, #1
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	9307      	str	r3, [sp, #28]
 8003cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cee:	931a      	str	r3, [sp, #104]	; 0x68
 8003cf0:	4654      	mov	r4, sl
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf8:	4851      	ldr	r0, [pc, #324]	; (8003e40 <_svfiprintf_r+0x1ec>)
 8003cfa:	f7fc fa81 	bl	8000200 <memchr>
 8003cfe:	9a04      	ldr	r2, [sp, #16]
 8003d00:	b9d8      	cbnz	r0, 8003d3a <_svfiprintf_r+0xe6>
 8003d02:	06d0      	lsls	r0, r2, #27
 8003d04:	bf44      	itt	mi
 8003d06:	2320      	movmi	r3, #32
 8003d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d0c:	0711      	lsls	r1, r2, #28
 8003d0e:	bf44      	itt	mi
 8003d10:	232b      	movmi	r3, #43	; 0x2b
 8003d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d1c:	d015      	beq.n	8003d4a <_svfiprintf_r+0xf6>
 8003d1e:	9a07      	ldr	r2, [sp, #28]
 8003d20:	4654      	mov	r4, sl
 8003d22:	2000      	movs	r0, #0
 8003d24:	f04f 0c0a 	mov.w	ip, #10
 8003d28:	4621      	mov	r1, r4
 8003d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d2e:	3b30      	subs	r3, #48	; 0x30
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d94e      	bls.n	8003dd2 <_svfiprintf_r+0x17e>
 8003d34:	b1b0      	cbz	r0, 8003d64 <_svfiprintf_r+0x110>
 8003d36:	9207      	str	r2, [sp, #28]
 8003d38:	e014      	b.n	8003d64 <_svfiprintf_r+0x110>
 8003d3a:	eba0 0308 	sub.w	r3, r0, r8
 8003d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	46a2      	mov	sl, r4
 8003d48:	e7d2      	b.n	8003cf0 <_svfiprintf_r+0x9c>
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	1d19      	adds	r1, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9103      	str	r1, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfbb      	ittet	lt
 8003d56:	425b      	neglt	r3, r3
 8003d58:	f042 0202 	orrlt.w	r2, r2, #2
 8003d5c:	9307      	strge	r3, [sp, #28]
 8003d5e:	9307      	strlt	r3, [sp, #28]
 8003d60:	bfb8      	it	lt
 8003d62:	9204      	strlt	r2, [sp, #16]
 8003d64:	7823      	ldrb	r3, [r4, #0]
 8003d66:	2b2e      	cmp	r3, #46	; 0x2e
 8003d68:	d10c      	bne.n	8003d84 <_svfiprintf_r+0x130>
 8003d6a:	7863      	ldrb	r3, [r4, #1]
 8003d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6e:	d135      	bne.n	8003ddc <_svfiprintf_r+0x188>
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	1d1a      	adds	r2, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	9203      	str	r2, [sp, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bfb8      	it	lt
 8003d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d80:	3402      	adds	r4, #2
 8003d82:	9305      	str	r3, [sp, #20]
 8003d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e50 <_svfiprintf_r+0x1fc>
 8003d88:	7821      	ldrb	r1, [r4, #0]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	4650      	mov	r0, sl
 8003d8e:	f7fc fa37 	bl	8000200 <memchr>
 8003d92:	b140      	cbz	r0, 8003da6 <_svfiprintf_r+0x152>
 8003d94:	2340      	movs	r3, #64	; 0x40
 8003d96:	eba0 000a 	sub.w	r0, r0, sl
 8003d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d9e:	9b04      	ldr	r3, [sp, #16]
 8003da0:	4303      	orrs	r3, r0
 8003da2:	3401      	adds	r4, #1
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003daa:	4826      	ldr	r0, [pc, #152]	; (8003e44 <_svfiprintf_r+0x1f0>)
 8003dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003db0:	2206      	movs	r2, #6
 8003db2:	f7fc fa25 	bl	8000200 <memchr>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d038      	beq.n	8003e2c <_svfiprintf_r+0x1d8>
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <_svfiprintf_r+0x1f4>)
 8003dbc:	bb1b      	cbnz	r3, 8003e06 <_svfiprintf_r+0x1b2>
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	3307      	adds	r3, #7
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	9303      	str	r3, [sp, #12]
 8003dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dcc:	4433      	add	r3, r6
 8003dce:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd0:	e767      	b.n	8003ca2 <_svfiprintf_r+0x4e>
 8003dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	2001      	movs	r0, #1
 8003dda:	e7a5      	b.n	8003d28 <_svfiprintf_r+0xd4>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	3401      	adds	r4, #1
 8003de0:	9305      	str	r3, [sp, #20]
 8003de2:	4619      	mov	r1, r3
 8003de4:	f04f 0c0a 	mov.w	ip, #10
 8003de8:	4620      	mov	r0, r4
 8003dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dee:	3a30      	subs	r2, #48	; 0x30
 8003df0:	2a09      	cmp	r2, #9
 8003df2:	d903      	bls.n	8003dfc <_svfiprintf_r+0x1a8>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0c5      	beq.n	8003d84 <_svfiprintf_r+0x130>
 8003df8:	9105      	str	r1, [sp, #20]
 8003dfa:	e7c3      	b.n	8003d84 <_svfiprintf_r+0x130>
 8003dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e00:	4604      	mov	r4, r0
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7f0      	b.n	8003de8 <_svfiprintf_r+0x194>
 8003e06:	ab03      	add	r3, sp, #12
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	462a      	mov	r2, r5
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <_svfiprintf_r+0x1f8>)
 8003e0e:	a904      	add	r1, sp, #16
 8003e10:	4638      	mov	r0, r7
 8003e12:	f3af 8000 	nop.w
 8003e16:	1c42      	adds	r2, r0, #1
 8003e18:	4606      	mov	r6, r0
 8003e1a:	d1d6      	bne.n	8003dca <_svfiprintf_r+0x176>
 8003e1c:	89ab      	ldrh	r3, [r5, #12]
 8003e1e:	065b      	lsls	r3, r3, #25
 8003e20:	f53f af2c 	bmi.w	8003c7c <_svfiprintf_r+0x28>
 8003e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e26:	b01d      	add	sp, #116	; 0x74
 8003e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2c:	ab03      	add	r3, sp, #12
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	462a      	mov	r2, r5
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <_svfiprintf_r+0x1f8>)
 8003e34:	a904      	add	r1, sp, #16
 8003e36:	4638      	mov	r0, r7
 8003e38:	f000 f9d4 	bl	80041e4 <_printf_i>
 8003e3c:	e7eb      	b.n	8003e16 <_svfiprintf_r+0x1c2>
 8003e3e:	bf00      	nop
 8003e40:	08004be8 	.word	0x08004be8
 8003e44:	08004bf2 	.word	0x08004bf2
 8003e48:	00000000 	.word	0x00000000
 8003e4c:	08003b9d 	.word	0x08003b9d
 8003e50:	08004bee 	.word	0x08004bee

08003e54 <__sfputc_r>:
 8003e54:	6893      	ldr	r3, [r2, #8]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	b410      	push	{r4}
 8003e5c:	6093      	str	r3, [r2, #8]
 8003e5e:	da08      	bge.n	8003e72 <__sfputc_r+0x1e>
 8003e60:	6994      	ldr	r4, [r2, #24]
 8003e62:	42a3      	cmp	r3, r4
 8003e64:	db01      	blt.n	8003e6a <__sfputc_r+0x16>
 8003e66:	290a      	cmp	r1, #10
 8003e68:	d103      	bne.n	8003e72 <__sfputc_r+0x1e>
 8003e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e6e:	f000 bb33 	b.w	80044d8 <__swbuf_r>
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	1c58      	adds	r0, r3, #1
 8003e76:	6010      	str	r0, [r2, #0]
 8003e78:	7019      	strb	r1, [r3, #0]
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <__sfputs_r>:
 8003e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e84:	4606      	mov	r6, r0
 8003e86:	460f      	mov	r7, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	18d5      	adds	r5, r2, r3
 8003e8c:	42ac      	cmp	r4, r5
 8003e8e:	d101      	bne.n	8003e94 <__sfputs_r+0x12>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e007      	b.n	8003ea4 <__sfputs_r+0x22>
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	463a      	mov	r2, r7
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	f7ff ffda 	bl	8003e54 <__sfputc_r>
 8003ea0:	1c43      	adds	r3, r0, #1
 8003ea2:	d1f3      	bne.n	8003e8c <__sfputs_r+0xa>
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ea8 <_vfiprintf_r>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	460d      	mov	r5, r1
 8003eae:	b09d      	sub	sp, #116	; 0x74
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	b118      	cbz	r0, 8003ec0 <_vfiprintf_r+0x18>
 8003eb8:	6983      	ldr	r3, [r0, #24]
 8003eba:	b90b      	cbnz	r3, 8003ec0 <_vfiprintf_r+0x18>
 8003ebc:	f7ff fd3a 	bl	8003934 <__sinit>
 8003ec0:	4b89      	ldr	r3, [pc, #548]	; (80040e8 <_vfiprintf_r+0x240>)
 8003ec2:	429d      	cmp	r5, r3
 8003ec4:	d11b      	bne.n	8003efe <_vfiprintf_r+0x56>
 8003ec6:	6875      	ldr	r5, [r6, #4]
 8003ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003eca:	07d9      	lsls	r1, r3, #31
 8003ecc:	d405      	bmi.n	8003eda <_vfiprintf_r+0x32>
 8003ece:	89ab      	ldrh	r3, [r5, #12]
 8003ed0:	059a      	lsls	r2, r3, #22
 8003ed2:	d402      	bmi.n	8003eda <_vfiprintf_r+0x32>
 8003ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ed6:	f7ff fdcb 	bl	8003a70 <__retarget_lock_acquire_recursive>
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	d501      	bpl.n	8003ee4 <_vfiprintf_r+0x3c>
 8003ee0:	692b      	ldr	r3, [r5, #16]
 8003ee2:	b9eb      	cbnz	r3, 8003f20 <_vfiprintf_r+0x78>
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 fb5a 	bl	80045a0 <__swsetup_r>
 8003eec:	b1c0      	cbz	r0, 8003f20 <_vfiprintf_r+0x78>
 8003eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ef0:	07dc      	lsls	r4, r3, #31
 8003ef2:	d50e      	bpl.n	8003f12 <_vfiprintf_r+0x6a>
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	b01d      	add	sp, #116	; 0x74
 8003efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efe:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <_vfiprintf_r+0x244>)
 8003f00:	429d      	cmp	r5, r3
 8003f02:	d101      	bne.n	8003f08 <_vfiprintf_r+0x60>
 8003f04:	68b5      	ldr	r5, [r6, #8]
 8003f06:	e7df      	b.n	8003ec8 <_vfiprintf_r+0x20>
 8003f08:	4b79      	ldr	r3, [pc, #484]	; (80040f0 <_vfiprintf_r+0x248>)
 8003f0a:	429d      	cmp	r5, r3
 8003f0c:	bf08      	it	eq
 8003f0e:	68f5      	ldreq	r5, [r6, #12]
 8003f10:	e7da      	b.n	8003ec8 <_vfiprintf_r+0x20>
 8003f12:	89ab      	ldrh	r3, [r5, #12]
 8003f14:	0598      	lsls	r0, r3, #22
 8003f16:	d4ed      	bmi.n	8003ef4 <_vfiprintf_r+0x4c>
 8003f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f1a:	f7ff fdaa 	bl	8003a72 <__retarget_lock_release_recursive>
 8003f1e:	e7e9      	b.n	8003ef4 <_vfiprintf_r+0x4c>
 8003f20:	2300      	movs	r3, #0
 8003f22:	9309      	str	r3, [sp, #36]	; 0x24
 8003f24:	2320      	movs	r3, #32
 8003f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f2e:	2330      	movs	r3, #48	; 0x30
 8003f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80040f4 <_vfiprintf_r+0x24c>
 8003f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f38:	f04f 0901 	mov.w	r9, #1
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	469a      	mov	sl, r3
 8003f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f44:	b10a      	cbz	r2, 8003f4a <_vfiprintf_r+0xa2>
 8003f46:	2a25      	cmp	r2, #37	; 0x25
 8003f48:	d1f9      	bne.n	8003f3e <_vfiprintf_r+0x96>
 8003f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f4e:	d00b      	beq.n	8003f68 <_vfiprintf_r+0xc0>
 8003f50:	465b      	mov	r3, fp
 8003f52:	4622      	mov	r2, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	4630      	mov	r0, r6
 8003f58:	f7ff ff93 	bl	8003e82 <__sfputs_r>
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	f000 80aa 	beq.w	80040b6 <_vfiprintf_r+0x20e>
 8003f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f64:	445a      	add	r2, fp
 8003f66:	9209      	str	r2, [sp, #36]	; 0x24
 8003f68:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a2 	beq.w	80040b6 <_vfiprintf_r+0x20e>
 8003f72:	2300      	movs	r3, #0
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295
 8003f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f7c:	f10a 0a01 	add.w	sl, sl, #1
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	9307      	str	r3, [sp, #28]
 8003f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f88:	931a      	str	r3, [sp, #104]	; 0x68
 8003f8a:	4654      	mov	r4, sl
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f92:	4858      	ldr	r0, [pc, #352]	; (80040f4 <_vfiprintf_r+0x24c>)
 8003f94:	f7fc f934 	bl	8000200 <memchr>
 8003f98:	9a04      	ldr	r2, [sp, #16]
 8003f9a:	b9d8      	cbnz	r0, 8003fd4 <_vfiprintf_r+0x12c>
 8003f9c:	06d1      	lsls	r1, r2, #27
 8003f9e:	bf44      	itt	mi
 8003fa0:	2320      	movmi	r3, #32
 8003fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa6:	0713      	lsls	r3, r2, #28
 8003fa8:	bf44      	itt	mi
 8003faa:	232b      	movmi	r3, #43	; 0x2b
 8003fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb6:	d015      	beq.n	8003fe4 <_vfiprintf_r+0x13c>
 8003fb8:	9a07      	ldr	r2, [sp, #28]
 8003fba:	4654      	mov	r4, sl
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	f04f 0c0a 	mov.w	ip, #10
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc8:	3b30      	subs	r3, #48	; 0x30
 8003fca:	2b09      	cmp	r3, #9
 8003fcc:	d94e      	bls.n	800406c <_vfiprintf_r+0x1c4>
 8003fce:	b1b0      	cbz	r0, 8003ffe <_vfiprintf_r+0x156>
 8003fd0:	9207      	str	r2, [sp, #28]
 8003fd2:	e014      	b.n	8003ffe <_vfiprintf_r+0x156>
 8003fd4:	eba0 0308 	sub.w	r3, r0, r8
 8003fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	9304      	str	r3, [sp, #16]
 8003fe0:	46a2      	mov	sl, r4
 8003fe2:	e7d2      	b.n	8003f8a <_vfiprintf_r+0xe2>
 8003fe4:	9b03      	ldr	r3, [sp, #12]
 8003fe6:	1d19      	adds	r1, r3, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	9103      	str	r1, [sp, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bfbb      	ittet	lt
 8003ff0:	425b      	neglt	r3, r3
 8003ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff6:	9307      	strge	r3, [sp, #28]
 8003ff8:	9307      	strlt	r3, [sp, #28]
 8003ffa:	bfb8      	it	lt
 8003ffc:	9204      	strlt	r2, [sp, #16]
 8003ffe:	7823      	ldrb	r3, [r4, #0]
 8004000:	2b2e      	cmp	r3, #46	; 0x2e
 8004002:	d10c      	bne.n	800401e <_vfiprintf_r+0x176>
 8004004:	7863      	ldrb	r3, [r4, #1]
 8004006:	2b2a      	cmp	r3, #42	; 0x2a
 8004008:	d135      	bne.n	8004076 <_vfiprintf_r+0x1ce>
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	1d1a      	adds	r2, r3, #4
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	9203      	str	r2, [sp, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	f04f 33ff 	movlt.w	r3, #4294967295
 800401a:	3402      	adds	r4, #2
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004104 <_vfiprintf_r+0x25c>
 8004022:	7821      	ldrb	r1, [r4, #0]
 8004024:	2203      	movs	r2, #3
 8004026:	4650      	mov	r0, sl
 8004028:	f7fc f8ea 	bl	8000200 <memchr>
 800402c:	b140      	cbz	r0, 8004040 <_vfiprintf_r+0x198>
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	eba0 000a 	sub.w	r0, r0, sl
 8004034:	fa03 f000 	lsl.w	r0, r3, r0
 8004038:	9b04      	ldr	r3, [sp, #16]
 800403a:	4303      	orrs	r3, r0
 800403c:	3401      	adds	r4, #1
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004044:	482c      	ldr	r0, [pc, #176]	; (80040f8 <_vfiprintf_r+0x250>)
 8004046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404a:	2206      	movs	r2, #6
 800404c:	f7fc f8d8 	bl	8000200 <memchr>
 8004050:	2800      	cmp	r0, #0
 8004052:	d03f      	beq.n	80040d4 <_vfiprintf_r+0x22c>
 8004054:	4b29      	ldr	r3, [pc, #164]	; (80040fc <_vfiprintf_r+0x254>)
 8004056:	bb1b      	cbnz	r3, 80040a0 <_vfiprintf_r+0x1f8>
 8004058:	9b03      	ldr	r3, [sp, #12]
 800405a:	3307      	adds	r3, #7
 800405c:	f023 0307 	bic.w	r3, r3, #7
 8004060:	3308      	adds	r3, #8
 8004062:	9303      	str	r3, [sp, #12]
 8004064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004066:	443b      	add	r3, r7
 8004068:	9309      	str	r3, [sp, #36]	; 0x24
 800406a:	e767      	b.n	8003f3c <_vfiprintf_r+0x94>
 800406c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004070:	460c      	mov	r4, r1
 8004072:	2001      	movs	r0, #1
 8004074:	e7a5      	b.n	8003fc2 <_vfiprintf_r+0x11a>
 8004076:	2300      	movs	r3, #0
 8004078:	3401      	adds	r4, #1
 800407a:	9305      	str	r3, [sp, #20]
 800407c:	4619      	mov	r1, r3
 800407e:	f04f 0c0a 	mov.w	ip, #10
 8004082:	4620      	mov	r0, r4
 8004084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004088:	3a30      	subs	r2, #48	; 0x30
 800408a:	2a09      	cmp	r2, #9
 800408c:	d903      	bls.n	8004096 <_vfiprintf_r+0x1ee>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0c5      	beq.n	800401e <_vfiprintf_r+0x176>
 8004092:	9105      	str	r1, [sp, #20]
 8004094:	e7c3      	b.n	800401e <_vfiprintf_r+0x176>
 8004096:	fb0c 2101 	mla	r1, ip, r1, r2
 800409a:	4604      	mov	r4, r0
 800409c:	2301      	movs	r3, #1
 800409e:	e7f0      	b.n	8004082 <_vfiprintf_r+0x1da>
 80040a0:	ab03      	add	r3, sp, #12
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	462a      	mov	r2, r5
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <_vfiprintf_r+0x258>)
 80040a8:	a904      	add	r1, sp, #16
 80040aa:	4630      	mov	r0, r6
 80040ac:	f3af 8000 	nop.w
 80040b0:	4607      	mov	r7, r0
 80040b2:	1c78      	adds	r0, r7, #1
 80040b4:	d1d6      	bne.n	8004064 <_vfiprintf_r+0x1bc>
 80040b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040b8:	07d9      	lsls	r1, r3, #31
 80040ba:	d405      	bmi.n	80040c8 <_vfiprintf_r+0x220>
 80040bc:	89ab      	ldrh	r3, [r5, #12]
 80040be:	059a      	lsls	r2, r3, #22
 80040c0:	d402      	bmi.n	80040c8 <_vfiprintf_r+0x220>
 80040c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040c4:	f7ff fcd5 	bl	8003a72 <__retarget_lock_release_recursive>
 80040c8:	89ab      	ldrh	r3, [r5, #12]
 80040ca:	065b      	lsls	r3, r3, #25
 80040cc:	f53f af12 	bmi.w	8003ef4 <_vfiprintf_r+0x4c>
 80040d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d2:	e711      	b.n	8003ef8 <_vfiprintf_r+0x50>
 80040d4:	ab03      	add	r3, sp, #12
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	462a      	mov	r2, r5
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <_vfiprintf_r+0x258>)
 80040dc:	a904      	add	r1, sp, #16
 80040de:	4630      	mov	r0, r6
 80040e0:	f000 f880 	bl	80041e4 <_printf_i>
 80040e4:	e7e4      	b.n	80040b0 <_vfiprintf_r+0x208>
 80040e6:	bf00      	nop
 80040e8:	08004ba8 	.word	0x08004ba8
 80040ec:	08004bc8 	.word	0x08004bc8
 80040f0:	08004b88 	.word	0x08004b88
 80040f4:	08004be8 	.word	0x08004be8
 80040f8:	08004bf2 	.word	0x08004bf2
 80040fc:	00000000 	.word	0x00000000
 8004100:	08003e83 	.word	0x08003e83
 8004104:	08004bee 	.word	0x08004bee

08004108 <_printf_common>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	4616      	mov	r6, r2
 800410e:	4699      	mov	r9, r3
 8004110:	688a      	ldr	r2, [r1, #8]
 8004112:	690b      	ldr	r3, [r1, #16]
 8004114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004118:	4293      	cmp	r3, r2
 800411a:	bfb8      	it	lt
 800411c:	4613      	movlt	r3, r2
 800411e:	6033      	str	r3, [r6, #0]
 8004120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004124:	4607      	mov	r7, r0
 8004126:	460c      	mov	r4, r1
 8004128:	b10a      	cbz	r2, 800412e <_printf_common+0x26>
 800412a:	3301      	adds	r3, #1
 800412c:	6033      	str	r3, [r6, #0]
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	0699      	lsls	r1, r3, #26
 8004132:	bf42      	ittt	mi
 8004134:	6833      	ldrmi	r3, [r6, #0]
 8004136:	3302      	addmi	r3, #2
 8004138:	6033      	strmi	r3, [r6, #0]
 800413a:	6825      	ldr	r5, [r4, #0]
 800413c:	f015 0506 	ands.w	r5, r5, #6
 8004140:	d106      	bne.n	8004150 <_printf_common+0x48>
 8004142:	f104 0a19 	add.w	sl, r4, #25
 8004146:	68e3      	ldr	r3, [r4, #12]
 8004148:	6832      	ldr	r2, [r6, #0]
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	42ab      	cmp	r3, r5
 800414e:	dc26      	bgt.n	800419e <_printf_common+0x96>
 8004150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004154:	1e13      	subs	r3, r2, #0
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	bf18      	it	ne
 800415a:	2301      	movne	r3, #1
 800415c:	0692      	lsls	r2, r2, #26
 800415e:	d42b      	bmi.n	80041b8 <_printf_common+0xb0>
 8004160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004164:	4649      	mov	r1, r9
 8004166:	4638      	mov	r0, r7
 8004168:	47c0      	blx	r8
 800416a:	3001      	adds	r0, #1
 800416c:	d01e      	beq.n	80041ac <_printf_common+0xa4>
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	68e5      	ldr	r5, [r4, #12]
 8004172:	6832      	ldr	r2, [r6, #0]
 8004174:	f003 0306 	and.w	r3, r3, #6
 8004178:	2b04      	cmp	r3, #4
 800417a:	bf08      	it	eq
 800417c:	1aad      	subeq	r5, r5, r2
 800417e:	68a3      	ldr	r3, [r4, #8]
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	bf0c      	ite	eq
 8004184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004188:	2500      	movne	r5, #0
 800418a:	4293      	cmp	r3, r2
 800418c:	bfc4      	itt	gt
 800418e:	1a9b      	subgt	r3, r3, r2
 8004190:	18ed      	addgt	r5, r5, r3
 8004192:	2600      	movs	r6, #0
 8004194:	341a      	adds	r4, #26
 8004196:	42b5      	cmp	r5, r6
 8004198:	d11a      	bne.n	80041d0 <_printf_common+0xc8>
 800419a:	2000      	movs	r0, #0
 800419c:	e008      	b.n	80041b0 <_printf_common+0xa8>
 800419e:	2301      	movs	r3, #1
 80041a0:	4652      	mov	r2, sl
 80041a2:	4649      	mov	r1, r9
 80041a4:	4638      	mov	r0, r7
 80041a6:	47c0      	blx	r8
 80041a8:	3001      	adds	r0, #1
 80041aa:	d103      	bne.n	80041b4 <_printf_common+0xac>
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	3501      	adds	r5, #1
 80041b6:	e7c6      	b.n	8004146 <_printf_common+0x3e>
 80041b8:	18e1      	adds	r1, r4, r3
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	2030      	movs	r0, #48	; 0x30
 80041be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041c2:	4422      	add	r2, r4
 80041c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041cc:	3302      	adds	r3, #2
 80041ce:	e7c7      	b.n	8004160 <_printf_common+0x58>
 80041d0:	2301      	movs	r3, #1
 80041d2:	4622      	mov	r2, r4
 80041d4:	4649      	mov	r1, r9
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	3001      	adds	r0, #1
 80041dc:	d0e6      	beq.n	80041ac <_printf_common+0xa4>
 80041de:	3601      	adds	r6, #1
 80041e0:	e7d9      	b.n	8004196 <_printf_common+0x8e>
	...

080041e4 <_printf_i>:
 80041e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e8:	7e0f      	ldrb	r7, [r1, #24]
 80041ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041ec:	2f78      	cmp	r7, #120	; 0x78
 80041ee:	4691      	mov	r9, r2
 80041f0:	4680      	mov	r8, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	469a      	mov	sl, r3
 80041f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041fa:	d807      	bhi.n	800420c <_printf_i+0x28>
 80041fc:	2f62      	cmp	r7, #98	; 0x62
 80041fe:	d80a      	bhi.n	8004216 <_printf_i+0x32>
 8004200:	2f00      	cmp	r7, #0
 8004202:	f000 80d8 	beq.w	80043b6 <_printf_i+0x1d2>
 8004206:	2f58      	cmp	r7, #88	; 0x58
 8004208:	f000 80a3 	beq.w	8004352 <_printf_i+0x16e>
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004214:	e03a      	b.n	800428c <_printf_i+0xa8>
 8004216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800421a:	2b15      	cmp	r3, #21
 800421c:	d8f6      	bhi.n	800420c <_printf_i+0x28>
 800421e:	a101      	add	r1, pc, #4	; (adr r1, 8004224 <_printf_i+0x40>)
 8004220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004224:	0800427d 	.word	0x0800427d
 8004228:	08004291 	.word	0x08004291
 800422c:	0800420d 	.word	0x0800420d
 8004230:	0800420d 	.word	0x0800420d
 8004234:	0800420d 	.word	0x0800420d
 8004238:	0800420d 	.word	0x0800420d
 800423c:	08004291 	.word	0x08004291
 8004240:	0800420d 	.word	0x0800420d
 8004244:	0800420d 	.word	0x0800420d
 8004248:	0800420d 	.word	0x0800420d
 800424c:	0800420d 	.word	0x0800420d
 8004250:	0800439d 	.word	0x0800439d
 8004254:	080042c1 	.word	0x080042c1
 8004258:	0800437f 	.word	0x0800437f
 800425c:	0800420d 	.word	0x0800420d
 8004260:	0800420d 	.word	0x0800420d
 8004264:	080043bf 	.word	0x080043bf
 8004268:	0800420d 	.word	0x0800420d
 800426c:	080042c1 	.word	0x080042c1
 8004270:	0800420d 	.word	0x0800420d
 8004274:	0800420d 	.word	0x0800420d
 8004278:	08004387 	.word	0x08004387
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	602a      	str	r2, [r5, #0]
 8004284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800428c:	2301      	movs	r3, #1
 800428e:	e0a3      	b.n	80043d8 <_printf_i+0x1f4>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	6829      	ldr	r1, [r5, #0]
 8004294:	0606      	lsls	r6, r0, #24
 8004296:	f101 0304 	add.w	r3, r1, #4
 800429a:	d50a      	bpl.n	80042b2 <_printf_i+0xce>
 800429c:	680e      	ldr	r6, [r1, #0]
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	da03      	bge.n	80042ac <_printf_i+0xc8>
 80042a4:	232d      	movs	r3, #45	; 0x2d
 80042a6:	4276      	negs	r6, r6
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ac:	485e      	ldr	r0, [pc, #376]	; (8004428 <_printf_i+0x244>)
 80042ae:	230a      	movs	r3, #10
 80042b0:	e019      	b.n	80042e6 <_printf_i+0x102>
 80042b2:	680e      	ldr	r6, [r1, #0]
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042ba:	bf18      	it	ne
 80042bc:	b236      	sxthne	r6, r6
 80042be:	e7ef      	b.n	80042a0 <_printf_i+0xbc>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	6820      	ldr	r0, [r4, #0]
 80042c4:	1d19      	adds	r1, r3, #4
 80042c6:	6029      	str	r1, [r5, #0]
 80042c8:	0601      	lsls	r1, r0, #24
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0xec>
 80042cc:	681e      	ldr	r6, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0xf2>
 80042d0:	0646      	lsls	r6, r0, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0xe8>
 80042d4:	881e      	ldrh	r6, [r3, #0]
 80042d6:	4854      	ldr	r0, [pc, #336]	; (8004428 <_printf_i+0x244>)
 80042d8:	2f6f      	cmp	r7, #111	; 0x6f
 80042da:	bf0c      	ite	eq
 80042dc:	2308      	moveq	r3, #8
 80042de:	230a      	movne	r3, #10
 80042e0:	2100      	movs	r1, #0
 80042e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e6:	6865      	ldr	r5, [r4, #4]
 80042e8:	60a5      	str	r5, [r4, #8]
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	bfa2      	ittt	ge
 80042ee:	6821      	ldrge	r1, [r4, #0]
 80042f0:	f021 0104 	bicge.w	r1, r1, #4
 80042f4:	6021      	strge	r1, [r4, #0]
 80042f6:	b90e      	cbnz	r6, 80042fc <_printf_i+0x118>
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	d04d      	beq.n	8004398 <_printf_i+0x1b4>
 80042fc:	4615      	mov	r5, r2
 80042fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004302:	fb03 6711 	mls	r7, r3, r1, r6
 8004306:	5dc7      	ldrb	r7, [r0, r7]
 8004308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800430c:	4637      	mov	r7, r6
 800430e:	42bb      	cmp	r3, r7
 8004310:	460e      	mov	r6, r1
 8004312:	d9f4      	bls.n	80042fe <_printf_i+0x11a>
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10b      	bne.n	8004330 <_printf_i+0x14c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	07de      	lsls	r6, r3, #31
 800431c:	d508      	bpl.n	8004330 <_printf_i+0x14c>
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6861      	ldr	r1, [r4, #4]
 8004322:	4299      	cmp	r1, r3
 8004324:	bfde      	ittt	le
 8004326:	2330      	movle	r3, #48	; 0x30
 8004328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004330:	1b52      	subs	r2, r2, r5
 8004332:	6122      	str	r2, [r4, #16]
 8004334:	f8cd a000 	str.w	sl, [sp]
 8004338:	464b      	mov	r3, r9
 800433a:	aa03      	add	r2, sp, #12
 800433c:	4621      	mov	r1, r4
 800433e:	4640      	mov	r0, r8
 8004340:	f7ff fee2 	bl	8004108 <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	d14c      	bne.n	80043e2 <_printf_i+0x1fe>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b004      	add	sp, #16
 800434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004352:	4835      	ldr	r0, [pc, #212]	; (8004428 <_printf_i+0x244>)
 8004354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004358:	6829      	ldr	r1, [r5, #0]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004360:	6029      	str	r1, [r5, #0]
 8004362:	061d      	lsls	r5, r3, #24
 8004364:	d514      	bpl.n	8004390 <_printf_i+0x1ac>
 8004366:	07df      	lsls	r7, r3, #31
 8004368:	bf44      	itt	mi
 800436a:	f043 0320 	orrmi.w	r3, r3, #32
 800436e:	6023      	strmi	r3, [r4, #0]
 8004370:	b91e      	cbnz	r6, 800437a <_printf_i+0x196>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f023 0320 	bic.w	r3, r3, #32
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	2310      	movs	r3, #16
 800437c:	e7b0      	b.n	80042e0 <_printf_i+0xfc>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	2378      	movs	r3, #120	; 0x78
 8004388:	4828      	ldr	r0, [pc, #160]	; (800442c <_printf_i+0x248>)
 800438a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800438e:	e7e3      	b.n	8004358 <_printf_i+0x174>
 8004390:	0659      	lsls	r1, r3, #25
 8004392:	bf48      	it	mi
 8004394:	b2b6      	uxthmi	r6, r6
 8004396:	e7e6      	b.n	8004366 <_printf_i+0x182>
 8004398:	4615      	mov	r5, r2
 800439a:	e7bb      	b.n	8004314 <_printf_i+0x130>
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	6826      	ldr	r6, [r4, #0]
 80043a0:	6961      	ldr	r1, [r4, #20]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6028      	str	r0, [r5, #0]
 80043a6:	0635      	lsls	r5, r6, #24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0x1cc>
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0x1d2>
 80043b0:	0670      	lsls	r0, r6, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0x1c8>
 80043b4:	8019      	strh	r1, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	4615      	mov	r5, r2
 80043bc:	e7ba      	b.n	8004334 <_printf_i+0x150>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	681d      	ldr	r5, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4628      	mov	r0, r5
 80043cc:	f7fb ff18 	bl	8000200 <memchr>
 80043d0:	b108      	cbz	r0, 80043d6 <_printf_i+0x1f2>
 80043d2:	1b40      	subs	r0, r0, r5
 80043d4:	6060      	str	r0, [r4, #4]
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e0:	e7a8      	b.n	8004334 <_printf_i+0x150>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	462a      	mov	r2, r5
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d0ab      	beq.n	8004348 <_printf_i+0x164>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	079b      	lsls	r3, r3, #30
 80043f4:	d413      	bmi.n	800441e <_printf_i+0x23a>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e7a4      	b.n	800434c <_printf_i+0x168>
 8004402:	2301      	movs	r3, #1
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d09b      	beq.n	8004348 <_printf_i+0x164>
 8004410:	3501      	adds	r5, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	42ab      	cmp	r3, r5
 800441a:	dcf2      	bgt.n	8004402 <_printf_i+0x21e>
 800441c:	e7eb      	b.n	80043f6 <_printf_i+0x212>
 800441e:	2500      	movs	r5, #0
 8004420:	f104 0619 	add.w	r6, r4, #25
 8004424:	e7f5      	b.n	8004412 <_printf_i+0x22e>
 8004426:	bf00      	nop
 8004428:	08004bf9 	.word	0x08004bf9
 800442c:	08004c0a 	.word	0x08004c0a

08004430 <_sbrk_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d06      	ldr	r5, [pc, #24]	; (800444c <_sbrk_r+0x1c>)
 8004434:	2300      	movs	r3, #0
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	f7fc fb90 	bl	8000b60 <_sbrk>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_sbrk_r+0x1a>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_sbrk_r+0x1a>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	20000230 	.word	0x20000230

08004450 <__sread>:
 8004450:	b510      	push	{r4, lr}
 8004452:	460c      	mov	r4, r1
 8004454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004458:	f000 fb0a 	bl	8004a70 <_read_r>
 800445c:	2800      	cmp	r0, #0
 800445e:	bfab      	itete	ge
 8004460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004462:	89a3      	ldrhlt	r3, [r4, #12]
 8004464:	181b      	addge	r3, r3, r0
 8004466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800446a:	bfac      	ite	ge
 800446c:	6563      	strge	r3, [r4, #84]	; 0x54
 800446e:	81a3      	strhlt	r3, [r4, #12]
 8004470:	bd10      	pop	{r4, pc}

08004472 <__swrite>:
 8004472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	461f      	mov	r7, r3
 8004478:	898b      	ldrh	r3, [r1, #12]
 800447a:	05db      	lsls	r3, r3, #23
 800447c:	4605      	mov	r5, r0
 800447e:	460c      	mov	r4, r1
 8004480:	4616      	mov	r6, r2
 8004482:	d505      	bpl.n	8004490 <__swrite+0x1e>
 8004484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004488:	2302      	movs	r3, #2
 800448a:	2200      	movs	r2, #0
 800448c:	f000 f9c8 	bl	8004820 <_lseek_r>
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	4632      	mov	r2, r6
 800449e:	463b      	mov	r3, r7
 80044a0:	4628      	mov	r0, r5
 80044a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	f000 b869 	b.w	800457c <_write_r>

080044aa <__sseek>:
 80044aa:	b510      	push	{r4, lr}
 80044ac:	460c      	mov	r4, r1
 80044ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b2:	f000 f9b5 	bl	8004820 <_lseek_r>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	bf15      	itete	ne
 80044bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80044be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044c6:	81a3      	strheq	r3, [r4, #12]
 80044c8:	bf18      	it	ne
 80044ca:	81a3      	strhne	r3, [r4, #12]
 80044cc:	bd10      	pop	{r4, pc}

080044ce <__sclose>:
 80044ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d2:	f000 b8d3 	b.w	800467c <_close_r>
	...

080044d8 <__swbuf_r>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	460e      	mov	r6, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	4605      	mov	r5, r0
 80044e0:	b118      	cbz	r0, 80044ea <__swbuf_r+0x12>
 80044e2:	6983      	ldr	r3, [r0, #24]
 80044e4:	b90b      	cbnz	r3, 80044ea <__swbuf_r+0x12>
 80044e6:	f7ff fa25 	bl	8003934 <__sinit>
 80044ea:	4b21      	ldr	r3, [pc, #132]	; (8004570 <__swbuf_r+0x98>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d12b      	bne.n	8004548 <__swbuf_r+0x70>
 80044f0:	686c      	ldr	r4, [r5, #4]
 80044f2:	69a3      	ldr	r3, [r4, #24]
 80044f4:	60a3      	str	r3, [r4, #8]
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	071a      	lsls	r2, r3, #28
 80044fa:	d52f      	bpl.n	800455c <__swbuf_r+0x84>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	b36b      	cbz	r3, 800455c <__swbuf_r+0x84>
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	1ac0      	subs	r0, r0, r3
 8004506:	6963      	ldr	r3, [r4, #20]
 8004508:	b2f6      	uxtb	r6, r6
 800450a:	4283      	cmp	r3, r0
 800450c:	4637      	mov	r7, r6
 800450e:	dc04      	bgt.n	800451a <__swbuf_r+0x42>
 8004510:	4621      	mov	r1, r4
 8004512:	4628      	mov	r0, r5
 8004514:	f000 f948 	bl	80047a8 <_fflush_r>
 8004518:	bb30      	cbnz	r0, 8004568 <__swbuf_r+0x90>
 800451a:	68a3      	ldr	r3, [r4, #8]
 800451c:	3b01      	subs	r3, #1
 800451e:	60a3      	str	r3, [r4, #8]
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	701e      	strb	r6, [r3, #0]
 8004528:	6963      	ldr	r3, [r4, #20]
 800452a:	3001      	adds	r0, #1
 800452c:	4283      	cmp	r3, r0
 800452e:	d004      	beq.n	800453a <__swbuf_r+0x62>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	07db      	lsls	r3, r3, #31
 8004534:	d506      	bpl.n	8004544 <__swbuf_r+0x6c>
 8004536:	2e0a      	cmp	r6, #10
 8004538:	d104      	bne.n	8004544 <__swbuf_r+0x6c>
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f933 	bl	80047a8 <_fflush_r>
 8004542:	b988      	cbnz	r0, 8004568 <__swbuf_r+0x90>
 8004544:	4638      	mov	r0, r7
 8004546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <__swbuf_r+0x9c>)
 800454a:	429c      	cmp	r4, r3
 800454c:	d101      	bne.n	8004552 <__swbuf_r+0x7a>
 800454e:	68ac      	ldr	r4, [r5, #8]
 8004550:	e7cf      	b.n	80044f2 <__swbuf_r+0x1a>
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <__swbuf_r+0xa0>)
 8004554:	429c      	cmp	r4, r3
 8004556:	bf08      	it	eq
 8004558:	68ec      	ldreq	r4, [r5, #12]
 800455a:	e7ca      	b.n	80044f2 <__swbuf_r+0x1a>
 800455c:	4621      	mov	r1, r4
 800455e:	4628      	mov	r0, r5
 8004560:	f000 f81e 	bl	80045a0 <__swsetup_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	d0cb      	beq.n	8004500 <__swbuf_r+0x28>
 8004568:	f04f 37ff 	mov.w	r7, #4294967295
 800456c:	e7ea      	b.n	8004544 <__swbuf_r+0x6c>
 800456e:	bf00      	nop
 8004570:	08004ba8 	.word	0x08004ba8
 8004574:	08004bc8 	.word	0x08004bc8
 8004578:	08004b88 	.word	0x08004b88

0800457c <_write_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d07      	ldr	r5, [pc, #28]	; (800459c <_write_r+0x20>)
 8004580:	4604      	mov	r4, r0
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	2200      	movs	r2, #0
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f7fc f8f2 	bl	8000774 <_write>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_write_r+0x1e>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_write_r+0x1e>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	20000230 	.word	0x20000230

080045a0 <__swsetup_r>:
 80045a0:	4b32      	ldr	r3, [pc, #200]	; (800466c <__swsetup_r+0xcc>)
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	4606      	mov	r6, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	b125      	cbz	r5, 80045b6 <__swsetup_r+0x16>
 80045ac:	69ab      	ldr	r3, [r5, #24]
 80045ae:	b913      	cbnz	r3, 80045b6 <__swsetup_r+0x16>
 80045b0:	4628      	mov	r0, r5
 80045b2:	f7ff f9bf 	bl	8003934 <__sinit>
 80045b6:	4b2e      	ldr	r3, [pc, #184]	; (8004670 <__swsetup_r+0xd0>)
 80045b8:	429c      	cmp	r4, r3
 80045ba:	d10f      	bne.n	80045dc <__swsetup_r+0x3c>
 80045bc:	686c      	ldr	r4, [r5, #4]
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c4:	0719      	lsls	r1, r3, #28
 80045c6:	d42c      	bmi.n	8004622 <__swsetup_r+0x82>
 80045c8:	06dd      	lsls	r5, r3, #27
 80045ca:	d411      	bmi.n	80045f0 <__swsetup_r+0x50>
 80045cc:	2309      	movs	r3, #9
 80045ce:	6033      	str	r3, [r6, #0]
 80045d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e03e      	b.n	800465a <__swsetup_r+0xba>
 80045dc:	4b25      	ldr	r3, [pc, #148]	; (8004674 <__swsetup_r+0xd4>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d101      	bne.n	80045e6 <__swsetup_r+0x46>
 80045e2:	68ac      	ldr	r4, [r5, #8]
 80045e4:	e7eb      	b.n	80045be <__swsetup_r+0x1e>
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <__swsetup_r+0xd8>)
 80045e8:	429c      	cmp	r4, r3
 80045ea:	bf08      	it	eq
 80045ec:	68ec      	ldreq	r4, [r5, #12]
 80045ee:	e7e6      	b.n	80045be <__swsetup_r+0x1e>
 80045f0:	0758      	lsls	r0, r3, #29
 80045f2:	d512      	bpl.n	800461a <__swsetup_r+0x7a>
 80045f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f6:	b141      	cbz	r1, 800460a <__swsetup_r+0x6a>
 80045f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045fc:	4299      	cmp	r1, r3
 80045fe:	d002      	beq.n	8004606 <__swsetup_r+0x66>
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f9b9 	bl	8004978 <_free_r>
 8004606:	2300      	movs	r3, #0
 8004608:	6363      	str	r3, [r4, #52]	; 0x34
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	2300      	movs	r3, #0
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	6923      	ldr	r3, [r4, #16]
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	f043 0308 	orr.w	r3, r3, #8
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	b94b      	cbnz	r3, 800463a <__swsetup_r+0x9a>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800462c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004630:	d003      	beq.n	800463a <__swsetup_r+0x9a>
 8004632:	4621      	mov	r1, r4
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f92b 	bl	8004890 <__smakebuf_r>
 800463a:	89a0      	ldrh	r0, [r4, #12]
 800463c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004640:	f010 0301 	ands.w	r3, r0, #1
 8004644:	d00a      	beq.n	800465c <__swsetup_r+0xbc>
 8004646:	2300      	movs	r3, #0
 8004648:	60a3      	str	r3, [r4, #8]
 800464a:	6963      	ldr	r3, [r4, #20]
 800464c:	425b      	negs	r3, r3
 800464e:	61a3      	str	r3, [r4, #24]
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	b943      	cbnz	r3, 8004666 <__swsetup_r+0xc6>
 8004654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004658:	d1ba      	bne.n	80045d0 <__swsetup_r+0x30>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	0781      	lsls	r1, r0, #30
 800465e:	bf58      	it	pl
 8004660:	6963      	ldrpl	r3, [r4, #20]
 8004662:	60a3      	str	r3, [r4, #8]
 8004664:	e7f4      	b.n	8004650 <__swsetup_r+0xb0>
 8004666:	2000      	movs	r0, #0
 8004668:	e7f7      	b.n	800465a <__swsetup_r+0xba>
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c
 8004670:	08004ba8 	.word	0x08004ba8
 8004674:	08004bc8 	.word	0x08004bc8
 8004678:	08004b88 	.word	0x08004b88

0800467c <_close_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d06      	ldr	r5, [pc, #24]	; (8004698 <_close_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc fa35 	bl	8000af6 <_close>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_close_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_close_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000230 	.word	0x20000230

0800469c <__sflush_r>:
 800469c:	898a      	ldrh	r2, [r1, #12]
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	4605      	mov	r5, r0
 80046a4:	0710      	lsls	r0, r2, #28
 80046a6:	460c      	mov	r4, r1
 80046a8:	d458      	bmi.n	800475c <__sflush_r+0xc0>
 80046aa:	684b      	ldr	r3, [r1, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	dc05      	bgt.n	80046bc <__sflush_r+0x20>
 80046b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	dc02      	bgt.n	80046bc <__sflush_r+0x20>
 80046b6:	2000      	movs	r0, #0
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046be:	2e00      	cmp	r6, #0
 80046c0:	d0f9      	beq.n	80046b6 <__sflush_r+0x1a>
 80046c2:	2300      	movs	r3, #0
 80046c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046c8:	682f      	ldr	r7, [r5, #0]
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	d032      	beq.n	8004734 <__sflush_r+0x98>
 80046ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	075a      	lsls	r2, r3, #29
 80046d4:	d505      	bpl.n	80046e2 <__sflush_r+0x46>
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	1ac0      	subs	r0, r0, r3
 80046da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046dc:	b10b      	cbz	r3, 80046e2 <__sflush_r+0x46>
 80046de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e0:	1ac0      	subs	r0, r0, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	4602      	mov	r2, r0
 80046e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046e8:	6a21      	ldr	r1, [r4, #32]
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b0      	blx	r6
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	d106      	bne.n	8004702 <__sflush_r+0x66>
 80046f4:	6829      	ldr	r1, [r5, #0]
 80046f6:	291d      	cmp	r1, #29
 80046f8:	d82c      	bhi.n	8004754 <__sflush_r+0xb8>
 80046fa:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <__sflush_r+0x108>)
 80046fc:	40ca      	lsrs	r2, r1
 80046fe:	07d6      	lsls	r6, r2, #31
 8004700:	d528      	bpl.n	8004754 <__sflush_r+0xb8>
 8004702:	2200      	movs	r2, #0
 8004704:	6062      	str	r2, [r4, #4]
 8004706:	04d9      	lsls	r1, r3, #19
 8004708:	6922      	ldr	r2, [r4, #16]
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	d504      	bpl.n	8004718 <__sflush_r+0x7c>
 800470e:	1c42      	adds	r2, r0, #1
 8004710:	d101      	bne.n	8004716 <__sflush_r+0x7a>
 8004712:	682b      	ldr	r3, [r5, #0]
 8004714:	b903      	cbnz	r3, 8004718 <__sflush_r+0x7c>
 8004716:	6560      	str	r0, [r4, #84]	; 0x54
 8004718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471a:	602f      	str	r7, [r5, #0]
 800471c:	2900      	cmp	r1, #0
 800471e:	d0ca      	beq.n	80046b6 <__sflush_r+0x1a>
 8004720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004724:	4299      	cmp	r1, r3
 8004726:	d002      	beq.n	800472e <__sflush_r+0x92>
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f925 	bl	8004978 <_free_r>
 800472e:	2000      	movs	r0, #0
 8004730:	6360      	str	r0, [r4, #52]	; 0x34
 8004732:	e7c1      	b.n	80046b8 <__sflush_r+0x1c>
 8004734:	6a21      	ldr	r1, [r4, #32]
 8004736:	2301      	movs	r3, #1
 8004738:	4628      	mov	r0, r5
 800473a:	47b0      	blx	r6
 800473c:	1c41      	adds	r1, r0, #1
 800473e:	d1c7      	bne.n	80046d0 <__sflush_r+0x34>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0c4      	beq.n	80046d0 <__sflush_r+0x34>
 8004746:	2b1d      	cmp	r3, #29
 8004748:	d001      	beq.n	800474e <__sflush_r+0xb2>
 800474a:	2b16      	cmp	r3, #22
 800474c:	d101      	bne.n	8004752 <__sflush_r+0xb6>
 800474e:	602f      	str	r7, [r5, #0]
 8004750:	e7b1      	b.n	80046b6 <__sflush_r+0x1a>
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	e7ad      	b.n	80046b8 <__sflush_r+0x1c>
 800475c:	690f      	ldr	r7, [r1, #16]
 800475e:	2f00      	cmp	r7, #0
 8004760:	d0a9      	beq.n	80046b6 <__sflush_r+0x1a>
 8004762:	0793      	lsls	r3, r2, #30
 8004764:	680e      	ldr	r6, [r1, #0]
 8004766:	bf08      	it	eq
 8004768:	694b      	ldreq	r3, [r1, #20]
 800476a:	600f      	str	r7, [r1, #0]
 800476c:	bf18      	it	ne
 800476e:	2300      	movne	r3, #0
 8004770:	eba6 0807 	sub.w	r8, r6, r7
 8004774:	608b      	str	r3, [r1, #8]
 8004776:	f1b8 0f00 	cmp.w	r8, #0
 800477a:	dd9c      	ble.n	80046b6 <__sflush_r+0x1a>
 800477c:	6a21      	ldr	r1, [r4, #32]
 800477e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004780:	4643      	mov	r3, r8
 8004782:	463a      	mov	r2, r7
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	2800      	cmp	r0, #0
 800478a:	dc06      	bgt.n	800479a <__sflush_r+0xfe>
 800478c:	89a3      	ldrh	r3, [r4, #12]
 800478e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e78e      	b.n	80046b8 <__sflush_r+0x1c>
 800479a:	4407      	add	r7, r0
 800479c:	eba8 0800 	sub.w	r8, r8, r0
 80047a0:	e7e9      	b.n	8004776 <__sflush_r+0xda>
 80047a2:	bf00      	nop
 80047a4:	20400001 	.word	0x20400001

080047a8 <_fflush_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	690b      	ldr	r3, [r1, #16]
 80047ac:	4605      	mov	r5, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	b913      	cbnz	r3, 80047b8 <_fflush_r+0x10>
 80047b2:	2500      	movs	r5, #0
 80047b4:	4628      	mov	r0, r5
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	b118      	cbz	r0, 80047c2 <_fflush_r+0x1a>
 80047ba:	6983      	ldr	r3, [r0, #24]
 80047bc:	b90b      	cbnz	r3, 80047c2 <_fflush_r+0x1a>
 80047be:	f7ff f8b9 	bl	8003934 <__sinit>
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <_fflush_r+0x6c>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	d11b      	bne.n	8004800 <_fflush_r+0x58>
 80047c8:	686c      	ldr	r4, [r5, #4]
 80047ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ef      	beq.n	80047b2 <_fflush_r+0xa>
 80047d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047d4:	07d0      	lsls	r0, r2, #31
 80047d6:	d404      	bmi.n	80047e2 <_fflush_r+0x3a>
 80047d8:	0599      	lsls	r1, r3, #22
 80047da:	d402      	bmi.n	80047e2 <_fflush_r+0x3a>
 80047dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047de:	f7ff f947 	bl	8003a70 <__retarget_lock_acquire_recursive>
 80047e2:	4628      	mov	r0, r5
 80047e4:	4621      	mov	r1, r4
 80047e6:	f7ff ff59 	bl	800469c <__sflush_r>
 80047ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ec:	07da      	lsls	r2, r3, #31
 80047ee:	4605      	mov	r5, r0
 80047f0:	d4e0      	bmi.n	80047b4 <_fflush_r+0xc>
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	059b      	lsls	r3, r3, #22
 80047f6:	d4dd      	bmi.n	80047b4 <_fflush_r+0xc>
 80047f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047fa:	f7ff f93a 	bl	8003a72 <__retarget_lock_release_recursive>
 80047fe:	e7d9      	b.n	80047b4 <_fflush_r+0xc>
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_fflush_r+0x70>)
 8004802:	429c      	cmp	r4, r3
 8004804:	d101      	bne.n	800480a <_fflush_r+0x62>
 8004806:	68ac      	ldr	r4, [r5, #8]
 8004808:	e7df      	b.n	80047ca <_fflush_r+0x22>
 800480a:	4b04      	ldr	r3, [pc, #16]	; (800481c <_fflush_r+0x74>)
 800480c:	429c      	cmp	r4, r3
 800480e:	bf08      	it	eq
 8004810:	68ec      	ldreq	r4, [r5, #12]
 8004812:	e7da      	b.n	80047ca <_fflush_r+0x22>
 8004814:	08004ba8 	.word	0x08004ba8
 8004818:	08004bc8 	.word	0x08004bc8
 800481c:	08004b88 	.word	0x08004b88

08004820 <_lseek_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	; (8004840 <_lseek_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fc f988 	bl	8000b44 <_lseek>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_lseek_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_lseek_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000230 	.word	0x20000230

08004844 <__swhatbuf_r>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460e      	mov	r6, r1
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	2900      	cmp	r1, #0
 800484e:	b096      	sub	sp, #88	; 0x58
 8004850:	4614      	mov	r4, r2
 8004852:	461d      	mov	r5, r3
 8004854:	da08      	bge.n	8004868 <__swhatbuf_r+0x24>
 8004856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	061a      	lsls	r2, r3, #24
 8004860:	d410      	bmi.n	8004884 <__swhatbuf_r+0x40>
 8004862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004866:	e00e      	b.n	8004886 <__swhatbuf_r+0x42>
 8004868:	466a      	mov	r2, sp
 800486a:	f000 f913 	bl	8004a94 <_fstat_r>
 800486e:	2800      	cmp	r0, #0
 8004870:	dbf1      	blt.n	8004856 <__swhatbuf_r+0x12>
 8004872:	9a01      	ldr	r2, [sp, #4]
 8004874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800487c:	425a      	negs	r2, r3
 800487e:	415a      	adcs	r2, r3
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	e7ee      	b.n	8004862 <__swhatbuf_r+0x1e>
 8004884:	2340      	movs	r3, #64	; 0x40
 8004886:	2000      	movs	r0, #0
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	b016      	add	sp, #88	; 0x58
 800488c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004890 <__smakebuf_r>:
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004894:	079d      	lsls	r5, r3, #30
 8004896:	4606      	mov	r6, r0
 8004898:	460c      	mov	r4, r1
 800489a:	d507      	bpl.n	80048ac <__smakebuf_r+0x1c>
 800489c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	2301      	movs	r3, #1
 80048a6:	6163      	str	r3, [r4, #20]
 80048a8:	b002      	add	sp, #8
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	ab01      	add	r3, sp, #4
 80048ae:	466a      	mov	r2, sp
 80048b0:	f7ff ffc8 	bl	8004844 <__swhatbuf_r>
 80048b4:	9900      	ldr	r1, [sp, #0]
 80048b6:	4605      	mov	r5, r0
 80048b8:	4630      	mov	r0, r6
 80048ba:	f7ff f8fb 	bl	8003ab4 <_malloc_r>
 80048be:	b948      	cbnz	r0, 80048d4 <__smakebuf_r+0x44>
 80048c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c4:	059a      	lsls	r2, r3, #22
 80048c6:	d4ef      	bmi.n	80048a8 <__smakebuf_r+0x18>
 80048c8:	f023 0303 	bic.w	r3, r3, #3
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	e7e3      	b.n	800489c <__smakebuf_r+0xc>
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <__smakebuf_r+0x7c>)
 80048d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	6020      	str	r0, [r4, #0]
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	9b00      	ldr	r3, [sp, #0]
 80048e4:	6163      	str	r3, [r4, #20]
 80048e6:	9b01      	ldr	r3, [sp, #4]
 80048e8:	6120      	str	r0, [r4, #16]
 80048ea:	b15b      	cbz	r3, 8004904 <__smakebuf_r+0x74>
 80048ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048f0:	4630      	mov	r0, r6
 80048f2:	f000 f8e1 	bl	8004ab8 <_isatty_r>
 80048f6:	b128      	cbz	r0, 8004904 <__smakebuf_r+0x74>
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	89a0      	ldrh	r0, [r4, #12]
 8004906:	4305      	orrs	r5, r0
 8004908:	81a5      	strh	r5, [r4, #12]
 800490a:	e7cd      	b.n	80048a8 <__smakebuf_r+0x18>
 800490c:	080038cd 	.word	0x080038cd

08004910 <memcpy>:
 8004910:	440a      	add	r2, r1
 8004912:	4291      	cmp	r1, r2
 8004914:	f100 33ff 	add.w	r3, r0, #4294967295
 8004918:	d100      	bne.n	800491c <memcpy+0xc>
 800491a:	4770      	bx	lr
 800491c:	b510      	push	{r4, lr}
 800491e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004926:	4291      	cmp	r1, r2
 8004928:	d1f9      	bne.n	800491e <memcpy+0xe>
 800492a:	bd10      	pop	{r4, pc}

0800492c <memmove>:
 800492c:	4288      	cmp	r0, r1
 800492e:	b510      	push	{r4, lr}
 8004930:	eb01 0402 	add.w	r4, r1, r2
 8004934:	d902      	bls.n	800493c <memmove+0x10>
 8004936:	4284      	cmp	r4, r0
 8004938:	4623      	mov	r3, r4
 800493a:	d807      	bhi.n	800494c <memmove+0x20>
 800493c:	1e43      	subs	r3, r0, #1
 800493e:	42a1      	cmp	r1, r4
 8004940:	d008      	beq.n	8004954 <memmove+0x28>
 8004942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800494a:	e7f8      	b.n	800493e <memmove+0x12>
 800494c:	4402      	add	r2, r0
 800494e:	4601      	mov	r1, r0
 8004950:	428a      	cmp	r2, r1
 8004952:	d100      	bne.n	8004956 <memmove+0x2a>
 8004954:	bd10      	pop	{r4, pc}
 8004956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800495a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800495e:	e7f7      	b.n	8004950 <memmove+0x24>

08004960 <__malloc_lock>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__malloc_lock+0x8>)
 8004962:	f7ff b885 	b.w	8003a70 <__retarget_lock_acquire_recursive>
 8004966:	bf00      	nop
 8004968:	20000224 	.word	0x20000224

0800496c <__malloc_unlock>:
 800496c:	4801      	ldr	r0, [pc, #4]	; (8004974 <__malloc_unlock+0x8>)
 800496e:	f7ff b880 	b.w	8003a72 <__retarget_lock_release_recursive>
 8004972:	bf00      	nop
 8004974:	20000224 	.word	0x20000224

08004978 <_free_r>:
 8004978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800497a:	2900      	cmp	r1, #0
 800497c:	d044      	beq.n	8004a08 <_free_r+0x90>
 800497e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004982:	9001      	str	r0, [sp, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f1a1 0404 	sub.w	r4, r1, #4
 800498a:	bfb8      	it	lt
 800498c:	18e4      	addlt	r4, r4, r3
 800498e:	f7ff ffe7 	bl	8004960 <__malloc_lock>
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <_free_r+0x94>)
 8004994:	9801      	ldr	r0, [sp, #4]
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	b933      	cbnz	r3, 80049a8 <_free_r+0x30>
 800499a:	6063      	str	r3, [r4, #4]
 800499c:	6014      	str	r4, [r2, #0]
 800499e:	b003      	add	sp, #12
 80049a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049a4:	f7ff bfe2 	b.w	800496c <__malloc_unlock>
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d908      	bls.n	80049be <_free_r+0x46>
 80049ac:	6825      	ldr	r5, [r4, #0]
 80049ae:	1961      	adds	r1, r4, r5
 80049b0:	428b      	cmp	r3, r1
 80049b2:	bf01      	itttt	eq
 80049b4:	6819      	ldreq	r1, [r3, #0]
 80049b6:	685b      	ldreq	r3, [r3, #4]
 80049b8:	1949      	addeq	r1, r1, r5
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	e7ed      	b.n	800499a <_free_r+0x22>
 80049be:	461a      	mov	r2, r3
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b10b      	cbz	r3, 80049c8 <_free_r+0x50>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d9fa      	bls.n	80049be <_free_r+0x46>
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	1855      	adds	r5, r2, r1
 80049cc:	42a5      	cmp	r5, r4
 80049ce:	d10b      	bne.n	80049e8 <_free_r+0x70>
 80049d0:	6824      	ldr	r4, [r4, #0]
 80049d2:	4421      	add	r1, r4
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	6011      	str	r1, [r2, #0]
 80049da:	d1e0      	bne.n	800499e <_free_r+0x26>
 80049dc:	681c      	ldr	r4, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	6053      	str	r3, [r2, #4]
 80049e2:	4421      	add	r1, r4
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	e7da      	b.n	800499e <_free_r+0x26>
 80049e8:	d902      	bls.n	80049f0 <_free_r+0x78>
 80049ea:	230c      	movs	r3, #12
 80049ec:	6003      	str	r3, [r0, #0]
 80049ee:	e7d6      	b.n	800499e <_free_r+0x26>
 80049f0:	6825      	ldr	r5, [r4, #0]
 80049f2:	1961      	adds	r1, r4, r5
 80049f4:	428b      	cmp	r3, r1
 80049f6:	bf04      	itt	eq
 80049f8:	6819      	ldreq	r1, [r3, #0]
 80049fa:	685b      	ldreq	r3, [r3, #4]
 80049fc:	6063      	str	r3, [r4, #4]
 80049fe:	bf04      	itt	eq
 8004a00:	1949      	addeq	r1, r1, r5
 8004a02:	6021      	streq	r1, [r4, #0]
 8004a04:	6054      	str	r4, [r2, #4]
 8004a06:	e7ca      	b.n	800499e <_free_r+0x26>
 8004a08:	b003      	add	sp, #12
 8004a0a:	bd30      	pop	{r4, r5, pc}
 8004a0c:	20000228 	.word	0x20000228

08004a10 <_realloc_r>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4680      	mov	r8, r0
 8004a16:	4614      	mov	r4, r2
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b921      	cbnz	r1, 8004a26 <_realloc_r+0x16>
 8004a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a20:	4611      	mov	r1, r2
 8004a22:	f7ff b847 	b.w	8003ab4 <_malloc_r>
 8004a26:	b92a      	cbnz	r2, 8004a34 <_realloc_r+0x24>
 8004a28:	f7ff ffa6 	bl	8004978 <_free_r>
 8004a2c:	4625      	mov	r5, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	f000 f850 	bl	8004ad8 <_malloc_usable_size_r>
 8004a38:	4284      	cmp	r4, r0
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	d802      	bhi.n	8004a44 <_realloc_r+0x34>
 8004a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a42:	d812      	bhi.n	8004a6a <_realloc_r+0x5a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7ff f834 	bl	8003ab4 <_malloc_r>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0ed      	beq.n	8004a2e <_realloc_r+0x1e>
 8004a52:	42bc      	cmp	r4, r7
 8004a54:	4622      	mov	r2, r4
 8004a56:	4631      	mov	r1, r6
 8004a58:	bf28      	it	cs
 8004a5a:	463a      	movcs	r2, r7
 8004a5c:	f7ff ff58 	bl	8004910 <memcpy>
 8004a60:	4631      	mov	r1, r6
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7ff ff88 	bl	8004978 <_free_r>
 8004a68:	e7e1      	b.n	8004a2e <_realloc_r+0x1e>
 8004a6a:	4635      	mov	r5, r6
 8004a6c:	e7df      	b.n	8004a2e <_realloc_r+0x1e>
	...

08004a70 <_read_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d07      	ldr	r5, [pc, #28]	; (8004a90 <_read_r+0x20>)
 8004a74:	4604      	mov	r4, r0
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	602a      	str	r2, [r5, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7fc f81c 	bl	8000abc <_read>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_read_r+0x1e>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_read_r+0x1e>
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	20000230 	.word	0x20000230

08004a94 <_fstat_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4d07      	ldr	r5, [pc, #28]	; (8004ab4 <_fstat_r+0x20>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	f7fc f834 	bl	8000b0e <_fstat>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	d102      	bne.n	8004ab0 <_fstat_r+0x1c>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	b103      	cbz	r3, 8004ab0 <_fstat_r+0x1c>
 8004aae:	6023      	str	r3, [r4, #0]
 8004ab0:	bd38      	pop	{r3, r4, r5, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000230 	.word	0x20000230

08004ab8 <_isatty_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	; (8004ad4 <_isatty_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fc f833 	bl	8000b2e <_isatty>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_isatty_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_isatty_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000230 	.word	0x20000230

08004ad8 <_malloc_usable_size_r>:
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f18      	subs	r0, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfbc      	itt	lt
 8004ae2:	580b      	ldrlt	r3, [r1, r0]
 8004ae4:	18c0      	addlt	r0, r0, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
